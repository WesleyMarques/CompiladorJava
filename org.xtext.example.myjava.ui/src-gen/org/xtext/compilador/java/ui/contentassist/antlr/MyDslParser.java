/*
 * generated by Xtext
 */
package org.xtext.compilador.java.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.compilador.java.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.compilador.java.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.compilador.java.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.compilador.java.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getType_declarationAccess().getAlternatives_1(), "rule__Type_declaration__Alternatives_1");
					put(grammarAccess.getField_declarationAccess().getAlternatives(), "rule__Field_declaration__Alternatives");
					put(grammarAccess.getField_declarationAccess().getAlternatives_0_1(), "rule__Field_declaration__Alternatives_0_1");
					put(grammarAccess.getMethod_declarationAccess().getAlternatives_7(), "rule__Method_declaration__Alternatives_7");
					put(grammarAccess.getType_specifierAccess().getAlternatives(), "rule__Type_specifier__Alternatives");
					put(grammarAccess.getModifierAccess().getAlternatives(), "rule__Modifier__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getImport_statementAccess().getAlternatives_1(), "rule__Import_statement__Alternatives_1");
					put(grammarAccess.getCompilation_unitAccess().getGroup(), "rule__Compilation_unit__Group__0");
					put(grammarAccess.getType_declarationAccess().getGroup(), "rule__Type_declaration__Group__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup(), "rule__Interface_declaration__Group__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup_3(), "rule__Interface_declaration__Group_3__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup_3_2(), "rule__Interface_declaration__Group_3_2__0");
					put(grammarAccess.getClass_declarationAccess().getGroup(), "rule__Class_declaration__Group__0");
					put(grammarAccess.getClass_declarationAccess().getGroup_3(), "rule__Class_declaration__Group_3__0");
					put(grammarAccess.getClass_declarationAccess().getGroup_4(), "rule__Class_declaration__Group_4__0");
					put(grammarAccess.getClass_declarationAccess().getGroup_4_2(), "rule__Class_declaration__Group_4_2__0");
					put(grammarAccess.getField_declarationAccess().getGroup_0(), "rule__Field_declaration__Group_0__0");
					put(grammarAccess.getField_declarationAccess().getGroup_2(), "rule__Field_declaration__Group_2__0");
					put(grammarAccess.getMethod_declarationAccess().getGroup(), "rule__Method_declaration__Group__0");
					put(grammarAccess.getConstructor_declarationAccess().getGroup(), "rule__Constructor_declaration__Group__0");
					put(grammarAccess.getParameter_listAccess().getGroup(), "rule__Parameter_list__Group__0");
					put(grammarAccess.getParameter_listAccess().getGroup_1(), "rule__Parameter_list__Group_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getVariable_declarationAccess().getGroup(), "rule__Variable_declaration__Group__0");
					put(grammarAccess.getVariable_declarationAccess().getGroup_3(), "rule__Variable_declaration__Group_3__0");
					put(grammarAccess.getVariable_declaratorAccess().getGroup(), "rule__Variable_declarator__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getStatic_initializerAccess().getGroup(), "rule__Static_initializer__Group__0");
					put(grammarAccess.getStatement_blockAccess().getGroup(), "rule__Statement_block__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
					put(grammarAccess.getStatementAccess().getGroup_5(), "rule__Statement__Group_5__0");
					put(grammarAccess.getTry_statementAccess().getGroup(), "rule__Try_statement__Group__0");
					put(grammarAccess.getTry_statementAccess().getGroup_2(), "rule__Try_statement__Group_2__0");
					put(grammarAccess.getTry_statementAccess().getGroup_3(), "rule__Try_statement__Group_3__0");
					put(grammarAccess.getImport_statementAccess().getGroup(), "rule__Import_statement__Group__0");
					put(grammarAccess.getImport_statementAccess().getGroup_1_0(), "rule__Import_statement__Group_1_0__0");
					put(grammarAccess.getImport_statementAccess().getGroup_1_1(), "rule__Import_statement__Group_1_1__0");
					put(grammarAccess.getPackage_statementAccess().getGroup(), "rule__Package_statement__Group__0");
					put(grammarAccess.getPackage_nameAccess().getGroup(), "rule__Package_name__Group__0");
					put(grammarAccess.getPackage_name_lineAccess().getGroup(), "rule__Package_name_line__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
					put(grammarAccess.getCompilation_unitAccess().getNameAssignment_0(), "rule__Compilation_unit__NameAssignment_0");
					put(grammarAccess.getCompilation_unitAccess().getImportsAssignment_1(), "rule__Compilation_unit__ImportsAssignment_1");
					put(grammarAccess.getCompilation_unitAccess().getTypeDeclarationsAssignment_2(), "rule__Compilation_unit__TypeDeclarationsAssignment_2");
					put(grammarAccess.getType_declarationAccess().getCommentAssignment_0(), "rule__Type_declaration__CommentAssignment_0");
					put(grammarAccess.getType_declarationAccess().getClassDecAssignment_1_0(), "rule__Type_declaration__ClassDecAssignment_1_0");
					put(grammarAccess.getType_declarationAccess().getInterfaceDecAssignment_1_1(), "rule__Type_declaration__InterfaceDecAssignment_1_1");
					put(grammarAccess.getInterface_declarationAccess().getModifiersAssignment_0(), "rule__Interface_declaration__ModifiersAssignment_0");
					put(grammarAccess.getInterface_declarationAccess().getInterfaceNameAssignment_2(), "rule__Interface_declaration__InterfaceNameAssignment_2");
					put(grammarAccess.getInterface_declarationAccess().getInterfaceHerdadaAssignment_3_1(), "rule__Interface_declaration__InterfaceHerdadaAssignment_3_1");
					put(grammarAccess.getInterface_declarationAccess().getInterfacesHerdadasAssignment_3_2_1(), "rule__Interface_declaration__InterfacesHerdadasAssignment_3_2_1");
					put(grammarAccess.getClass_declarationAccess().getModifiersAssignment_0(), "rule__Class_declaration__ModifiersAssignment_0");
					put(grammarAccess.getClass_declarationAccess().getClassNameAssignment_2(), "rule__Class_declaration__ClassNameAssignment_2");
					put(grammarAccess.getClass_declarationAccess().getClassHerdadaAssignment_3_1(), "rule__Class_declaration__ClassHerdadaAssignment_3_1");
					put(grammarAccess.getClass_declarationAccess().getInterfaceImplementadaAssignment_4_1(), "rule__Class_declaration__InterfaceImplementadaAssignment_4_1");
					put(grammarAccess.getClass_declarationAccess().getInterfacesImplementadasAssignment_4_2_1(), "rule__Class_declaration__InterfacesImplementadasAssignment_4_2_1");
					put(grammarAccess.getClass_declarationAccess().getFieldsDeclarationAssignment_6(), "rule__Class_declaration__FieldsDeclarationAssignment_6");
					put(grammarAccess.getField_declarationAccess().getCommentAssignment_0_0(), "rule__Field_declaration__CommentAssignment_0_0");
					put(grammarAccess.getField_declarationAccess().getVariableDeclarationAssignment_0_1_0(), "rule__Field_declaration__VariableDeclarationAssignment_0_1_0");
					put(grammarAccess.getField_declarationAccess().getContructorNameAssignment_0_1_1(), "rule__Field_declaration__ContructorNameAssignment_0_1_1");
					put(grammarAccess.getField_declarationAccess().getMethodNameAssignment_0_1_2(), "rule__Field_declaration__MethodNameAssignment_0_1_2");
					put(grammarAccess.getField_declarationAccess().getStaticinitializerAssignment_1(), "rule__Field_declaration__StaticinitializerAssignment_1");
					put(grammarAccess.getMethod_declarationAccess().getModifiersMethodAssignment_0(), "rule__Method_declaration__ModifiersMethodAssignment_0");
					put(grammarAccess.getMethod_declarationAccess().getTypeMethodAssignment_1(), "rule__Method_declaration__TypeMethodAssignment_1");
					put(grammarAccess.getMethod_declarationAccess().getNameMethodAssignment_2(), "rule__Method_declaration__NameMethodAssignment_2");
					put(grammarAccess.getMethod_declarationAccess().getParameterListMethodAssignment_4(), "rule__Method_declaration__ParameterListMethodAssignment_4");
					put(grammarAccess.getMethod_declarationAccess().getStatementMethodAssignment_7_0(), "rule__Method_declaration__StatementMethodAssignment_7_0");
					put(grammarAccess.getConstructor_declarationAccess().getModifiersConstructorAssignment_0(), "rule__Constructor_declaration__ModifiersConstructorAssignment_0");
					put(grammarAccess.getConstructor_declarationAccess().getNameConstructorAssignment_1(), "rule__Constructor_declaration__NameConstructorAssignment_1");
					put(grammarAccess.getConstructor_declarationAccess().getParameterListConstructorAssignment_3(), "rule__Constructor_declaration__ParameterListConstructorAssignment_3");
					put(grammarAccess.getConstructor_declarationAccess().getStatementConstructorAssignment_5(), "rule__Constructor_declaration__StatementConstructorAssignment_5");
					put(grammarAccess.getParameter_listAccess().getParameterAssignment_0(), "rule__Parameter_list__ParameterAssignment_0");
					put(grammarAccess.getParameter_listAccess().getParametersAssignment_1_1(), "rule__Parameter_list__ParametersAssignment_1_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getParameterNameAssignment_1(), "rule__Parameter__ParameterNameAssignment_1");
					put(grammarAccess.getVariable_declarationAccess().getModifiersVariableAssignment_0(), "rule__Variable_declaration__ModifiersVariableAssignment_0");
					put(grammarAccess.getVariable_declarationAccess().getTypeAssignment_1(), "rule__Variable_declaration__TypeAssignment_1");
					put(grammarAccess.getVariable_declarationAccess().getNameVariableAssignment_2(), "rule__Variable_declaration__NameVariableAssignment_2");
					put(grammarAccess.getVariable_declarationAccess().getNamesAssignment_3_1(), "rule__Variable_declaration__NamesAssignment_3_1");
					put(grammarAccess.getVariable_declaratorAccess().getNameVariableAssignment_0(), "rule__Variable_declarator__NameVariableAssignment_0");
					put(grammarAccess.getTypeAccess().getTypeSpecifierAssignment_0(), "rule__Type__TypeSpecifierAssignment_0");
					put(grammarAccess.getStatic_initializerAccess().getStaticAssignment_0(), "rule__Static_initializer__StaticAssignment_0");
					put(grammarAccess.getStatic_initializerAccess().getNameAssignment_1(), "rule__Static_initializer__NameAssignment_1");
					put(grammarAccess.getStatement_blockAccess().getStatmentsAssignment_1(), "rule__Statement_block__StatmentsAssignment_1");
					put(grammarAccess.getStatementAccess().getNameStatementAssignment_1_0(), "rule__Statement__NameStatementAssignment_1_0");
					put(grammarAccess.getStatementAccess().getStatementAssignment_1_2(), "rule__Statement__StatementAssignment_1_2");
					put(grammarAccess.getStatementAccess().getTryStatementAssignment_3(), "rule__Statement__TryStatementAssignment_3");
					put(grammarAccess.getStatementAccess().getNameAssignment_4_2(), "rule__Statement__NameAssignment_4_2");
					put(grammarAccess.getStatementAccess().getNameAssignment_5_2(), "rule__Statement__NameAssignment_5_2");
					put(grammarAccess.getTry_statementAccess().getTryStatementAssignment_1(), "rule__Try_statement__TryStatementAssignment_1");
					put(grammarAccess.getTry_statementAccess().getParametersAssignment_2_2(), "rule__Try_statement__ParametersAssignment_2_2");
					put(grammarAccess.getTry_statementAccess().getStatementAssignment_2_4(), "rule__Try_statement__StatementAssignment_2_4");
					put(grammarAccess.getTry_statementAccess().getStatementFinallyAssignment_3_1(), "rule__Try_statement__StatementFinallyAssignment_3_1");
					put(grammarAccess.getImport_statementAccess().getClassNameAssignment_1_0_0(), "rule__Import_statement__ClassNameAssignment_1_0_0");
					put(grammarAccess.getImport_statementAccess().getPacNameAssignment_1_1_0(), "rule__Import_statement__PacNameAssignment_1_1_0");
					put(grammarAccess.getPackage_statementAccess().getPacNameAssignment_1(), "rule__Package_statement__PacNameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.compilador.java.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.compilador.java.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
