/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsCompilation_unitParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleCompilation_unit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Compilation_unit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCompilation_unit
entryRuleCompilation_unit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilation_unitRule()); }
	 iv_ruleCompilation_unit=ruleCompilation_unit 
	 { $current=$iv_ruleCompilation_unit.current; } 
	 EOF 
;

// Rule Compilation_unit
ruleCompilation_unit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompilation_unitAccess().getCompilation_unitAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getNamePackage_statementParserRuleCall_1_0()); 
	    }
		lv_name_1_0=rulePackage_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Package_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getImportsImport_statementParserRuleCall_2_0()); 
	    }
		lv_imports_2_0=ruleImport_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getTypeDeclarationsType_declarationParserRuleCall_3_0()); 
	    }
		lv_typeDeclarations_3_0=ruleType_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		add(
       			$current, 
       			"typeDeclarations",
        		lv_typeDeclarations_3_0, 
        		"Type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleType_declaration
entryRuleType_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_declarationRule()); }
	 iv_ruleType_declaration=ruleType_declaration 
	 { $current=$iv_ruleType_declaration.current; } 
	 EOF 
;

// Rule Type_declaration
ruleType_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_comment_0_0=RULE_DOC_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getType_declarationAccess().getCommentDOC_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"DOC_COMMENT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getClassDecClass_declarationParserRuleCall_1_0_0()); 
	    }
		lv_classDec_1_0=ruleClass_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"classDec",
        		lv_classDec_1_0, 
        		"Class_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getInterfaceDecInterface_declarationParserRuleCall_1_1_0()); 
	    }
		lv_interfaceDec_2_0=ruleInterface_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"interfaceDec",
        		lv_interfaceDec_2_0, 
        		"Interface_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getType_declarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInterface_declaration
entryRuleInterface_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_declarationRule()); }
	 iv_ruleInterface_declaration=ruleInterface_declaration 
	 { $current=$iv_ruleInterface_declaration.current; } 
	 EOF 
;

// Rule Interface_declaration
ruleInterface_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterface_declarationAccess().getInterfaceKeyword_1());
    }
(
(
		lv_interfaceName_2_0=RULE_ID
		{
			newLeafNode(lv_interfaceName_2_0, grammarAccess.getInterface_declarationAccess().getInterfaceNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"interfaceName",
        		lv_interfaceName_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterface_declarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getInterfaceHerdadaInterface_nameParserRuleCall_3_1_0()); 
	    }
		lv_interfaceHerdada_4_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		set(
       			$current, 
       			"interfaceHerdada",
        		lv_interfaceHerdada_4_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterface_declarationAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0()); 
	    }
		lv_interfacesHerdadas_6_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"interfacesHerdadas",
        		lv_interfacesHerdadas_6_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterface_declarationAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getFieldsDeclarationField_declarationParserRuleCall_5_0()); 
	    }
		lv_fieldsDeclaration_8_0=ruleField_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"fieldsDeclaration",
        		lv_fieldsDeclaration_8_0, 
        		"Field_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInterface_declarationAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClass_declaration
entryRuleClass_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_declarationRule()); }
	 iv_ruleClass_declaration=ruleClass_declaration 
	 { $current=$iv_ruleClass_declaration.current; } 
	 EOF 
;

// Rule Class_declaration
ruleClass_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClass_declarationAccess().getClassKeyword_1());
    }
(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getClass_declarationAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClass_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClass_declarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getClassHerdadaClass_nameParserRuleCall_3_1_0()); 
	    }
		lv_classHerdada_4_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		set(
       			$current, 
       			"classHerdada",
        		lv_classHerdada_4_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='implements' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClass_declarationAccess().getImplementsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getInterfaceImplementadaInterface_nameParserRuleCall_4_1_0()); 
	    }
		lv_interfaceImplementada_6_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		set(
       			$current, 
       			"interfaceImplementada",
        		lv_interfaceImplementada_6_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClass_declarationAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0()); 
	    }
		lv_interfacesImplementadas_8_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"interfacesImplementadas",
        		lv_interfacesImplementadas_8_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getClass_declarationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getFieldsDeclarationField_declarationParserRuleCall_6_0()); 
	    }
		lv_fieldsDeclaration_10_0=ruleField_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"fieldsDeclaration",
        		lv_fieldsDeclaration_10_0, 
        		"Field_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getClass_declarationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleField_declaration
entryRuleField_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_declarationRule()); }
	 iv_ruleField_declaration=ruleField_declaration 
	 { $current=$iv_ruleField_declaration.current; } 
	 EOF 
;

// Rule Field_declaration
ruleField_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_comment_0_0=RULE_DOC_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getField_declarationAccess().getCommentDOC_COMMENTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"DOC_COMMENT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0()); 
	    }
		lv_variableDeclaration_1_0=ruleVariable_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"variableDeclaration",
        		lv_variableDeclaration_1_0, 
        		"Variable_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getContructorNameConstructor_declarationParserRuleCall_0_1_1_0()); 
	    }
		lv_contructorName_2_0=ruleConstructor_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"contructorName",
        		lv_contructorName_2_0, 
        		"Constructor_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getMethodNameMethod_declarationParserRuleCall_0_1_2_0()); 
	    }
		lv_methodName_3_0=ruleMethod_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_3_0, 
        		"Method_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getStaticinitializerStatic_initializerParserRuleCall_1_0()); 
	    }
		lv_staticinitializer_4_0=ruleStatic_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"staticinitializer",
        		lv_staticinitializer_4_0, 
        		"Static_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getField_declarationAccess().getField_declarationAction_2_0(),
            $current);
    }
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getField_declarationAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleMethod_declaration
entryRuleMethod_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethod_declarationRule()); }
	 iv_ruleMethod_declaration=ruleMethod_declaration 
	 { $current=$iv_ruleMethod_declaration.current; } 
	 EOF 
;

// Rule Method_declaration
ruleMethod_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getModifiersMethodModifierParserRuleCall_0_0()); 
	    }
		lv_modifiersMethod_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiersMethod",
        		lv_modifiersMethod_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getTypeMethodTypeParserRuleCall_1_0()); 
	    }
		lv_typeMethod_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"typeMethod",
        		lv_typeMethod_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_nameMethod_2_0=RULE_ID
		{
			newLeafNode(lv_nameMethod_2_0, grammarAccess.getMethod_declarationAccess().getNameMethodIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameMethod",
        		lv_nameMethod_2_0, 
        		"ID");
	    }

)
)(
(
		lv_lParen_3_0=RULE_LPAREN
		{
			newLeafNode(lv_lParen_3_0, grammarAccess.getMethod_declarationAccess().getLParenLPARENTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lParen",
        		lv_lParen_3_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getParameterListMethodParameter_listParserRuleCall_4_0()); 
	    }
		lv_parameterListMethod_4_0=ruleParameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"parameterListMethod",
        		lv_parameterListMethod_4_0, 
        		"Parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_rparent_5_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_5_0, grammarAccess.getMethod_declarationAccess().getRparentRPARENTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_5_0, 
        		"RPAREN");
	    }

)
)(	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethod_declarationAccess().getLeftSquareBracketKeyword_6_0());
    }
	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethod_declarationAccess().getRightSquareBracketKeyword_6_1());
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getStatementMethodStatement_blockParserRuleCall_7_0_0()); 
	    }
		lv_statementMethod_8_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"statementMethod",
        		lv_statementMethod_8_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_debug_9_0=	';' 
    {
        newLeafNode(lv_debug_9_0, grammarAccess.getMethod_declarationAccess().getDebugSemicolonKeyword_7_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed($current, "debug", lv_debug_9_0, ";");
	    }

)
)))
;





// Entry rule entryRuleConstructor_declaration
entryRuleConstructor_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructor_declarationRule()); }
	 iv_ruleConstructor_declaration=ruleConstructor_declaration 
	 { $current=$iv_ruleConstructor_declaration.current; } 
	 EOF 
;

// Rule Constructor_declaration
ruleConstructor_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getModifiersConstructorModifierParserRuleCall_0_0()); 
	    }
		lv_modifiersConstructor_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiersConstructor",
        		lv_modifiersConstructor_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_nameConstructor_1_0=RULE_ID
		{
			newLeafNode(lv_nameConstructor_1_0, grammarAccess.getConstructor_declarationAccess().getNameConstructorIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructor_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameConstructor",
        		lv_nameConstructor_1_0, 
        		"ID");
	    }

)
)(
(
		lv_lParen_2_0=RULE_LPAREN
		{
			newLeafNode(lv_lParen_2_0, grammarAccess.getConstructor_declarationAccess().getLParenLPARENTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructor_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lParen",
        		lv_lParen_2_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getParameterListConstructorParameter_listParserRuleCall_3_0()); 
	    }
		lv_parameterListConstructor_3_0=ruleParameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		set(
       			$current, 
       			"parameterListConstructor",
        		lv_parameterListConstructor_3_0, 
        		"Parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_rparent_4_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_4_0, grammarAccess.getConstructor_declarationAccess().getRparentRPARENTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructor_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_4_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getStatementConstructorStatement_blockParserRuleCall_5_0()); 
	    }
		lv_statementConstructor_5_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		set(
       			$current, 
       			"statementConstructor",
        		lv_statementConstructor_5_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter_list
entryRuleParameter_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	 iv_ruleParameter_list=ruleParameter_list 
	 { $current=$iv_ruleParameter_list.current; } 
	 EOF 
;

// Rule Parameter_list
ruleParameter_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParameterParameterParserRuleCall_0_0()); 
	    }
		lv_parameter_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParametersParameterParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_parameterName_1_0=RULE_ID
		{
			newLeafNode(lv_parameterName_1_0, grammarAccess.getParameterAccess().getParameterNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parameterName",
        		lv_parameterName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_0());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_1());
    }
)*)
;





// Entry rule entryRuleVariable_declaration
entryRuleVariable_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); }
	 iv_ruleVariable_declaration=ruleVariable_declaration 
	 { $current=$iv_ruleVariable_declaration.current; } 
	 EOF 
;

// Rule Variable_declaration
ruleVariable_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getModifiersVariableModifierParserRuleCall_0_0()); 
	    }
		lv_modifiersVariable_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiersVariable",
        		lv_modifiersVariable_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getNameVariableVariable_declaratorParserRuleCall_2_0()); 
	    }
		lv_nameVariable_2_0=ruleVariable_declarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		set(
       			$current, 
       			"nameVariable",
        		lv_nameVariable_2_0, 
        		"Variable_declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariable_declarationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getNamesVariable_declaratorParserRuleCall_3_1_0()); 
	    }
		lv_names_4_0=ruleVariable_declarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		add(
       			$current, 
       			"names",
        		lv_names_4_0, 
        		"Variable_declarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariable_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariable_declarator
entryRuleVariable_declarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declaratorRule()); }
	 iv_ruleVariable_declarator=ruleVariable_declarator 
	 { $current=$iv_ruleVariable_declarator.current; } 
	 EOF 
;

// Rule Variable_declarator
ruleVariable_declarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nameVariable_0_0=RULE_ID
		{
			newLeafNode(lv_nameVariable_0_0, grammarAccess.getVariable_declaratorAccess().getNameVariableIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariable_declaratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameVariable",
        		lv_nameVariable_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariable_declaratorAccess().getLeftSquareBracketKeyword_1_0());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariable_declaratorAccess().getRightSquareBracketKeyword_1_1());
    }
)*(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariable_declaratorAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declaratorAccess().getVariVariable_initializerParserRuleCall_2_1_0()); 
	    }
		lv_vari_4_0=ruleVariable_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declaratorRule());
	        }
       		set(
       			$current, 
       			"vari",
        		lv_vari_4_0, 
        		"Variable_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariable_initializer
entryRuleVariable_initializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_initializerRule()); }
	 iv_ruleVariable_initializer=ruleVariable_initializer 
	 { $current=$iv_ruleVariable_initializer.current; } 
	 EOF 
;

// Rule Variable_initializer
ruleVariable_initializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariable_initializerAccess().getArray_initializerParserRuleCall_0()); 
    }
    this_Array_initializer_0=ruleArray_initializer
    { 
        $current = $this_Array_initializer_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariable_initializerAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArray_initializer
entryRuleArray_initializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_initializerRule()); }
	 iv_ruleArray_initializer=ruleArray_initializer 
	 { $current=$iv_ruleArray_initializer.current; } 
	 EOF 
;

// Rule Array_initializer
ruleArray_initializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArray_initializerAccess().getArray_initializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArray_initializerAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getArray_initializerAccess().getVariableinitializerVariable_initializerParserRuleCall_2_0_0()); 
	    }
		lv_variableinitializer_2_0=ruleVariable_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_initializerRule());
	        }
       		add(
       			$current, 
       			"variableinitializer",
        		lv_variableinitializer_2_0, 
        		"Variable_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArray_initializerAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArray_initializerAccess().getVariableinitializerVariable_initializerParserRuleCall_2_1_1_0()); 
	    }
		lv_variableinitializer_4_0=ruleVariable_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_initializerRule());
	        }
       		add(
       			$current, 
       			"variableinitializer",
        		lv_variableinitializer_4_0, 
        		"Variable_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArray_initializerAccess().getCommaKeyword_2_2());
    }
)?)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArray_initializerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeSpecifierType_specifierParserRuleCall_0_0()); 
	    }
		lv_typeSpecifier_0_0=ruleType_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_0_0, 
        		"Type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1());
    }
)*)
;





// Entry rule entryRuleType_specifier
entryRuleType_specifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_specifierRule()); } 
	 iv_ruleType_specifier=ruleType_specifier 
	 { $current=$iv_ruleType_specifier.current.getText(); }  
	 EOF 
;

// Rule Type_specifier
ruleType_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getBooleanKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getByteKeyword_1()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getCharKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getShortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getIntKeyword_4()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getFloatKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getLongKeyword_6()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getDoubleKeyword_7()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getVoidKeyword_8()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getType_specifierAccess().getClass_nameParserRuleCall_9()); 
    }
    this_Class_name_9=ruleClass_name    {
		$current.merge(this_Class_name_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_MOD_0=RULE_MOD    {
		$current.merge(this_MOD_0);
    }

    { 
    newLeafNode(this_MOD_0, grammarAccess.getModifierAccess().getMODTerminalRuleCall_0()); 
    }

    |    this_STATIC_1=RULE_STATIC    {
		$current.merge(this_STATIC_1);
    }

    { 
    newLeafNode(this_STATIC_1, grammarAccess.getModifierAccess().getSTATICTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleStatic_initializer
entryRuleStatic_initializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatic_initializerRule()); }
	 iv_ruleStatic_initializer=ruleStatic_initializer 
	 { $current=$iv_ruleStatic_initializer.current; } 
	 EOF 
;

// Rule Static_initializer
ruleStatic_initializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=RULE_STATIC
		{
			newLeafNode(lv_static_0_0, grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatic_initializerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"static",
        		lv_static_0_0, 
        		"STATIC");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatic_initializerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement_block
entryRuleStatement_block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_blockRule()); }
	 iv_ruleStatement_block=ruleStatement_block 
	 { $current=$iv_ruleStatement_block.current; } 
	 EOF 
;

// Rule Statement_block
ruleStatement_block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatement_blockAccess().getStatement_blockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatement_blockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_blockAccess().getStatmentsStatementParserRuleCall_2_0()); 
	    }
		lv_statments_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_blockRule());
	        }
       		add(
       			$current, 
       			"statments",
        		lv_statments_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatement_blockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationVariable_declarationParserRuleCall_0_0()); 
	    }
		lv_variableDeclaration_0_0=ruleVariable_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"variableDeclaration",
        		lv_variableDeclaration_0_0, 
        		"Variable_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expressionStatement_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		add(
       			$current, 
       			"expressionStatement",
        		lv_expressionStatement_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_g_2_0=	';' 
    {
        newLeafNode(lv_g_2_0, grammarAccess.getStatementAccess().getGSemicolonKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed($current, "g", lv_g_2_0, ";");
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementIf_statementParserRuleCall_2_0()); 
	    }
		lv_ifStatement_3_0=ruleIf_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"ifStatement",
        		lv_ifStatement_3_0, 
        		"If_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getDoStatementDo_StatementParserRuleCall_3_0()); 
	    }
		lv_doStatement_4_0=ruleDo_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"doStatement",
        		lv_doStatement_4_0, 
        		"Do_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementWhile_StatementParserRuleCall_4_0()); 
	    }
		lv_whileStatement_5_0=ruleWhile_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"whileStatement",
        		lv_whileStatement_5_0, 
        		"While_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getForStatementFor_StatementParserRuleCall_5_0()); 
	    }
		lv_forStatement_6_0=ruleFor_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"forStatement",
        		lv_forStatement_6_0, 
        		"For_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementSwitch_statementParserRuleCall_6_0()); 
	    }
		lv_switchStatement_7_0=ruleSwitch_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"switchStatement",
        		lv_switchStatement_7_0, 
        		"Switch_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_8='synchronized(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getSynchronizedKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_7_1_0()); 
	    }
		lv_expression_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_10_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_10_0, grammarAccess.getStatementAccess().getRparentRPARENTerminalRuleCall_7_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_10_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSyncStatementStatementParserRuleCall_7_3_0()); 
	    }
		lv_syncStatement_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"syncStatement",
        		lv_syncStatement_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_8_0(),
            $current);
    }
)	otherlv_13='return' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStatementAccess().getReturnKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_8_2_0()); 
	    }
		lv_expression_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_14_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getSemicolonKeyword_8_3());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_9_0(),
            $current);
    }
)	otherlv_17='throw' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatementAccess().getThrowKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_9_2_0()); 
	    }
		lv_expression_18_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_18_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_19=';' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStatementAccess().getSemicolonKeyword_9_3());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_blockParserRuleCall_10()); 
    }
    this_Statement_block_20=ruleStatement_block
    { 
        $current = $this_Statement_block_20.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getTryStatementTry_statementParserRuleCall_11_0()); 
	    }
		lv_tryStatement_21_0=ruleTry_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"tryStatement",
        		lv_tryStatement_21_0, 
        		"Try_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_nameStatement_22_0=RULE_ID
		{
			newLeafNode(lv_nameStatement_22_0, grammarAccess.getStatementAccess().getNameStatementIDTerminalRuleCall_12_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameStatement",
        		lv_nameStatement_22_0, 
        		"ID");
	    }

)
)	otherlv_23=':' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStatementAccess().getColonKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatementStatementParserRuleCall_12_2_0()); 
	    }
		lv_statement_24_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_24_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_13_0(),
            $current);
    }
)	otherlv_26='break' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getStatementAccess().getBreakKeyword_13_1());
    }
(
(
		lv_name_27_0=RULE_ID
		{
			newLeafNode(lv_name_27_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_13_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_27_0, 
        		"ID");
	    }

)
)?	otherlv_28=';' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getStatementAccess().getSemicolonKeyword_13_3());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_14_0(),
            $current);
    }
)	otherlv_30='continue' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getStatementAccess().getContinueKeyword_14_1());
    }
(
(
		lv_name_31_0=RULE_ID
		{
			newLeafNode(lv_name_31_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_14_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_31_0, 
        		"ID");
	    }

)
)?	otherlv_32=';' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getStatementAccess().getSemicolonKeyword_14_3());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_15_0(),
            $current);
    }
)	otherlv_34=';' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getStatementAccess().getSemicolonKeyword_15_1());
    }
))
;





// Entry rule entryRuleFor_Statement
entryRuleFor_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_StatementRule()); }
	 iv_ruleFor_Statement=ruleFor_Statement 
	 { $current=$iv_ruleFor_Statement.current; } 
	 EOF 
;

// Rule For_Statement
ruleFor_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFor_StatementAccess().getForKeyword_0());
    }
(
(
		lv_lparent_1_0=RULE_LPAREN
		{
			newLeafNode(lv_lparent_1_0, grammarAccess.getFor_StatementAccess().getLparentLPARENTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFor_StatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparent",
        		lv_lparent_1_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getForControlFor_controlParserRuleCall_2_0()); 
	    }
		lv_forControl_2_0=ruleFor_control		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"forControl",
        		lv_forControl_2_0, 
        		"For_control");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rParent_3_0=RULE_RPAREN
		{
			newLeafNode(lv_rParent_3_0, grammarAccess.getFor_StatementAccess().getRParentRPARENTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFor_StatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rParent",
        		lv_rParent_3_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getForStatementStatementParserRuleCall_4_0()); 
	    }
		lv_forStatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"forStatement",
        		lv_forStatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor_control
entryRuleFor_control returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_controlRule()); }
	 iv_ruleFor_control=ruleFor_control 
	 { $current=$iv_ruleFor_control.current; } 
	 EOF 
;

// Rule For_control
ruleFor_control returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_controlAccess().getFor_controlAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFor_controlAccess().getForinitFor_initParserRuleCall_1_0_0()); 
	    }
		lv_forinit_1_0=ruleFor_init		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_controlRule());
	        }
       		set(
       			$current, 
       			"forinit",
        		lv_forinit_1_0, 
        		"For_init");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFor_controlAccess().getSemicolonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_controlAccess().getExpressionFor_expressionParserRuleCall_1_2_0()); 
	    }
		lv_expression_3_0=ruleFor_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_controlRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"For_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFor_controlAccess().getSemicolonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_controlAccess().getForupdateFor_updateParserRuleCall_1_4_0()); 
	    }
		lv_forupdate_5_0=ruleFor_update		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_controlRule());
	        }
       		set(
       			$current, 
       			"forupdate",
        		lv_forupdate_5_0, 
        		"For_update");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleVariable_value
entryRuleVariable_value returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_valueRule()); }
	 iv_ruleVariable_value=ruleVariable_value 
	 { $current=$iv_ruleVariable_value.current; } 
	 EOF 
;

// Rule Variable_value
ruleVariable_value returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_valueAccess().getNameLiteralParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_valueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePrimitive_type
entryRulePrimitive_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitive_typeRule()); }
	 iv_rulePrimitive_type=rulePrimitive_type 
	 { $current=$iv_rulePrimitive_type.current; } 
	 EOF 
;

// Rule Primitive_type
rulePrimitive_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitive_typeAccess().getNameType_specifierParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleType_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitive_typeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFor_init
entryRuleFor_init returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_initRule()); }
	 iv_ruleFor_init=ruleFor_init 
	 { $current=$iv_ruleFor_init.current; } 
	 EOF 
;

// Rule For_init
ruleFor_init returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_initAccess().getFor_initAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_initAccess().getTypePrimitive_typeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=rulePrimitive_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_initRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Primitive_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_initAccess().getVarVariableParserRuleCall_2_0()); 
	    }
		lv_var_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_initRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFor_initAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_initAccess().getVar_initVariable_valueParserRuleCall_4_0()); 
	    }
		lv_var_init_4_0=ruleVariable_value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_initRule());
	        }
       		set(
       			$current, 
       			"var_init",
        		lv_var_init_4_0, 
        		"Variable_value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor_expression
entryRuleFor_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_expressionRule()); }
	 iv_ruleFor_expression=ruleFor_expression 
	 { $current=$iv_ruleFor_expression.current; } 
	 EOF 
;

// Rule For_expression
ruleFor_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_expressionAccess().getFor_expressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_expressionAccess().getVariable1VariableParserRuleCall_1_0()); 
	    }
		lv_variable1_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_expressionRule());
	        }
       		set(
       			$current, 
       			"variable1",
        		lv_variable1_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_expressionAccess().getExpOpFor_expression_operatorParserRuleCall_2_0()); 
	    }
		lv_ExpOp_2_0=ruleFor_expression_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_expressionRule());
	        }
       		set(
       			$current, 
       			"ExpOp",
        		lv_ExpOp_2_0, 
        		"For_expression_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_expressionAccess().getLimitVariable_valueParserRuleCall_3_0()); 
	    }
		lv_limit_3_0=ruleVariable_value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_expressionRule());
	        }
       		set(
       			$current, 
       			"limit",
        		lv_limit_3_0, 
        		"Variable_value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor_update
entryRuleFor_update returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_updateRule()); }
	 iv_ruleFor_update=ruleFor_update 
	 { $current=$iv_ruleFor_update.current; } 
	 EOF 
;

// Rule For_update
ruleFor_update returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_updateAccess().getFor_updateAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_updateAccess().getVariableVariableParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_updateRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_updateAccess().getUpdateOpFor_update_operatorParserRuleCall_2_0()); 
	    }
		lv_updateOp_2_0=ruleFor_update_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_updateRule());
	        }
       		set(
       			$current, 
       			"updateOp",
        		lv_updateOp_2_0, 
        		"For_update_operator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor_update_operator
entryRuleFor_update_operator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_update_operatorRule()); }
	 iv_ruleFor_update_operator=ruleFor_update_operator 
	 { $current=$iv_ruleFor_update_operator.current; } 
	 EOF 
;

// Rule For_update_operator
ruleFor_update_operator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_update_operatorAccess().getFor_update_operatorAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_update_operatorAccess().getNameUpdate_operatorParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleUpdate_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_update_operatorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Update_operator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUpdate_operator
entryRuleUpdate_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdate_operatorRule()); } 
	 iv_ruleUpdate_operator=ruleUpdate_operator 
	 { $current=$iv_ruleUpdate_operator.current.getText(); }  
	 EOF 
;

// Rule Update_operator
ruleUpdate_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUpdate_operatorAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUpdate_operatorAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleFor_expression_operator
entryRuleFor_expression_operator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_expression_operatorRule()); }
	 iv_ruleFor_expression_operator=ruleFor_expression_operator 
	 { $current=$iv_ruleFor_expression_operator.current; } 
	 EOF 
;

// Rule For_expression_operator
ruleFor_expression_operator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFor_expression_operatorAccess().getFor_expression_operatorAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_expression_operatorAccess().getNameRelational_operatorParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleRelational_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_expression_operatorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Relational_operator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParens_expression
entryRuleParens_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParens_expressionRule()); }
	 iv_ruleParens_expression=ruleParens_expression 
	 { $current=$iv_ruleParens_expression.current; } 
	 EOF 
;

// Rule Parens_expression
ruleParens_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_lparent_0_0=RULE_LPAREN
		{
			newLeafNode(lv_lparent_0_0, grammarAccess.getParens_expressionAccess().getLparentLPARENTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParens_expressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparent",
        		lv_lparent_0_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParens_expressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParens_expressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_2_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_2_0, grammarAccess.getParens_expressionAccess().getRparentRPARENTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParens_expressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_2_0, 
        		"RPAREN");
	    }

)
))
;





// Entry rule entryRuleExpression_list
entryRuleExpression_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); }
	 iv_ruleExpression_list=ruleExpression_list 
	 { $current=$iv_ruleExpression_list.current; } 
	 EOF 
;

// Rule Expression_list
ruleExpression_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_listAccess().getExpression1ExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_listRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_listAccess().getExpression2ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression2_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_listRule());
	        }
       		add(
       			$current, 
       			"expression2",
        		lv_expression2_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditional_expressionParserRuleCall_0()); 
    }
    this_Conditional_expression_0=ruleConditional_expression
    { 
        $current = $this_Conditional_expression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
(
ruleAssignment_operator
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentoperatorAssignment_operatorParserRuleCall_1_0_0()); 
	    }
		lv_assignmentoperator_1_0=ruleAssignment_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"assignmentoperator",
        		lv_assignmentoperator_1_0, 
        		"Assignment_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditional_expression
entryRuleConditional_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_expressionRule()); }
	 iv_ruleConditional_expression=ruleConditional_expression 
	 { $current=$iv_ruleConditional_expression.current; } 
	 EOF 
;

// Rule Conditional_expression
ruleConditional_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_expressionAccess().getConditionalorexpressionConditional_OR_expressionParserRuleCall_0_0()); 
	    }
		lv_conditionalorexpression_0_0=ruleConditional_OR_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_expressionRule());
	        }
       		set(
       			$current, 
       			"conditionalorexpression",
        		lv_conditionalorexpression_0_0, 
        		"Conditional_OR_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditional_expressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_expressionAccess().getExpression1ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression1_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_expressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditional_expressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_expressionAccess().getExpression2ExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression2_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_expressionRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditional_OR_expression
entryRuleConditional_OR_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_OR_expressionRule()); }
	 iv_ruleConditional_OR_expression=ruleConditional_OR_expression 
	 { $current=$iv_ruleConditional_OR_expression.current; } 
	 EOF 
;

// Rule Conditional_OR_expression
ruleConditional_OR_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_OR_expressionAccess().getConditionalandexpressionConditional_AND_expressionParserRuleCall_0_0()); 
	    }
		lv_conditionalandexpression_0_0=ruleConditional_AND_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_OR_expressionRule());
	        }
       		add(
       			$current, 
       			"conditionalandexpression",
        		lv_conditionalandexpression_0_0, 
        		"Conditional_AND_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditional_OR_expressionAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_OR_expressionAccess().getConditionalandexpressionConditional_AND_expressionParserRuleCall_1_1_0()); 
	    }
		lv_conditionalandexpression_2_0=ruleConditional_AND_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_OR_expressionRule());
	        }
       		add(
       			$current, 
       			"conditionalandexpression",
        		lv_conditionalandexpression_2_0, 
        		"Conditional_AND_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditional_AND_expression
entryRuleConditional_AND_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_AND_expressionRule()); }
	 iv_ruleConditional_AND_expression=ruleConditional_AND_expression 
	 { $current=$iv_ruleConditional_AND_expression.current; } 
	 EOF 
;

// Rule Conditional_AND_expression
ruleConditional_AND_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_AND_expressionAccess().getInclusiveorexpressionInclusive_OR_expressionParserRuleCall_0_0()); 
	    }
		lv_inclusiveorexpression_0_0=ruleInclusive_OR_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_AND_expressionRule());
	        }
       		add(
       			$current, 
       			"inclusiveorexpression",
        		lv_inclusiveorexpression_0_0, 
        		"Inclusive_OR_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditional_AND_expressionAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditional_AND_expressionAccess().getInclusiveorexpressionInclusive_OR_expressionParserRuleCall_1_1_0()); 
	    }
		lv_inclusiveorexpression_2_0=ruleInclusive_OR_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditional_AND_expressionRule());
	        }
       		add(
       			$current, 
       			"inclusiveorexpression",
        		lv_inclusiveorexpression_2_0, 
        		"Inclusive_OR_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInclusive_OR_expression
entryRuleInclusive_OR_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInclusive_OR_expressionRule()); }
	 iv_ruleInclusive_OR_expression=ruleInclusive_OR_expression 
	 { $current=$iv_ruleInclusive_OR_expression.current; } 
	 EOF 
;

// Rule Inclusive_OR_expression
ruleInclusive_OR_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInclusive_OR_expressionAccess().getExclusiveorexpressionExclusive_OR_expressionParserRuleCall_0_0()); 
	    }
		lv_exclusiveorexpression_0_0=ruleExclusive_OR_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusive_OR_expressionRule());
	        }
       		add(
       			$current, 
       			"exclusiveorexpression",
        		lv_exclusiveorexpression_0_0, 
        		"Exclusive_OR_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInclusive_OR_expressionAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInclusive_OR_expressionAccess().getExclusiveorexpressionExclusive_OR_expressionParserRuleCall_1_1_0()); 
	    }
		lv_exclusiveorexpression_2_0=ruleExclusive_OR_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusive_OR_expressionRule());
	        }
       		add(
       			$current, 
       			"exclusiveorexpression",
        		lv_exclusiveorexpression_2_0, 
        		"Exclusive_OR_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExclusive_OR_expression
entryRuleExclusive_OR_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusive_OR_expressionRule()); }
	 iv_ruleExclusive_OR_expression=ruleExclusive_OR_expression 
	 { $current=$iv_ruleExclusive_OR_expression.current; } 
	 EOF 
;

// Rule Exclusive_OR_expression
ruleExclusive_OR_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExclusive_OR_expressionAccess().getAndexpressionAND_expressionParserRuleCall_0_0()); 
	    }
		lv_andexpression_0_0=ruleAND_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusive_OR_expressionRule());
	        }
       		add(
       			$current, 
       			"andexpression",
        		lv_andexpression_0_0, 
        		"AND_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExclusive_OR_expressionAccess().getCircumflexAccentKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusive_OR_expressionAccess().getAndexpressionAND_expressionParserRuleCall_1_1_0()); 
	    }
		lv_andexpression_2_0=ruleAND_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusive_OR_expressionRule());
	        }
       		add(
       			$current, 
       			"andexpression",
        		lv_andexpression_2_0, 
        		"AND_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAND_expression
entryRuleAND_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAND_expressionRule()); }
	 iv_ruleAND_expression=ruleAND_expression 
	 { $current=$iv_ruleAND_expression.current; } 
	 EOF 
;

// Rule AND_expression
ruleAND_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAND_expressionAccess().getEqualityexpressionEquality_expressionParserRuleCall_0_0()); 
	    }
		lv_equalityexpression_0_0=ruleEquality_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAND_expressionRule());
	        }
       		add(
       			$current, 
       			"equalityexpression",
        		lv_equalityexpression_0_0, 
        		"Equality_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAND_expressionAccess().getAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAND_expressionAccess().getEqualityexpressionEquality_expressionParserRuleCall_1_1_0()); 
	    }
		lv_equalityexpression_2_0=ruleEquality_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAND_expressionRule());
	        }
       		add(
       			$current, 
       			"equalityexpression",
        		lv_equalityexpression_2_0, 
        		"Equality_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEquality_expression
entryRuleEquality_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquality_expressionRule()); }
	 iv_ruleEquality_expression=ruleEquality_expression 
	 { $current=$iv_ruleEquality_expression.current; } 
	 EOF 
;

// Rule Equality_expression
ruleEquality_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEquality_expressionAccess().getInstanceofexpressionInstanceOf_expressionParserRuleCall_0_0()); 
	    }
		lv_instanceofexpression_0_0=ruleInstanceOf_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquality_expressionRule());
	        }
       		add(
       			$current, 
       			"instanceofexpression",
        		lv_instanceofexpression_0_0, 
        		"InstanceOf_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='==' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEquality_expressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
    }

    |	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEquality_expressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEquality_expressionAccess().getInstanceofexpressionInstanceOf_expressionParserRuleCall_1_1_0()); 
	    }
		lv_instanceofexpression_3_0=ruleInstanceOf_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquality_expressionRule());
	        }
       		add(
       			$current, 
       			"instanceofexpression",
        		lv_instanceofexpression_3_0, 
        		"InstanceOf_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOf_expression
entryRuleInstanceOf_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceOf_expressionRule()); }
	 iv_ruleInstanceOf_expression=ruleInstanceOf_expression 
	 { $current=$iv_ruleInstanceOf_expression.current; } 
	 EOF 
;

// Rule InstanceOf_expression
ruleInstanceOf_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstanceOf_expressionAccess().getRelational_expressionParserRuleCall_0()); 
    }
    this_Relational_expression_0=ruleRelational_expression
    { 
        $current = $this_Relational_expression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='instanceof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceOf_expressionAccess().getInstanceofKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOf_expressionAccess().getTypeTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOf_expressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelational_expression
entryRuleRelational_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelational_expressionRule()); }
	 iv_ruleRelational_expression=ruleRelational_expression 
	 { $current=$iv_ruleRelational_expression.current; } 
	 EOF 
;

// Rule Relational_expression
ruleRelational_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getShiftexpressionShift_expressionParserRuleCall_0_0()); 
	    }
		lv_shiftexpression_0_0=ruleShift_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"shiftexpression",
        		lv_shiftexpression_0_0, 
        		"Shift_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getRelationalopRelational_operatorParserRuleCall_1_0_0()); 
	    }
		lv_relationalop_1_0=ruleRelational_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"relationalop",
        		lv_relationalop_1_0, 
        		"Relational_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_expressionAccess().getShiftexpressionShift_expressionParserRuleCall_1_1_0()); 
	    }
		lv_shiftexpression_2_0=ruleShift_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_expressionRule());
	        }
       		add(
       			$current, 
       			"shiftexpression",
        		lv_shiftexpression_2_0, 
        		"Shift_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleShift_expression
entryRuleShift_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShift_expressionRule()); }
	 iv_ruleShift_expression=ruleShift_expression 
	 { $current=$iv_ruleShift_expression.current; } 
	 EOF 
;

// Rule Shift_expression
ruleShift_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getShift_expressionAccess().getAdditiveexpressionAdditive_expressionParserRuleCall_0_0()); 
	    }
		lv_additiveexpression_0_0=ruleAdditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShift_expressionRule());
	        }
       		add(
       			$current, 
       			"additiveexpression",
        		lv_additiveexpression_0_0, 
        		"Additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getShift_expressionAccess().getShiftopShift_operatorParserRuleCall_1_0_0()); 
	    }
		lv_shiftop_1_0=ruleShift_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShift_expressionRule());
	        }
       		add(
       			$current, 
       			"shiftop",
        		lv_shiftop_1_0, 
        		"Shift_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShift_expressionAccess().getAdditiveexpressionAdditive_expressionParserRuleCall_1_1_0()); 
	    }
		lv_additiveexpression_2_0=ruleAdditive_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShift_expressionRule());
	        }
       		add(
       			$current, 
       			"additiveexpression",
        		lv_additiveexpression_2_0, 
        		"Additive_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditive_expression
entryRuleAdditive_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditive_expressionRule()); }
	 iv_ruleAdditive_expression=ruleAdditive_expression 
	 { $current=$iv_ruleAdditive_expression.current; } 
	 EOF 
;

// Rule Additive_expression
ruleAdditive_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditive_expressionAccess().getMultiplicativeexpressionMultiplicative_expressionParserRuleCall_0_0()); 
	    }
		lv_multiplicativeexpression_0_0=ruleMultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditive_expressionRule());
	        }
       		add(
       			$current, 
       			"multiplicativeexpression",
        		lv_multiplicativeexpression_0_0, 
        		"Multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditive_expressionAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditive_expressionAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditive_expressionAccess().getMultiplicativeexpressionMultiplicative_expressionParserRuleCall_1_1_0()); 
	    }
		lv_multiplicativeexpression_3_0=ruleMultiplicative_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditive_expressionRule());
	        }
       		add(
       			$current, 
       			"multiplicativeexpression",
        		lv_multiplicativeexpression_3_0, 
        		"Multiplicative_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicative_expression
entryRuleMultiplicative_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicative_expressionRule()); }
	 iv_ruleMultiplicative_expression=ruleMultiplicative_expression 
	 { $current=$iv_ruleMultiplicative_expression.current; } 
	 EOF 
;

// Rule Multiplicative_expression
ruleMultiplicative_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getUnaryexpressionUnary_expressionParserRuleCall_0_0()); 
	    }
		lv_unaryexpression_0_0=ruleUnary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicative_expressionRule());
	        }
       		add(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_0_0, 
        		"Unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicative_expressionAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicative_expressionAccess().getSolidusKeyword_1_0_1());
    }

    |	otherlv_3='%' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicative_expressionAccess().getPercentSignKeyword_1_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getUnaryexpressionUnary_expressionParserRuleCall_1_1_0()); 
	    }
		lv_unaryexpression_4_0=ruleUnary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicative_expressionRule());
	        }
       		add(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_4_0, 
        		"Unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnary_expression
entryRuleUnary_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_expressionRule()); }
	 iv_ruleUnary_expression=ruleUnary_expression 
	 { $current=$iv_ruleUnary_expression.current; } 
	 EOF 
;

// Rule Unary_expression
ruleUnary_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnary_expressionAccess().getPlusSignKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_0_1()); 
    }
    this_Unary_expression_1=ruleUnary_expression
    { 
        $current = $this_Unary_expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnary_expressionAccess().getHyphenMinusKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_1_1()); 
    }
    this_Unary_expression_3=ruleUnary_expression
    { 
        $current = $this_Unary_expression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='++' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnary_expressionAccess().getPlusSignPlusSignKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_2_1()); 
    }
    this_Unary_expression_5=ruleUnary_expression
    { 
        $current = $this_Unary_expression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='--' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnary_expressionAccess().getHyphenMinusHyphenMinusKeyword_3_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_3_1()); 
    }
    this_Unary_expression_7=ruleUnary_expression
    { 
        $current = $this_Unary_expression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expression_Not_Plus_MinusParserRuleCall_4()); 
    }
    this_Unary_expression_Not_Plus_Minus_8=ruleUnary_expression_Not_Plus_Minus
    { 
        $current = $this_Unary_expression_Not_Plus_Minus_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnary_expression_Not_Plus_Minus
entryRuleUnary_expression_Not_Plus_Minus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_expression_Not_Plus_MinusRule()); }
	 iv_ruleUnary_expression_Not_Plus_Minus=ruleUnary_expression_Not_Plus_Minus 
	 { $current=$iv_ruleUnary_expression_Not_Plus_Minus.current; } 
	 EOF 
;

// Rule Unary_expression_Not_Plus_Minus
ruleUnary_expression_Not_Plus_Minus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getUnary_expression_Not_Plus_MinusAction_0(),
            $current);
    }
)((	otherlv_1='~' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getTildeKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getUnaryexpressionUnary_expressionParserRuleCall_1_0_1_0()); 
	    }
		lv_unaryexpression_2_0=ruleUnary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expression_Not_Plus_MinusRule());
	        }
       		set(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_2_0, 
        		"Unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_3='!' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getExclamationMarkKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getUnaryexpressionUnary_expressionParserRuleCall_1_1_1_0()); 
	    }
		lv_unaryexpression_4_0=ruleUnary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expression_Not_Plus_MinusRule());
	        }
       		set(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_4_0, 
        		"Unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getCastexpressionCast_expressionParserRuleCall_1_2_0()); 
	    }
		lv_castexpression_5_0=ruleCast_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expression_Not_Plus_MinusRule());
	        }
       		set(
       			$current, 
       			"castexpression",
        		lv_castexpression_5_0, 
        		"Cast_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getPrimaryPrimary_expressionParserRuleCall_1_3_0_0()); 
	    }
		lv_primary_6_0=rulePrimary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expression_Not_Plus_MinusRule());
	        }
       		set(
       			$current, 
       			"primary",
        		lv_primary_6_0, 
        		"Primary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getSelectorSelectorParserRuleCall_1_3_1_0()); 
	    }
		lv_selector_7_0=ruleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_expression_Not_Plus_MinusRule());
	        }
       		add(
       			$current, 
       			"selector",
        		lv_selector_7_0, 
        		"Selector");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_8='++' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getPlusSignPlusSignKeyword_1_3_2_0());
    }

    |	otherlv_9='--' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnary_expression_Not_Plus_MinusAccess().getHyphenMinusHyphenMinusKeyword_1_3_2_1());
    }
)?)))
;





// Entry rule entryRuleCast_expression
entryRuleCast_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCast_expressionRule()); }
	 iv_ruleCast_expression=ruleCast_expression 
	 { $current=$iv_ruleCast_expression.current; } 
	 EOF 
;

// Rule Cast_expression
ruleCast_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCast_expressionAccess().getCast_expressionAction_0_0(),
            $current);
    }
)(
(
		lv_lparent_1_0=RULE_LPAREN
		{
			newLeafNode(lv_lparent_1_0, grammarAccess.getCast_expressionAccess().getLparentLPARENTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCast_expressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparent",
        		lv_lparent_1_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCast_expressionAccess().getPrimitivetypePrimitive_typeParserRuleCall_0_2_0()); 
	    }
		lv_primitivetype_2_0=rulePrimitive_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_expressionRule());
	        }
       		set(
       			$current, 
       			"primitivetype",
        		lv_primitivetype_2_0, 
        		"Primitive_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_3_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_3_0, grammarAccess.getCast_expressionAccess().getRparentRPARENTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCast_expressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_3_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCast_expressionAccess().getUnaryexpressionUnary_expressionParserRuleCall_0_4_0()); 
	    }
		lv_unaryexpression_4_0=ruleUnary_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_expressionRule());
	        }
       		set(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_4_0, 
        		"Unary_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_lparent_5_0=RULE_LPAREN
		{
			newLeafNode(lv_lparent_5_0, grammarAccess.getCast_expressionAccess().getLparentLPARENTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCast_expressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparent",
        		lv_lparent_5_0, 
        		"LPAREN");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getCast_expressionAccess().getTypeTypeParserRuleCall_1_1_0_0()); 
	    }
		lv_type_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_expressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCast_expressionAccess().getExpressionExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_expressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		lv_rparent_8_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_8_0, grammarAccess.getCast_expressionAccess().getRparentRPARENTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCast_expressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_8_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCast_expressionAccess().getUnaryexpressionnotplusminusUnary_expression_Not_Plus_MinusParserRuleCall_1_3_0()); 
	    }
		lv_unaryexpressionnotplusminus_9_0=ruleUnary_expression_Not_Plus_Minus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_expressionRule());
	        }
       		set(
       			$current, 
       			"unaryexpressionnotplusminus",
        		lv_unaryexpressionnotplusminus_9_0, 
        		"Unary_expression_Not_Plus_Minus");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimary_expression
entryRulePrimary_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_expressionRule()); }
	 iv_rulePrimary_expression=rulePrimary_expression 
	 { $current=$iv_rulePrimary_expression.current; } 
	 EOF 
;

// Rule Primary_expression
rulePrimary_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimary_expressionAccess().getPrimary_expressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getParexpressionParens_expressionParserRuleCall_1_0_0()); 
	    }
		lv_parexpression_1_0=ruleParens_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"parexpression",
        		lv_parexpression_1_0, 
        		"Parens_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='this' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimary_expressionAccess().getThisKeyword_1_1_0());
    }
(	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimary_expressionAccess().getFullStopKeyword_1_1_1_0());
    }
(
(
		lv_identifier_4_0=RULE_ID
		{
			newLeafNode(lv_identifier_4_0, grammarAccess.getPrimary_expressionAccess().getIdentifierIDTerminalRuleCall_1_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_expressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_4_0, 
        		"ID");
	    }

)
))*((
(
ruleIdentifier_suffix
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getIdentifiersuffixIdentifier_suffixParserRuleCall_1_1_2_0()); 
	    }
		lv_identifiersuffix_5_0=ruleIdentifier_suffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"identifiersuffix",
        		lv_identifiersuffix_5_0, 
        		"Identifier_suffix");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(	otherlv_6='super' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimary_expressionAccess().getSuperKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getSupersuffixSuper_suffixParserRuleCall_1_2_1_0()); 
	    }
		lv_supersuffix_7_0=ruleSuper_suffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"supersuffix",
        		lv_supersuffix_7_0, 
        		"Super_suffix");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getLiteralLiteralParserRuleCall_1_3_0()); 
	    }
		lv_literal_8_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_8_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_9='new' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimary_expressionAccess().getNewKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getCreatorCreatorParserRuleCall_1_4_1_0()); 
	    }
		lv_creator_10_0=ruleCreator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"creator",
        		lv_creator_10_0, 
        		"Creator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_identifier_11_0=RULE_ID
		{
			newLeafNode(lv_identifier_11_0, grammarAccess.getPrimary_expressionAccess().getIdentifierIDTerminalRuleCall_1_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_expressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_11_0, 
        		"ID");
	    }

)
)(	otherlv_12='.' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimary_expressionAccess().getFullStopKeyword_1_5_1_0());
    }
(
(
		lv_identifier_13_0=RULE_ID
		{
			newLeafNode(lv_identifier_13_0, grammarAccess.getPrimary_expressionAccess().getIdentifierIDTerminalRuleCall_1_5_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_expressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_13_0, 
        		"ID");
	    }

)
))*((
(
ruleIdentifier_suffix
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getIdentifiersuffixIdentifier_suffixParserRuleCall_1_5_2_0()); 
	    }
		lv_identifiersuffix_14_0=ruleIdentifier_suffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"identifiersuffix",
        		lv_identifiersuffix_14_0, 
        		"Identifier_suffix");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimary_expressionAccess().getPrimitivetypePrimitive_typeParserRuleCall_1_6_0_0()); 
	    }
		lv_primitivetype_15_0=rulePrimitive_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimary_expressionRule());
	        }
       		set(
       			$current, 
       			"primitivetype",
        		lv_primitivetype_15_0, 
        		"Primitive_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16='[' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getPrimary_expressionAccess().getLeftSquareBracketKeyword_1_6_1_0());
    }
	otherlv_17=']' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPrimary_expressionAccess().getRightSquareBracketKeyword_1_6_1_1());
    }
)*	otherlv_18='.' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPrimary_expressionAccess().getFullStopKeyword_1_6_2());
    }
	otherlv_19='class' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPrimary_expressionAccess().getClassKeyword_1_6_3());
    }
)
    |(	otherlv_20='void' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPrimary_expressionAccess().getVoidKeyword_1_7_0());
    }
	otherlv_21='.' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPrimary_expressionAccess().getFullStopKeyword_1_7_1());
    }
	otherlv_22='class' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getPrimary_expressionAccess().getClassKeyword_1_7_2());
    }
)))
;





// Entry rule entryRuleIdentifier_suffix
entryRuleIdentifier_suffix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifier_suffixRule()); }
	 iv_ruleIdentifier_suffix=ruleIdentifier_suffix 
	 { $current=$iv_ruleIdentifier_suffix.current; } 
	 EOF 
;

// Rule Identifier_suffix
ruleIdentifier_suffix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentifier_suffixAccess().getIdentifier_suffixAction_0(),
            $current);
    }
)(((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdentifier_suffixAccess().getLeftSquareBracketKeyword_1_0_0_0());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIdentifier_suffixAccess().getRightSquareBracketKeyword_1_0_0_1());
    }
)+	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIdentifier_suffixAccess().getFullStopKeyword_1_0_1());
    }
	otherlv_4='class' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIdentifier_suffixAccess().getClassKeyword_1_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifier_suffixAccess().getArgumentsArgumentsParserRuleCall_1_1_0()); 
	    }
		lv_arguments_5_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifier_suffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIdentifier_suffixAccess().getFullStopKeyword_1_2_0());
    }
	otherlv_7='class' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIdentifier_suffixAccess().getClassKeyword_1_2_1());
    }
)
    |(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIdentifier_suffixAccess().getFullStopKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifier_suffixAccess().getExplicitgenericinvocationExplicit_generic_invocationParserRuleCall_1_3_1_0()); 
	    }
		lv_explicitgenericinvocation_9_0=ruleExplicit_generic_invocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifier_suffixRule());
	        }
       		set(
       			$current, 
       			"explicitgenericinvocation",
        		lv_explicitgenericinvocation_9_0, 
        		"Explicit_generic_invocation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIdentifier_suffixAccess().getFullStopKeyword_1_4_0());
    }
	otherlv_11='this' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIdentifier_suffixAccess().getThisKeyword_1_4_1());
    }
)
    |(	otherlv_12='.' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getIdentifier_suffixAccess().getFullStopKeyword_1_5_0());
    }
	otherlv_13='super' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getIdentifier_suffixAccess().getSuperKeyword_1_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifier_suffixAccess().getArgumentsArgumentsParserRuleCall_1_5_2_0()); 
	    }
		lv_arguments_14_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifier_suffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_14_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_15='.' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getIdentifier_suffixAccess().getFullStopKeyword_1_6_0());
    }
	otherlv_16='new' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getIdentifier_suffixAccess().getNewKeyword_1_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifier_suffixAccess().getInnercreatorInner_creatorParserRuleCall_1_6_2_0()); 
	    }
		lv_innercreator_17_0=ruleInner_creator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifier_suffixRule());
	        }
       		set(
       			$current, 
       			"innercreator",
        		lv_innercreator_17_0, 
        		"Inner_creator");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleCreator
entryRuleCreator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreatorRule()); }
	 iv_ruleCreator=ruleCreator 
	 { $current=$iv_ruleCreator.current; } 
	 EOF 
;

// Rule Creator
ruleCreator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCreatorAccess().getNon_wildcard_type_argumentsParserRuleCall_0_0()); 
    }
    this_Non_wildcard_type_arguments_0=ruleNon_wildcard_type_arguments
    { 
        $current = $this_Non_wildcard_type_arguments_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreatorAccess().getCreatednameCreated_nameParserRuleCall_0_1_0()); 
	    }
		lv_createdname_1_0=ruleCreated_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatorRule());
	        }
       		set(
       			$current, 
       			"createdname",
        		lv_createdname_1_0, 
        		"Created_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCreatorAccess().getClasscreatorrestClass_creator_restParserRuleCall_0_2_0()); 
	    }
		lv_classcreatorrest_2_0=ruleClass_creator_rest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatorRule());
	        }
       		set(
       			$current, 
       			"classcreatorrest",
        		lv_classcreatorrest_2_0, 
        		"Class_creator_rest");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCreatorAccess().getCreated_nameParserRuleCall_1_0()); 
    }
    this_Created_name_3=ruleCreated_name
    { 
        $current = $this_Created_name_3.current; 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCreatorAccess().getArraycreatorrestArray_creator_restParserRuleCall_1_1_0_0()); 
	    }
		lv_arraycreatorrest_4_0=ruleArray_creator_rest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatorRule());
	        }
       		set(
       			$current, 
       			"arraycreatorrest",
        		lv_arraycreatorrest_4_0, 
        		"Array_creator_rest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCreatorAccess().getClasscreatorrestClass_creator_restParserRuleCall_1_1_1_0()); 
	    }
		lv_classcreatorrest_5_0=ruleClass_creator_rest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatorRule());
	        }
       		set(
       			$current, 
       			"classcreatorrest",
        		lv_classcreatorrest_5_0, 
        		"Class_creator_rest");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleCreated_name
entryRuleCreated_name returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreated_nameRule()); }
	 iv_ruleCreated_name=ruleCreated_name 
	 { $current=$iv_ruleCreated_name.current; } 
	 EOF 
;

// Rule Created_name
ruleCreated_name returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCreated_nameAccess().getCreated_nameAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getCreated_nameAccess().getClassorinterfacetypeClass_declarationParserRuleCall_1_0_0()); 
	    }
		lv_classorinterfacetype_1_0=ruleClass_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreated_nameRule());
	        }
       		set(
       			$current, 
       			"classorinterfacetype",
        		lv_classorinterfacetype_1_0, 
        		"Class_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCreated_nameAccess().getPrimitivetypePrimitive_typeParserRuleCall_1_1_0()); 
	    }
		lv_primitivetype_2_0=rulePrimitive_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreated_nameRule());
	        }
       		set(
       			$current, 
       			"primitivetype",
        		lv_primitivetype_2_0, 
        		"Primitive_type");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleInner_creator
entryRuleInner_creator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInner_creatorRule()); }
	 iv_ruleInner_creator=ruleInner_creator 
	 { $current=$iv_ruleInner_creator.current; } 
	 EOF 
;

// Rule Inner_creator
ruleInner_creator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInner_creatorAccess().getNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0()); 
	    }
		lv_nonwildcardtypearguments_0_0=ruleNon_wildcard_type_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInner_creatorRule());
	        }
       		set(
       			$current, 
       			"nonwildcardtypearguments",
        		lv_nonwildcardtypearguments_0_0, 
        		"Non_wildcard_type_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getInner_creatorAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInner_creatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInner_creatorAccess().getClasscreatorrestClass_creator_restParserRuleCall_2_0()); 
	    }
		lv_classcreatorrest_2_0=ruleClass_creator_rest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInner_creatorRule());
	        }
       		set(
       			$current, 
       			"classcreatorrest",
        		lv_classcreatorrest_2_0, 
        		"Class_creator_rest");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArray_creator_rest
entryRuleArray_creator_rest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_creator_restRule()); }
	 iv_ruleArray_creator_rest=ruleArray_creator_rest 
	 { $current=$iv_ruleArray_creator_rest.current; } 
	 EOF 
;

// Rule Array_creator_rest
ruleArray_creator_rest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArray_creator_restAccess().getLeftSquareBracketKeyword_0());
    }
((	otherlv_1=']' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArray_creator_restAccess().getRightSquareBracketKeyword_1_0_0());
    }
(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArray_creator_restAccess().getLeftSquareBracketKeyword_1_0_1_0());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArray_creator_restAccess().getRightSquareBracketKeyword_1_0_1_1());
    }
)*
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArray_creator_restAccess().getArray_initializerParserRuleCall_1_0_2()); 
    }
    this_Array_initializer_4=ruleArray_initializer
    { 
        $current = $this_Array_initializer_4.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArray_creator_restAccess().getExpressionExpressionParserRuleCall_1_1_0_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_creator_restRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArray_creator_restAccess().getRightSquareBracketKeyword_1_1_1());
    }
(((	'[' 
)=>	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArray_creator_restAccess().getLeftSquareBracketKeyword_1_1_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArray_creator_restAccess().getExpressionExpressionParserRuleCall_1_1_2_1_0()); 
	    }
		lv_expression_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_creator_restRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getArray_creator_restAccess().getRightSquareBracketKeyword_1_1_2_2());
    }
)*(	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getArray_creator_restAccess().getLeftSquareBracketKeyword_1_1_3_0());
    }
	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getArray_creator_restAccess().getRightSquareBracketKeyword_1_1_3_1());
    }
)*)))
;





// Entry rule entryRuleClass_creator_rest
entryRuleClass_creator_rest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_creator_restRule()); }
	 iv_ruleClass_creator_rest=ruleClass_creator_rest 
	 { $current=$iv_ruleClass_creator_rest.current; } 
	 EOF 
;

// Rule Class_creator_rest
ruleClass_creator_rest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClass_creator_restAccess().getArgumentsArgumentsParserRuleCall_0_0()); 
	    }
		lv_arguments_0_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_creator_restRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_0_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_creator_restAccess().getClassbodyClass_declarationParserRuleCall_1_0()); 
	    }
		lv_classbody_1_0=ruleClass_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_creator_restRule());
	        }
       		set(
       			$current, 
       			"classbody",
        		lv_classbody_1_0, 
        		"Class_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleExplicit_generic_invocation
entryRuleExplicit_generic_invocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicit_generic_invocationRule()); }
	 iv_ruleExplicit_generic_invocation=ruleExplicit_generic_invocation 
	 { $current=$iv_ruleExplicit_generic_invocation.current; } 
	 EOF 
;

// Rule Explicit_generic_invocation
ruleExplicit_generic_invocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExplicit_generic_invocationAccess().getNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0()); 
	    }
		lv_nonwildcardtypearguments_0_0=ruleNon_wildcard_type_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicit_generic_invocationRule());
	        }
       		set(
       			$current, 
       			"nonwildcardtypearguments",
        		lv_nonwildcardtypearguments_0_0, 
        		"Non_wildcard_type_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getExplicit_generic_invocationAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExplicit_generic_invocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicit_generic_invocationAccess().getArgumentsArgumentsParserRuleCall_2_0()); 
	    }
		lv_arguments_2_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicit_generic_invocationRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNon_wildcard_type_arguments
entryRuleNon_wildcard_type_arguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNon_wildcard_type_argumentsRule()); }
	 iv_ruleNon_wildcard_type_arguments=ruleNon_wildcard_type_arguments 
	 { $current=$iv_ruleNon_wildcard_type_arguments.current; } 
	 EOF 
;

// Rule Non_wildcard_type_arguments
ruleNon_wildcard_type_arguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNon_wildcard_type_argumentsAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNon_wildcard_type_argumentsAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNon_wildcard_type_argumentsRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNon_wildcard_type_argumentsAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	 iv_ruleSelector=ruleSelector 
	 { $current=$iv_ruleSelector.current; } 
	 EOF 
;

// Rule Selector
ruleSelector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSelectorAccess().getSelectorAction_0(),
            $current);
    }
)((	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectorAccess().getFullStopKeyword_1_0_0());
    }
	otherlv_2='super' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectorAccess().getSuperKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSupersuffixSuper_suffixParserRuleCall_1_0_2_0()); 
	    }
		lv_supersuffix_3_0=ruleSuper_suffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"supersuffix",
        		lv_supersuffix_3_0, 
        		"Super_suffix");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectorAccess().getFullStopKeyword_1_1_0());
    }
	otherlv_5='new' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectorAccess().getNewKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getInnercreatorInner_creatorParserRuleCall_1_1_2_0()); 
	    }
		lv_innercreator_6_0=ruleInner_creator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"innercreator",
        		lv_innercreator_6_0, 
        		"Inner_creator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getExpressionExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_expression_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_1_2_2());
    }
)))
;





// Entry rule entryRuleSuper_suffix
entryRuleSuper_suffix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuper_suffixRule()); }
	 iv_ruleSuper_suffix=ruleSuper_suffix 
	 { $current=$iv_ruleSuper_suffix.current; } 
	 EOF 
;

// Rule Super_suffix
ruleSuper_suffix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSuper_suffixAccess().getSuper_suffixAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSuper_suffixAccess().getArgumentsArgumentsParserRuleCall_1_0_0()); 
	    }
		lv_arguments_1_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuper_suffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_1_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuper_suffixAccess().getFullStopKeyword_1_1_0());
    }
(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getSuper_suffixAccess().getIdentifierIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuper_suffixRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSuper_suffixAccess().getArgumentsArgumentsParserRuleCall_1_1_2_0()); 
	    }
		lv_arguments_4_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuper_suffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
            $current);
    }
)(
(
		lv_lparent_1_0=RULE_LPAREN
		{
			newLeafNode(lv_lparent_1_0, grammarAccess.getArgumentsAccess().getLparentLPARENTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparent",
        		lv_lparent_1_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionlistExpression_listParserRuleCall_2_0()); 
	    }
		lv_expressionlist_2_0=ruleExpression_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		set(
       			$current, 
       			"expressionlist",
        		lv_expressionlist_2_0, 
        		"Expression_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_rparent_3_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_3_0, grammarAccess.getArgumentsAccess().getRparentRPARENTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_3_0, 
        		"RPAREN");
	    }

)
))
;





// Entry rule entryRuleSwitch_statement
entryRuleSwitch_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitch_statementRule()); }
	 iv_ruleSwitch_statement=ruleSwitch_statement 
	 { $current=$iv_ruleSwitch_statement.current; } 
	 EOF 
;

// Rule Switch_statement
ruleSwitch_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitch_statementAccess().getSwitch_statementAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitch_statementAccess().getSwitchKeyword_1());
    }
(
(
		lv_lParen_2_0=RULE_LPAREN
		{
			newLeafNode(lv_lParen_2_0, grammarAccess.getSwitch_statementAccess().getLParenLPARENTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwitch_statementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lParen",
        		lv_lParen_2_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_statementAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_statementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_4_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_4_0, grammarAccess.getSwitch_statementAccess().getRparentRPARENTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwitch_statementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_4_0, 
        		"RPAREN");
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitch_statementAccess().getLeftCurlyBracketKeyword_5());
    }
((	otherlv_6='case' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitch_statementAccess().getCaseKeyword_6_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_statementAccess().getExpression2ExpressionParserRuleCall_6_0_1_0()); 
	    }
		lv_expression2_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_statementRule());
	        }
       		add(
       			$current, 
       			"expression2",
        		lv_expression2_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSwitch_statementAccess().getColonKeyword_6_0_2());
    }
)
    |(	otherlv_9='default' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSwitch_statementAccess().getDefaultKeyword_6_1_0());
    }
	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSwitch_statementAccess().getColonKeyword_6_1_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_statementAccess().getSwitchStatementsStatementParserRuleCall_6_2_0()); 
	    }
		lv_switchStatements_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_statementRule());
	        }
       		add(
       			$current, 
       			"switchStatements",
        		lv_switchStatements_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSwitch_statementAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleWhile_Statement
entryRuleWhile_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_StatementRule()); }
	 iv_ruleWhile_Statement=ruleWhile_Statement 
	 { $current=$iv_ruleWhile_Statement.current; } 
	 EOF 
;

// Rule While_Statement
ruleWhile_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhile_StatementAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_StatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_StatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_2_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_2_0, grammarAccess.getWhile_StatementAccess().getRparentRPARENTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWhile_StatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_2_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_StatementAccess().getWhileStatementStatementParserRuleCall_3_0()); 
	    }
		lv_whileStatement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_StatementRule());
	        }
       		set(
       			$current, 
       			"whileStatement",
        		lv_whileStatement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDo_Statement
entryRuleDo_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDo_StatementRule()); }
	 iv_ruleDo_Statement=ruleDo_Statement 
	 { $current=$iv_ruleDo_Statement.current; } 
	 EOF 
;

// Rule Do_Statement
ruleDo_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDo_StatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDo_StatementAccess().getDoStatementStatementParserRuleCall_1_0()); 
	    }
		lv_doStatement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDo_StatementRule());
	        }
       		set(
       			$current, 
       			"doStatement",
        		lv_doStatement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDo_StatementAccess().getWhileKeyword_2());
    }
(
(
		lv_lparent_3_0=RULE_LPAREN
		{
			newLeafNode(lv_lparent_3_0, grammarAccess.getDo_StatementAccess().getLparentLPARENTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDo_StatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparent",
        		lv_lparent_3_0, 
        		"LPAREN");
	    }

)
)(
(
		lv_rparent_4_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_4_0, grammarAccess.getDo_StatementAccess().getRparentRPARENTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDo_StatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_4_0, 
        		"RPAREN");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDo_StatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleIf_statement
entryRuleIf_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_statementRule()); }
	 iv_ruleIf_statement=ruleIf_statement 
	 { $current=$iv_ruleIf_statement.current; } 
	 EOF 
;

// Rule If_statement
ruleIf_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIf_statementAccess().getIfKeyword_0());
    }
(
(
		lv_lparen_1_0=RULE_LPAREN
		{
			newLeafNode(lv_lparen_1_0, grammarAccess.getIf_statementAccess().getLparenLPARENTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIf_statementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lparen",
        		lv_lparen_1_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_3_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_3_0, grammarAccess.getIf_statementAccess().getRparentRPARENTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIf_statementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_3_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getIdStatementStatementParserRuleCall_4_0()); 
	    }
		lv_idStatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		set(
       			$current, 
       			"idStatement",
        		lv_idStatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIf_statementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getElseStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTry_statement
entryRuleTry_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTry_statementRule()); }
	 iv_ruleTry_statement=ruleTry_statement 
	 { $current=$iv_ruleTry_statement.current; } 
	 EOF 
;

// Rule Try_statement
ruleTry_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTry_statementAccess().getTryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getTryStatementStatementParserRuleCall_1_0()); 
	    }
		lv_tryStatement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		set(
       			$current, 
       			"tryStatement",
        		lv_tryStatement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'catch' 
)=>	otherlv_2='catch' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTry_statementAccess().getCatchKeyword_2_0());
    }
)(
(
		lv_lParen_3_0=RULE_LPAREN
		{
			newLeafNode(lv_lParen_3_0, grammarAccess.getTry_statementAccess().getLParenLPARENTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTry_statementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"lParen",
        		lv_lParen_3_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getParametersParameterParserRuleCall_2_2_0()); 
	    }
		lv_parameters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_rparent_5_0=RULE_RPAREN
		{
			newLeafNode(lv_rparent_5_0, grammarAccess.getTry_statementAccess().getRparentRPARENTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTry_statementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"rparent",
        		lv_rparent_5_0, 
        		"RPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getCatchStatementStatementParserRuleCall_2_4_0()); 
	    }
		lv_catchStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		add(
       			$current, 
       			"catchStatement",
        		lv_catchStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((	'finally' 
)=>	otherlv_7='finally' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTry_statementAccess().getFinallyKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getFinallyStatementStatementParserRuleCall_3_1_0()); 
	    }
		lv_finallyStatement_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		set(
       			$current, 
       			"finallyStatement",
        		lv_finallyStatement_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleImport_statement
entryRuleImport_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_statementRule()); }
	 iv_ruleImport_statement=ruleImport_statement 
	 { $current=$iv_ruleImport_statement.current; } 
	 EOF 
;

// Rule Import_statement
ruleImport_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImport_statementAccess().getImportKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_statementAccess().getClassNameClass_nameParserRuleCall_1_0_0_0()); 
	    }
		lv_className_1_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_statementRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_1_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImport_statementAccess().getSemicolonKeyword_1_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_statementAccess().getPacNamePackage_nameParserRuleCall_1_1_0_0()); 
	    }
		lv_pacName_3_0=rulePackage_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_statementRule());
	        }
       		set(
       			$current, 
       			"pacName",
        		lv_pacName_3_0, 
        		"Package_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.*;' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImport_statementAccess().getFullStopAsteriskSemicolonKeyword_1_1_1());
    }
)))
;





// Entry rule entryRuleClass_name
entryRuleClass_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_nameRule()); } 
	 iv_ruleClass_name=ruleClass_name 
	 { $current=$iv_ruleClass_name.current.getText(); }  
	 EOF 
;

// Rule Class_name
ruleClass_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClass_nameAccess().getPackage_nameParserRuleCall()); 
    }
    this_Package_name_0=rulePackage_name    {
		$current.merge(this_Package_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleInterface_name
entryRuleInterface_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_nameRule()); } 
	 iv_ruleInterface_name=ruleInterface_name 
	 { $current=$iv_ruleInterface_name.current.getText(); }  
	 EOF 
;

// Rule Interface_name
ruleInterface_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInterface_nameAccess().getPackage_nameParserRuleCall()); 
    }
    this_Package_name_0=rulePackage_name    {
		$current.merge(this_Package_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulePackage_statement
entryRulePackage_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_statementRule()); }
	 iv_rulePackage_statement=rulePackage_statement 
	 { $current=$iv_rulePackage_statement.current; } 
	 EOF 
;

// Rule Package_statement
rulePackage_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackage_statementAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackage_statementAccess().getPacNamePackage_nameParserRuleCall_1_0()); 
	    }
		lv_pacName_1_0=rulePackage_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackage_statementRule());
	        }
       		set(
       			$current, 
       			"pacName",
        		lv_pacName_1_0, 
        		"Package_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackage_statementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePackage_name
entryRulePackage_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_nameRule()); } 
	 iv_rulePackage_name=rulePackage_name 
	 { $current=$iv_rulePackage_name.current.getText(); }  
	 EOF 
;

// Rule Package_name
rulePackage_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPackage_nameAccess().getIDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackage_nameAccess().getPackage_name_lineParserRuleCall_1()); 
    }
    this_Package_name_line_1=rulePackage_name_line    {
		$current.merge(this_Package_name_line_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePackage_name_line
entryRulePackage_name_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_name_lineRule()); } 
	 iv_rulePackage_name_line=rulePackage_name_line 
	 { $current=$iv_rulePackage_name_line.current.getText(); }  
	 EOF 
;

// Rule Package_name_line
rulePackage_name_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackage_name_lineAccess().getFullStopKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getPackage_name_lineAccess().getIDTerminalRuleCall_1()); 
    }
)*
    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getInteger_literalParserRuleCall_0()); 
    }
    this_Integer_literal_0=ruleInteger_literal    {
		$current.merge(this_Integer_literal_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_FLOATING_POINT_LITERAL_1=RULE_FLOATING_POINT_LITERAL    {
		$current.merge(this_FLOATING_POINT_LITERAL_1);
    }

    { 
    newLeafNode(this_FLOATING_POINT_LITERAL_1, grammarAccess.getLiteralAccess().getFLOATING_POINT_LITERALTerminalRuleCall_1()); 
    }

    |    this_CHARACTER_LITERAL_2=RULE_CHARACTER_LITERAL    {
		$current.merge(this_CHARACTER_LITERAL_2);
    }

    { 
    newLeafNode(this_CHARACTER_LITERAL_2, grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_2()); 
    }

    |    this_STRING_LITERAL_3=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_3);
    }

    { 
    newLeafNode(this_STRING_LITERAL_3, grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBoolean_literalParserRuleCall_4()); 
    }
    this_Boolean_literal_4=ruleBoolean_literal    {
		$current.merge(this_Boolean_literal_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNullKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleInteger_literal
entryRuleInteger_literal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteger_literalRule()); } 
	 iv_ruleInteger_literal=ruleInteger_literal 
	 { $current=$iv_ruleInteger_literal.current.getText(); }  
	 EOF 
;

// Rule Integer_literal
ruleInteger_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    newLeafNode(this_HEX_LITERAL_0, grammarAccess.getInteger_literalAccess().getHEX_LITERALTerminalRuleCall_0()); 
    }

    |    this_OCTAL_LITERAL_1=RULE_OCTAL_LITERAL    {
		$current.merge(this_OCTAL_LITERAL_1);
    }

    { 
    newLeafNode(this_OCTAL_LITERAL_1, grammarAccess.getInteger_literalAccess().getOCTAL_LITERALTerminalRuleCall_1()); 
    }

    |    this_DECIMAL_LITERAL_2=RULE_DECIMAL_LITERAL    {
		$current.merge(this_DECIMAL_LITERAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_LITERAL_2, grammarAccess.getInteger_literalAccess().getDECIMAL_LITERALTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBoolean_literal
entryRuleBoolean_literal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolean_literalRule()); } 
	 iv_ruleBoolean_literal=ruleBoolean_literal 
	 { $current=$iv_ruleBoolean_literal.current.getText(); }  
	 EOF 
;

// Rule Boolean_literal
ruleBoolean_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolean_literalAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolean_literalAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleRelational_operator
entryRuleRelational_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelational_operatorRule()); } 
	 iv_ruleRelational_operator=ruleRelational_operator 
	 { $current=$iv_ruleRelational_operator.current.getText(); }  
	 EOF 
;

// Rule Relational_operator
ruleRelational_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getGreaterThanSignKeyword_1()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getGreaterThanSignKeyword_2_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getEqualsSignKeyword_2_1()); 
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getLessThanSignKeyword_3_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getEqualsSignKeyword_3_1()); 
    }
))
    ;





// Entry rule entryRuleAssignment_operator
entryRuleAssignment_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_operatorRule()); } 
	 iv_ruleAssignment_operator=ruleAssignment_operator 
	 { $current=$iv_ruleAssignment_operator.current.getText(); }  
	 EOF 
;

// Rule Assignment_operator
ruleAssignment_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getPlusSignEqualsSignKeyword_1()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getHyphenMinusEqualsSignKeyword_2()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getAsteriskEqualsSignKeyword_3()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getSolidusEqualsSignKeyword_4()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getAmpersandEqualsSignKeyword_5()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getVerticalLineEqualsSignKeyword_6()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getCircumflexAccentEqualsSignKeyword_7()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getPercentSignEqualsSignKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleShift_operator
entryRuleShift_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getShift_operatorRule()); } 
	 iv_ruleShift_operator=ruleShift_operator 
	 { $current=$iv_ruleShift_operator.current.getText(); }  
	 EOF 
;

// Rule Shift_operator
ruleShift_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getLessThanSignKeyword_0_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getLessThanSignKeyword_0_1()); 
    }
)
    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getGreaterThanSignKeyword_1_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getGreaterThanSignKeyword_1_1()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getGreaterThanSignKeyword_1_2()); 
    }
)
    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getGreaterThanSignKeyword_2_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_operatorAccess().getGreaterThanSignKeyword_2_1()); 
    }
))
    ;





RULE_STATIC : 'static';

RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : ('l'|'L');

RULE_FLOATING_POINT_LITERAL : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|'.' ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

RULE_CHARACTER_LITERAL : '\'' (RULE_ESCAPE_SEQUENCE|~(('\''|'\\'))) '\'';

RULE_STRING_LITERAL : '"' (RULE_ESCAPE_SEQUENCE|~(('\\'|'"')))* '"';

fragment RULE_ESCAPE_SEQUENCE : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|RULE_UNICODE_ESCAPE|RULE_OCTAL_ESCAPE);

fragment RULE_OCTAL_ESCAPE : ('\\' '0'..'3' '0'..'7' '0'..'7'|'\\' '0'..'7' '0'..'7'|'\\' '0'..'7');

fragment RULE_UNICODE_ESCAPE : '\\' 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

RULE_RPAREN : ')';

RULE_LPAREN : '(';

RULE_MOD : ('public'|'private'|'protected'|'final'|'native'|'synchronized'|'abstract'|'threadsafe'|'transient');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$'|'\u00C0'..'\uFFFF')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n');

RULE_DOC_COMMENT : '/**';


