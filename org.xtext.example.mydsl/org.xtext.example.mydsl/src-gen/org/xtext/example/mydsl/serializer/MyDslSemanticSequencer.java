/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.AND_expression;
import org.xtext.example.mydsl.myDsl.Additive_expression;
import org.xtext.example.mydsl.myDsl.Arguments;
import org.xtext.example.mydsl.myDsl.Array_creator_rest;
import org.xtext.example.mydsl.myDsl.Array_initializer;
import org.xtext.example.mydsl.myDsl.Cast_expression;
import org.xtext.example.mydsl.myDsl.Class_creator_rest;
import org.xtext.example.mydsl.myDsl.Class_declaration;
import org.xtext.example.mydsl.myDsl.Compilation_unit;
import org.xtext.example.mydsl.myDsl.Conditional_AND_expression;
import org.xtext.example.mydsl.myDsl.Conditional_OR_expression;
import org.xtext.example.mydsl.myDsl.Conditional_expression;
import org.xtext.example.mydsl.myDsl.Constructor_declaration;
import org.xtext.example.mydsl.myDsl.Created_name;
import org.xtext.example.mydsl.myDsl.Do_Statement;
import org.xtext.example.mydsl.myDsl.Equality_expression;
import org.xtext.example.mydsl.myDsl.Exclusive_OR_expression;
import org.xtext.example.mydsl.myDsl.Explicit_generic_invocation;
import org.xtext.example.mydsl.myDsl.Expression_list;
import org.xtext.example.mydsl.myDsl.Field_declaration;
import org.xtext.example.mydsl.myDsl.For_Statement;
import org.xtext.example.mydsl.myDsl.For_control;
import org.xtext.example.mydsl.myDsl.For_expression;
import org.xtext.example.mydsl.myDsl.For_expression_operator;
import org.xtext.example.mydsl.myDsl.For_init;
import org.xtext.example.mydsl.myDsl.For_update;
import org.xtext.example.mydsl.myDsl.For_update_operator;
import org.xtext.example.mydsl.myDsl.Identifier_suffix;
import org.xtext.example.mydsl.myDsl.If_statement;
import org.xtext.example.mydsl.myDsl.Import_statement;
import org.xtext.example.mydsl.myDsl.Inclusive_OR_expression;
import org.xtext.example.mydsl.myDsl.Inner_creator;
import org.xtext.example.mydsl.myDsl.Interface_declaration;
import org.xtext.example.mydsl.myDsl.Method_declaration;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.Multiplicative_expression;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Non_wildcard_type_arguments;
import org.xtext.example.mydsl.myDsl.Package_statement;
import org.xtext.example.mydsl.myDsl.Parameter;
import org.xtext.example.mydsl.myDsl.Parameter_list;
import org.xtext.example.mydsl.myDsl.Parens_expression;
import org.xtext.example.mydsl.myDsl.Primary_expression;
import org.xtext.example.mydsl.myDsl.Primitive_type;
import org.xtext.example.mydsl.myDsl.Relational_expression;
import org.xtext.example.mydsl.myDsl.Selector;
import org.xtext.example.mydsl.myDsl.Shift_expression;
import org.xtext.example.mydsl.myDsl.Statement;
import org.xtext.example.mydsl.myDsl.Statement_block;
import org.xtext.example.mydsl.myDsl.Static_initializer;
import org.xtext.example.mydsl.myDsl.Super_suffix;
import org.xtext.example.mydsl.myDsl.Switch_statement;
import org.xtext.example.mydsl.myDsl.Try_statement;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.myDsl.Type_declaration;
import org.xtext.example.mydsl.myDsl.Unary_expression_Not_Plus_Minus;
import org.xtext.example.mydsl.myDsl.Variable;
import org.xtext.example.mydsl.myDsl.Variable_declaration;
import org.xtext.example.mydsl.myDsl.Variable_declarator;
import org.xtext.example.mydsl.myDsl.Variable_value;
import org.xtext.example.mydsl.myDsl.While_Statement;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.AND_EXPRESSION:
				sequence_AND_expression(context, (AND_expression) semanticObject); 
				return; 
			case MyDslPackage.ADDITIVE_EXPRESSION:
				sequence_Additive_expression(context, (Additive_expression) semanticObject); 
				return; 
			case MyDslPackage.ARGUMENTS:
				sequence_Arguments(context, (Arguments) semanticObject); 
				return; 
			case MyDslPackage.ARRAY_CREATOR_REST:
				sequence_Array_creator_rest(context, (Array_creator_rest) semanticObject); 
				return; 
			case MyDslPackage.ARRAY_INITIALIZER:
				sequence_Array_initializer(context, (Array_initializer) semanticObject); 
				return; 
			case MyDslPackage.CAST_EXPRESSION:
				sequence_Cast_expression(context, (Cast_expression) semanticObject); 
				return; 
			case MyDslPackage.CLASS_CREATOR_REST:
				sequence_Class_creator_rest(context, (Class_creator_rest) semanticObject); 
				return; 
			case MyDslPackage.CLASS_DECLARATION:
				sequence_Class_declaration(context, (Class_declaration) semanticObject); 
				return; 
			case MyDslPackage.COMPILATION_UNIT:
				sequence_Compilation_unit(context, (Compilation_unit) semanticObject); 
				return; 
			case MyDslPackage.CONDITIONAL_AND_EXPRESSION:
				sequence_Conditional_AND_expression(context, (Conditional_AND_expression) semanticObject); 
				return; 
			case MyDslPackage.CONDITIONAL_OR_EXPRESSION:
				sequence_Conditional_OR_expression(context, (Conditional_OR_expression) semanticObject); 
				return; 
			case MyDslPackage.CONDITIONAL_EXPRESSION:
				if(context == grammarAccess.getConditional_expressionRule()) {
					sequence_Conditional_expression(context, (Conditional_expression) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getExpressionRule() ||
				   context == grammarAccess.getVariable_initializerRule()) {
					sequence_Conditional_expression_Expression(context, (Conditional_expression) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.CONSTRUCTOR_DECLARATION:
				sequence_Constructor_declaration(context, (Constructor_declaration) semanticObject); 
				return; 
			case MyDslPackage.CREATED_NAME:
				if(context == grammarAccess.getCreated_nameRule()) {
					sequence_Created_name(context, (Created_name) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getCreatorRule()) {
					sequence_Created_name_Creator(context, (Created_name) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.DO_STATEMENT:
				sequence_Do_Statement(context, (Do_Statement) semanticObject); 
				return; 
			case MyDslPackage.EQUALITY_EXPRESSION:
				sequence_Equality_expression(context, (Equality_expression) semanticObject); 
				return; 
			case MyDslPackage.EXCLUSIVE_OR_EXPRESSION:
				sequence_Exclusive_OR_expression(context, (Exclusive_OR_expression) semanticObject); 
				return; 
			case MyDslPackage.EXPLICIT_GENERIC_INVOCATION:
				sequence_Explicit_generic_invocation(context, (Explicit_generic_invocation) semanticObject); 
				return; 
			case MyDslPackage.EXPRESSION_LIST:
				sequence_Expression_list(context, (Expression_list) semanticObject); 
				return; 
			case MyDslPackage.FIELD_DECLARATION:
				sequence_Field_declaration(context, (Field_declaration) semanticObject); 
				return; 
			case MyDslPackage.FOR_STATEMENT:
				sequence_For_Statement(context, (For_Statement) semanticObject); 
				return; 
			case MyDslPackage.FOR_CONTROL:
				sequence_For_control(context, (For_control) semanticObject); 
				return; 
			case MyDslPackage.FOR_EXPRESSION:
				sequence_For_expression(context, (For_expression) semanticObject); 
				return; 
			case MyDslPackage.FOR_EXPRESSION_OPERATOR:
				sequence_For_expression_operator(context, (For_expression_operator) semanticObject); 
				return; 
			case MyDslPackage.FOR_INIT:
				sequence_For_init(context, (For_init) semanticObject); 
				return; 
			case MyDslPackage.FOR_UPDATE:
				sequence_For_update(context, (For_update) semanticObject); 
				return; 
			case MyDslPackage.FOR_UPDATE_OPERATOR:
				sequence_For_update_operator(context, (For_update_operator) semanticObject); 
				return; 
			case MyDslPackage.IDENTIFIER_SUFFIX:
				sequence_Identifier_suffix(context, (Identifier_suffix) semanticObject); 
				return; 
			case MyDslPackage.IF_STATEMENT:
				sequence_If_statement(context, (If_statement) semanticObject); 
				return; 
			case MyDslPackage.IMPORT_STATEMENT:
				sequence_Import_statement(context, (Import_statement) semanticObject); 
				return; 
			case MyDslPackage.INCLUSIVE_OR_EXPRESSION:
				sequence_Inclusive_OR_expression(context, (Inclusive_OR_expression) semanticObject); 
				return; 
			case MyDslPackage.INNER_CREATOR:
				sequence_Inner_creator(context, (Inner_creator) semanticObject); 
				return; 
			case MyDslPackage.INTERFACE_DECLARATION:
				sequence_Interface_declaration(context, (Interface_declaration) semanticObject); 
				return; 
			case MyDslPackage.METHOD_DECLARATION:
				sequence_Method_declaration(context, (Method_declaration) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.MULTIPLICATIVE_EXPRESSION:
				sequence_Multiplicative_expression(context, (Multiplicative_expression) semanticObject); 
				return; 
			case MyDslPackage.NON_WILDCARD_TYPE_ARGUMENTS:
				if(context == grammarAccess.getCreatorRule()) {
					sequence_Creator_Non_wildcard_type_arguments(context, (Non_wildcard_type_arguments) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNon_wildcard_type_argumentsRule()) {
					sequence_Non_wildcard_type_arguments(context, (Non_wildcard_type_arguments) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.PACKAGE_STATEMENT:
				sequence_Package_statement(context, (Package_statement) semanticObject); 
				return; 
			case MyDslPackage.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case MyDslPackage.PARAMETER_LIST:
				sequence_Parameter_list(context, (Parameter_list) semanticObject); 
				return; 
			case MyDslPackage.PARENS_EXPRESSION:
				sequence_Parens_expression(context, (Parens_expression) semanticObject); 
				return; 
			case MyDslPackage.PRIMARY_EXPRESSION:
				sequence_Primary_expression(context, (Primary_expression) semanticObject); 
				return; 
			case MyDslPackage.PRIMITIVE_TYPE:
				sequence_Primitive_type(context, (Primitive_type) semanticObject); 
				return; 
			case MyDslPackage.RELATIONAL_EXPRESSION:
				if(context == grammarAccess.getInstanceOf_expressionRule()) {
					sequence_InstanceOf_expression_Relational_expression(context, (Relational_expression) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRelational_expressionRule()) {
					sequence_Relational_expression(context, (Relational_expression) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case MyDslPackage.SHIFT_EXPRESSION:
				sequence_Shift_expression(context, (Shift_expression) semanticObject); 
				return; 
			case MyDslPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case MyDslPackage.STATEMENT_BLOCK:
				sequence_Statement_block(context, (Statement_block) semanticObject); 
				return; 
			case MyDslPackage.STATIC_INITIALIZER:
				sequence_Static_initializer(context, (Static_initializer) semanticObject); 
				return; 
			case MyDslPackage.SUPER_SUFFIX:
				sequence_Super_suffix(context, (Super_suffix) semanticObject); 
				return; 
			case MyDslPackage.SWITCH_STATEMENT:
				sequence_Switch_statement(context, (Switch_statement) semanticObject); 
				return; 
			case MyDslPackage.TRY_STATEMENT:
				sequence_Try_statement(context, (Try_statement) semanticObject); 
				return; 
			case MyDslPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case MyDslPackage.TYPE_DECLARATION:
				sequence_Type_declaration(context, (Type_declaration) semanticObject); 
				return; 
			case MyDslPackage.UNARY_EXPRESSION_NOT_PLUS_MINUS:
				sequence_Unary_expression_Not_Plus_Minus(context, (Unary_expression_Not_Plus_Minus) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_DECLARATION:
				sequence_Variable_declaration(context, (Variable_declaration) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_DECLARATOR:
				sequence_Variable_declarator(context, (Variable_declarator) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_VALUE:
				sequence_Variable_value(context, (Variable_value) semanticObject); 
				return; 
			case MyDslPackage.WHILE_STATEMENT:
				sequence_While_Statement(context, (While_Statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (equalityexpression+=Equality_expression equalityexpression+=Equality_expression*)
	 */
	protected void sequence_AND_expression(EObject context, AND_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (multiplicativeexpression+=Multiplicative_expression multiplicativeexpression+=Multiplicative_expression*)
	 */
	protected void sequence_Additive_expression(EObject context, Additive_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lparent=LPAREN expressionlist=Expression_list? rparent=RPAREN)
	 */
	protected void sequence_Arguments(EObject context, Arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expression+=Expression expression+=Expression*)
	 */
	protected void sequence_Array_creator_rest(EObject context, Array_creator_rest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((variableinitializer+=Variable_initializer variableinitializer+=Variable_initializer*)?)
	 */
	protected void sequence_Array_initializer(EObject context, Array_initializer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lparent=LPAREN primitivetype=Primitive_type rparent=RPAREN unaryexpression=Unary_expression)
	 */
	protected void sequence_Cast_expression(EObject context, Cast_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (arguments=Arguments classbody=Class_declaration?)
	 */
	protected void sequence_Class_creator_rest(EObject context, Class_creator_rest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiers+=Modifier* 
	 *         className=ID 
	 *         classHerdada=Class_name? 
	 *         (interfaceImplementada=Interface_name interfacesImplementadas+=Interface_name*)? 
	 *         fieldsDeclaration+=Field_declaration*
	 *     )
	 */
	protected void sequence_Class_declaration(EObject context, Class_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*)
	 */
	protected void sequence_Compilation_unit(EObject context, Compilation_unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (inclusiveorexpression+=Inclusive_OR_expression inclusiveorexpression+=Inclusive_OR_expression*)
	 */
	protected void sequence_Conditional_AND_expression(EObject context, Conditional_AND_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (conditionalandexpression+=Conditional_AND_expression conditionalandexpression+=Conditional_AND_expression*)
	 */
	protected void sequence_Conditional_OR_expression(EObject context, Conditional_OR_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (conditionalorexpression=Conditional_OR_expression (expression1=Expression expression2=Expression)?)
	 */
	protected void sequence_Conditional_expression(EObject context, Conditional_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         conditionalorexpression=Conditional_OR_expression 
	 *         (expression1=Expression expression2=Expression)? 
	 *         (assignmentoperator=Assignment_operator expression=Expression)?
	 *     )
	 */
	protected void sequence_Conditional_expression_Expression(EObject context, Conditional_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiersConstructor+=Modifier* 
	 *         nameConstructor=ID 
	 *         lParen=LPAREN 
	 *         parameterListConstructor=Parameter_list? 
	 *         rparent=RPAREN 
	 *         statementConstructor=Statement_block
	 *     )
	 */
	protected void sequence_Constructor_declaration(EObject context, Constructor_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (classorinterfacetype=Class_declaration | primitivetype=Primitive_type)
	 */
	protected void sequence_Created_name(EObject context, Created_name semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (classorinterfacetype=Class_declaration | primitivetype=Primitive_type) 
	 *         (arraycreatorrest=Array_creator_rest | classcreatorrest=Class_creator_rest)
	 *     )
	 */
	protected void sequence_Created_name_Creator(EObject context, Created_name semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=Type createdname=Created_name classcreatorrest=Class_creator_rest)
	 */
	protected void sequence_Creator_Non_wildcard_type_arguments(EObject context, Non_wildcard_type_arguments semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CREATOR__CLASSCREATORREST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CREATOR__CLASSCREATORREST));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NON_WILDCARD_TYPE_ARGUMENTS__CREATEDNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NON_WILDCARD_TYPE_ARGUMENTS__CREATEDNAME));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NON_WILDCARD_TYPE_ARGUMENTS__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NON_WILDCARD_TYPE_ARGUMENTS__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNon_wildcard_type_argumentsAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getCreatorAccess().getCreatednameCreated_nameParserRuleCall_0_1_0(), semanticObject.getCreatedname());
		feeder.accept(grammarAccess.getCreatorAccess().getClasscreatorrestClass_creator_restParserRuleCall_0_2_0(), semanticObject.getClasscreatorrest());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (doStatement=Statement lparent=LPAREN rparent=RPAREN)
	 */
	protected void sequence_Do_Statement(EObject context, Do_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DO_STATEMENT__DO_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DO_STATEMENT__DO_STATEMENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DO_STATEMENT__LPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DO_STATEMENT__LPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DO_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DO_STATEMENT__RPARENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDo_StatementAccess().getDoStatementStatementParserRuleCall_1_0(), semanticObject.getDoStatement());
		feeder.accept(grammarAccess.getDo_StatementAccess().getLparentLPARENTerminalRuleCall_3_0(), semanticObject.getLparent());
		feeder.accept(grammarAccess.getDo_StatementAccess().getRparentRPARENTerminalRuleCall_4_0(), semanticObject.getRparent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (instanceofexpression+=InstanceOf_expression instanceofexpression+=InstanceOf_expression*)
	 */
	protected void sequence_Equality_expression(EObject context, Equality_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (andexpression+=AND_expression andexpression+=AND_expression*)
	 */
	protected void sequence_Exclusive_OR_expression(EObject context, Exclusive_OR_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (nonwildcardtypearguments=Non_wildcard_type_arguments identifier=ID arguments=Arguments)
	 */
	protected void sequence_Explicit_generic_invocation(EObject context, Explicit_generic_invocation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXPLICIT_GENERIC_INVOCATION__NONWILDCARDTYPEARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXPLICIT_GENERIC_INVOCATION__NONWILDCARDTYPEARGUMENTS));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXPLICIT_GENERIC_INVOCATION__IDENTIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXPLICIT_GENERIC_INVOCATION__IDENTIFIER));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXPLICIT_GENERIC_INVOCATION__ARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXPLICIT_GENERIC_INVOCATION__ARGUMENTS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExplicit_generic_invocationAccess().getNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0(), semanticObject.getNonwildcardtypearguments());
		feeder.accept(grammarAccess.getExplicit_generic_invocationAccess().getIdentifierIDTerminalRuleCall_1_0(), semanticObject.getIdentifier());
		feeder.accept(grammarAccess.getExplicit_generic_invocationAccess().getArgumentsArgumentsParserRuleCall_2_0(), semanticObject.getArguments());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (expression1=Expression expression2+=Expression*)
	 */
	protected void sequence_Expression_list(EObject context, Expression_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Field_declaration}
	 */
	protected void sequence_Field_declaration(EObject context, Field_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lparent=LPAREN forControl=For_control rParent=RPAREN forStatement=Statement)
	 */
	protected void sequence_For_Statement(EObject context, For_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__LPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__LPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__FOR_CONTROL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__FOR_CONTROL));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__RPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__FOR_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_STATEMENT__FOR_STATEMENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFor_StatementAccess().getLparentLPARENTerminalRuleCall_1_0(), semanticObject.getLparent());
		feeder.accept(grammarAccess.getFor_StatementAccess().getForControlFor_controlParserRuleCall_2_0(), semanticObject.getForControl());
		feeder.accept(grammarAccess.getFor_StatementAccess().getRParentRPARENTerminalRuleCall_3_0(), semanticObject.getRParent());
		feeder.accept(grammarAccess.getFor_StatementAccess().getForStatementStatementParserRuleCall_4_0(), semanticObject.getForStatement());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (forinit=For_init? expression=For_expression? forupdate=For_update?)
	 */
	protected void sequence_For_control(EObject context, For_control semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (variable1=Variable ExpOp=For_expression_operator limit=Variable_value)
	 */
	protected void sequence_For_expression(EObject context, For_expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION__VARIABLE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION__VARIABLE1));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION__EXP_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION__EXP_OP));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION__LIMIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION__LIMIT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFor_expressionAccess().getVariable1VariableParserRuleCall_1_0(), semanticObject.getVariable1());
		feeder.accept(grammarAccess.getFor_expressionAccess().getExpOpFor_expression_operatorParserRuleCall_2_0(), semanticObject.getExpOp());
		feeder.accept(grammarAccess.getFor_expressionAccess().getLimitVariable_valueParserRuleCall_3_0(), semanticObject.getLimit());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=Relational_operator
	 */
	protected void sequence_For_expression_operator(EObject context, For_expression_operator semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION_OPERATOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_EXPRESSION_OPERATOR__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFor_expression_operatorAccess().getNameRelational_operatorParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=Primitive_type var=Variable var_init=Variable_value)
	 */
	protected void sequence_For_init(EObject context, For_init semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_INIT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_INIT__TYPE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_INIT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_INIT__VAR));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_INIT__VAR_INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_INIT__VAR_INIT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFor_initAccess().getTypePrimitive_typeParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFor_initAccess().getVarVariableParserRuleCall_2_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getFor_initAccess().getVar_initVariable_valueParserRuleCall_4_0(), semanticObject.getVar_init());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (variable=Variable updateOp=For_update_operator)
	 */
	protected void sequence_For_update(EObject context, For_update semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_UPDATE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_UPDATE__VARIABLE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_UPDATE__UPDATE_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_UPDATE__UPDATE_OP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFor_updateAccess().getVariableVariableParserRuleCall_1_0(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getFor_updateAccess().getUpdateOpFor_update_operatorParserRuleCall_2_0(), semanticObject.getUpdateOp());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=Update_operator
	 */
	protected void sequence_For_update_operator(EObject context, For_update_operator semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FOR_UPDATE_OPERATOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FOR_UPDATE_OPERATOR__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFor_update_operatorAccess().getNameUpdate_operatorParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((arguments=Arguments | explicitgenericinvocation=Explicit_generic_invocation | arguments=Arguments | innercreator=Inner_creator)?)
	 */
	protected void sequence_Identifier_suffix(EObject context, Identifier_suffix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement elseStatement=Statement?)
	 */
	protected void sequence_If_statement(EObject context, If_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (className=Class_name | pacName=Package_name)
	 */
	protected void sequence_Import_statement(EObject context, Import_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (exclusiveorexpression+=Exclusive_OR_expression exclusiveorexpression+=Exclusive_OR_expression*)
	 */
	protected void sequence_Inclusive_OR_expression(EObject context, Inclusive_OR_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (nonwildcardtypearguments=Non_wildcard_type_arguments? identifier=ID classcreatorrest=Class_creator_rest)
	 */
	protected void sequence_Inner_creator(EObject context, Inner_creator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (shiftexpression+=Shift_expression (relationalop+=Relational_operator shiftexpression+=Shift_expression)* type=Type?)
	 */
	protected void sequence_InstanceOf_expression_Relational_expression(EObject context, Relational_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiers+=Modifier* 
	 *         interfaceName=ID 
	 *         (interfaceHerdada=Interface_name interfacesHerdadas+=Interface_name*)? 
	 *         fieldsDeclaration+=Field_declaration*
	 *     )
	 */
	protected void sequence_Interface_declaration(EObject context, Interface_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiersMethod+=Modifier* 
	 *         typeMethod=Type 
	 *         nameMethod=ID 
	 *         lParen=LPAREN 
	 *         parameterListMethod=Parameter_list? 
	 *         rparent=RPAREN 
	 *         (statementMethod=Statement_block | debug=';')
	 *     )
	 */
	protected void sequence_Method_declaration(EObject context, Method_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     greetings+=Compilation_unit
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (unaryexpression+=Unary_expression unaryexpression+=Unary_expression*)
	 */
	protected void sequence_Multiplicative_expression(EObject context, Multiplicative_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_Non_wildcard_type_arguments(EObject context, Non_wildcard_type_arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     pacName=Package_name
	 */
	protected void sequence_Package_statement(EObject context, Package_statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PACKAGE_STATEMENT__PAC_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PACKAGE_STATEMENT__PAC_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPackage_statementAccess().getPacNamePackage_nameParserRuleCall_1_0(), semanticObject.getPacName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=Type parameterName=ID)
	 */
	protected void sequence_Parameter(EObject context, Parameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETER__TYPE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETER__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETER__PARAMETER_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getParameterAccess().getParameterNameIDTerminalRuleCall_1_0(), semanticObject.getParameterName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (parameter=Parameter parameters+=Parameter*)
	 */
	protected void sequence_Parameter_list(EObject context, Parameter_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lparent=LPAREN expression=Expression rparent=RPAREN)
	 */
	protected void sequence_Parens_expression(EObject context, Parens_expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARENS_EXPRESSION__LPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARENS_EXPRESSION__LPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARENS_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARENS_EXPRESSION__EXPRESSION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARENS_EXPRESSION__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARENS_EXPRESSION__RPARENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getParens_expressionAccess().getLparentLPARENTerminalRuleCall_0_0(), semanticObject.getLparent());
		feeder.accept(grammarAccess.getParens_expressionAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getParens_expressionAccess().getRparentRPARENTerminalRuleCall_2_0(), semanticObject.getRparent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             parexpression=Parens_expression | 
	 *             (identifier+=ID* identifiersuffix=Identifier_suffix?) | 
	 *             supersuffix=Super_suffix | 
	 *             literal=Literal | 
	 *             creator=Creator | 
	 *             (identifier+=ID identifier+=ID* identifiersuffix=Identifier_suffix?) | 
	 *             primitivetype=Primitive_type
	 *         )?
	 *     )
	 */
	protected void sequence_Primary_expression(EObject context, Primary_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=Type_specifier
	 */
	protected void sequence_Primitive_type(EObject context, Primitive_type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PRIMITIVE_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PRIMITIVE_TYPE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPrimitive_typeAccess().getNameType_specifierParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (shiftexpression+=Shift_expression (relationalop+=Relational_operator shiftexpression+=Shift_expression)*)
	 */
	protected void sequence_Relational_expression(EObject context, Relational_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (supersuffix=Super_suffix | innercreator=Inner_creator | expression=Expression)
	 */
	protected void sequence_Selector(EObject context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (additiveexpression+=Additive_expression (shiftop+=Shift_operator additiveexpression+=Additive_expression)*)
	 */
	protected void sequence_Shift_expression(EObject context, Shift_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((expression=Expression?) | (expression=Expression?) | (name=ID?) | (name=ID?))
	 */
	protected void sequence_Statement(EObject context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (rCurly=R_CURLY_BRACE statments+=Statement* lCurly=L_CURLY_BRACE)
	 */
	protected void sequence_Statement_block(EObject context, Statement_block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (static=STATIC name=Statement_block)
	 */
	protected void sequence_Static_initializer(EObject context, Static_initializer semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__STATIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__STATIC));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0(), semanticObject.getStatic());
		feeder.accept(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (arguments=Arguments | (identifier=ID arguments=Arguments?))
	 */
	protected void sequence_Super_suffix(EObject context, Super_suffix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lParen=LPAREN expression=Expression rparent=RPAREN (expression2+=Expression | switchStatements+=Statement)*)
	 */
	protected void sequence_Switch_statement(EObject context, Switch_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (tryStatement=Statement (lParen+=LPAREN parameters+=Parameter rparent+=RPAREN catchStatement+=Statement)* finallyStatement=Statement?)
	 */
	protected void sequence_Try_statement(EObject context, Try_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     typeSpecifier=Type_specifier
	 */
	protected void sequence_Type(EObject context, Type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE__TYPE_SPECIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE__TYPE_SPECIFIER));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTypeAccess().getTypeSpecifierType_specifierParserRuleCall_0_0(), semanticObject.getTypeSpecifier());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration))
	 */
	protected void sequence_Type_declaration(EObject context, Type_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         unaryexpression=Unary_expression | 
	 *         unaryexpression=Unary_expression | 
	 *         castexpression=Cast_expression | 
	 *         (primary=Primary_expression selector+=Selector*)
	 *     )
	 */
	protected void sequence_Unary_expression_Not_Plus_Minus(EObject context, Unary_expression_Not_Plus_Minus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(EObject context, Variable semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator names+=Variable_declarator*)
	 */
	protected void sequence_Variable_declaration(EObject context, Variable_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (nameVariable=ID vari=Variable_initializer?)
	 */
	protected void sequence_Variable_declarator(EObject context, Variable_declarator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=Literal
	 */
	protected void sequence_Variable_value(EObject context, Variable_value semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE_VALUE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getVariable_valueAccess().getNameLiteralParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (expression=Expression rparent=RPAREN whileStatement=Statement)
	 */
	protected void sequence_While_Statement(EObject context, While_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__EXPRESSION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__RPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__WHILE_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__WHILE_STATEMENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWhile_StatementAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getWhile_StatementAccess().getRparentRPARENTerminalRuleCall_2_0(), semanticObject.getRparent());
		feeder.accept(grammarAccess.getWhile_StatementAccess().getWhileStatementStatementParserRuleCall_3_0(), semanticObject.getWhileStatement());
		feeder.finish();
	}
}
