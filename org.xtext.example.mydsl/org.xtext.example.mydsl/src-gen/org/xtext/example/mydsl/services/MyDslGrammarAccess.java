/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsCompilation_unitParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Compilation_unit;
		@Override public ParserRule getRule() { return rule; }

		//greetings+=Compilation_unit
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Compilation_unit
		public RuleCall getGreetingsCompilation_unitParserRuleCall_0() { return cGreetingsCompilation_unitParserRuleCall_0; }
	}

	public class Compilation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compilation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompilation_unitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePackage_statementParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImport_statementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cTypeDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDeclarationsType_declarationParserRuleCall_3_0 = (RuleCall)cTypeDeclarationsAssignment_3.eContents().get(0);
		
		//Compilation_unit:
		//	{Compilation_unit} name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*;
		@Override public ParserRule getRule() { return rule; }

		//{Compilation_unit} name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*
		public Group getGroup() { return cGroup; }

		//{Compilation_unit}
		public Action getCompilation_unitAction_0() { return cCompilation_unitAction_0; }

		//name=Package_statement?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Package_statement
		public RuleCall getNamePackage_statementParserRuleCall_1_0() { return cNamePackage_statementParserRuleCall_1_0; }

		//imports+=Import_statement*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import_statement
		public RuleCall getImportsImport_statementParserRuleCall_2_0() { return cImportsImport_statementParserRuleCall_2_0; }

		//typeDeclarations+=Type_declaration*
		public Assignment getTypeDeclarationsAssignment_3() { return cTypeDeclarationsAssignment_3; }

		//Type_declaration
		public RuleCall getTypeDeclarationsType_declarationParserRuleCall_3_0() { return cTypeDeclarationsType_declarationParserRuleCall_3_0; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassDecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassDecClass_declarationParserRuleCall_1_0_0 = (RuleCall)cClassDecAssignment_1_0.eContents().get(0);
		private final Assignment cInterfaceDecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInterfaceDecInterface_declarationParserRuleCall_1_1_0 = (RuleCall)cInterfaceDecAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Type_declaration:
		//	comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";";
		@Override public ParserRule getRule() { return rule; }

		//comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";"
		public Group getGroup() { return cGroup; }

		//comment=DOC_COMMENT?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//DOC_COMMENT
		public RuleCall getCommentDOC_COMMENTTerminalRuleCall_0_0() { return cCommentDOC_COMMENTTerminalRuleCall_0_0; }

		//classDec=Class_declaration | interfaceDec=Interface_declaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//classDec=Class_declaration
		public Assignment getClassDecAssignment_1_0() { return cClassDecAssignment_1_0; }

		//Class_declaration
		public RuleCall getClassDecClass_declarationParserRuleCall_1_0_0() { return cClassDecClass_declarationParserRuleCall_1_0_0; }

		//interfaceDec=Interface_declaration
		public Assignment getInterfaceDecAssignment_1_1() { return cInterfaceDecAssignment_1_1; }

		//Interface_declaration
		public RuleCall getInterfaceDecInterface_declarationParserRuleCall_1_1_0() { return cInterfaceDecInterface_declarationParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceNameIDTerminalRuleCall_2_0 = (RuleCall)cInterfaceNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceHerdadaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceHerdadaInterface_nameParserRuleCall_3_1_0 = (RuleCall)cInterfaceHerdadaAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInterfacesHerdadasAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0 = (RuleCall)cInterfacesHerdadasAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsDeclarationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsDeclarationField_declarationParserRuleCall_5_0 = (RuleCall)cFieldsDeclarationAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Interface_declaration:
		//	modifiers+=Modifier* "interface" interfaceName=ID ("extends" interfaceHerdada=Interface_name (","
		//	interfacesHerdadas+=Interface_name)*)? "{" fieldsDeclaration+=Field_declaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "interface" interfaceName=ID ("extends" interfaceHerdada=Interface_name (","
		//interfacesHerdadas+=Interface_name)*)? "{" fieldsDeclaration+=Field_declaration* "}"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//interfaceName=ID
		public Assignment getInterfaceNameAssignment_2() { return cInterfaceNameAssignment_2; }

		//ID
		public RuleCall getInterfaceNameIDTerminalRuleCall_2_0() { return cInterfaceNameIDTerminalRuleCall_2_0; }

		//("extends" interfaceHerdada=Interface_name ("," interfacesHerdadas+=Interface_name)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//interfaceHerdada=Interface_name
		public Assignment getInterfaceHerdadaAssignment_3_1() { return cInterfaceHerdadaAssignment_3_1; }

		//Interface_name
		public RuleCall getInterfaceHerdadaInterface_nameParserRuleCall_3_1_0() { return cInterfaceHerdadaInterface_nameParserRuleCall_3_1_0; }

		//("," interfacesHerdadas+=Interface_name)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//interfacesHerdadas+=Interface_name
		public Assignment getInterfacesHerdadasAssignment_3_2_1() { return cInterfacesHerdadasAssignment_3_2_1; }

		//Interface_name
		public RuleCall getInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0() { return cInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//fieldsDeclaration+=Field_declaration*
		public Assignment getFieldsDeclarationAssignment_5() { return cFieldsDeclarationAssignment_5; }

		//Field_declaration
		public RuleCall getFieldsDeclarationField_declarationParserRuleCall_5_0() { return cFieldsDeclarationField_declarationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class Class_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassHerdadaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassHerdadaClass_nameParserRuleCall_3_1_0 = (RuleCall)cClassHerdadaAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceImplementadaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInterfaceImplementadaInterface_nameParserRuleCall_4_1_0 = (RuleCall)cInterfaceImplementadaAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInterfacesImplementadasAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0 = (RuleCall)cInterfacesImplementadasAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFieldsDeclarationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsDeclarationField_declarationParserRuleCall_6_0 = (RuleCall)cFieldsDeclarationAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class_declaration:
		//	modifiers+=Modifier* "class" className=ID ("extends" classHerdada=Class_name)? ("implements"
		//	interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? "{"
		//	fieldsDeclaration+=Field_declaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "class" className=ID ("extends" classHerdada=Class_name)? ("implements"
		//interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? "{"
		//fieldsDeclaration+=Field_declaration* "}"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//("extends" classHerdada=Class_name)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//classHerdada=Class_name
		public Assignment getClassHerdadaAssignment_3_1() { return cClassHerdadaAssignment_3_1; }

		//Class_name
		public RuleCall getClassHerdadaClass_nameParserRuleCall_3_1_0() { return cClassHerdadaClass_nameParserRuleCall_3_1_0; }

		//("implements" interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//interfaceImplementada=Interface_name
		public Assignment getInterfaceImplementadaAssignment_4_1() { return cInterfaceImplementadaAssignment_4_1; }

		//Interface_name
		public RuleCall getInterfaceImplementadaInterface_nameParserRuleCall_4_1_0() { return cInterfaceImplementadaInterface_nameParserRuleCall_4_1_0; }

		//("," interfacesImplementadas+=Interface_name)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//interfacesImplementadas+=Interface_name
		public Assignment getInterfacesImplementadasAssignment_4_2_1() { return cInterfacesImplementadasAssignment_4_2_1; }

		//Interface_name
		public RuleCall getInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0() { return cInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//fieldsDeclaration+=Field_declaration*
		public Assignment getFieldsDeclarationAssignment_6() { return cFieldsDeclarationAssignment_6; }

		//Field_declaration
		public RuleCall getFieldsDeclarationField_declarationParserRuleCall_6_0() { return cFieldsDeclarationField_declarationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Field_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCommentAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCommentDOC_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0 = (RuleCall)cVariableDeclarationAssignment_0_1_0.eContents().get(0);
		private final Assignment cContructorNameAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cContructorNameConstructor_declarationParserRuleCall_0_1_1_0 = (RuleCall)cContructorNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cMethodNameMethod_declarationParserRuleCall_0_1_2_0 = (RuleCall)cMethodNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cStaticinitializerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStaticinitializerStatic_initializerParserRuleCall_1_0 = (RuleCall)cStaticinitializerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cField_declarationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Field_declaration:
		//	comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//	methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";";
		@Override public ParserRule getRule() { return rule; }

		//comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//methodName=Method_declaration)
		public Group getGroup_0() { return cGroup_0; }

		//comment=DOC_COMMENT?
		public Assignment getCommentAssignment_0_0() { return cCommentAssignment_0_0; }

		//DOC_COMMENT
		public RuleCall getCommentDOC_COMMENTTerminalRuleCall_0_0_0() { return cCommentDOC_COMMENTTerminalRuleCall_0_0_0; }

		//variableDeclaration=Variable_declaration | contructorName=Constructor_declaration | methodName=Method_declaration
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//variableDeclaration=Variable_declaration
		public Assignment getVariableDeclarationAssignment_0_1_0() { return cVariableDeclarationAssignment_0_1_0; }

		//Variable_declaration
		public RuleCall getVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0() { return cVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0; }

		//contructorName=Constructor_declaration
		public Assignment getContructorNameAssignment_0_1_1() { return cContructorNameAssignment_0_1_1; }

		//Constructor_declaration
		public RuleCall getContructorNameConstructor_declarationParserRuleCall_0_1_1_0() { return cContructorNameConstructor_declarationParserRuleCall_0_1_1_0; }

		//methodName=Method_declaration
		public Assignment getMethodNameAssignment_0_1_2() { return cMethodNameAssignment_0_1_2; }

		//Method_declaration
		public RuleCall getMethodNameMethod_declarationParserRuleCall_0_1_2_0() { return cMethodNameMethod_declarationParserRuleCall_0_1_2_0; }

		//staticinitializer=Static_initializer
		public Assignment getStaticinitializerAssignment_1() { return cStaticinitializerAssignment_1; }

		//Static_initializer
		public RuleCall getStaticinitializerStatic_initializerParserRuleCall_1_0() { return cStaticinitializerStatic_initializerParserRuleCall_1_0; }

		//{Field_declaration} ";"
		public Group getGroup_2() { return cGroup_2; }

		//{Field_declaration}
		public Action getField_declarationAction_2_0() { return cField_declarationAction_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class Method_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersMethodModifierParserRuleCall_0_0 = (RuleCall)cModifiersMethodAssignment_0.eContents().get(0);
		private final Assignment cTypeMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMethodTypeParserRuleCall_1_0 = (RuleCall)cTypeMethodAssignment_1.eContents().get(0);
		private final Assignment cNameMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameMethodIDTerminalRuleCall_2_0 = (RuleCall)cNameMethodAssignment_2.eContents().get(0);
		private final Assignment cLParenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLParenLPARENTerminalRuleCall_3_0 = (RuleCall)cLParenAssignment_3.eContents().get(0);
		private final Assignment cParameterListMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterListMethodParameter_listParserRuleCall_4_0 = (RuleCall)cParameterListMethodAssignment_4.eContents().get(0);
		private final Assignment cRparentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRparentRPARENTerminalRuleCall_5_0 = (RuleCall)cRparentAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cStatementMethodAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cStatementMethodStatement_blockParserRuleCall_7_0_0 = (RuleCall)cStatementMethodAssignment_7_0.eContents().get(0);
		private final Assignment cDebugAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cDebugSemicolonKeyword_7_1_0 = (Keyword)cDebugAssignment_7_1.eContents().get(0);
		
		//Method_declaration:
		//	modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID lParen=LPAREN parameterListMethod=Parameter_list?
		//	rparent=RPAREN ("[" "]")* (statementMethod=Statement_block | debug=";");
		@Override public ParserRule getRule() { return rule; }

		//modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID lParen=LPAREN parameterListMethod=Parameter_list?
		//rparent=RPAREN ("[" "]")* (statementMethod=Statement_block | debug=";")
		public Group getGroup() { return cGroup; }

		//modifiersMethod+=Modifier*
		public Assignment getModifiersMethodAssignment_0() { return cModifiersMethodAssignment_0; }

		//Modifier
		public RuleCall getModifiersMethodModifierParserRuleCall_0_0() { return cModifiersMethodModifierParserRuleCall_0_0; }

		//typeMethod=Type
		public Assignment getTypeMethodAssignment_1() { return cTypeMethodAssignment_1; }

		//Type
		public RuleCall getTypeMethodTypeParserRuleCall_1_0() { return cTypeMethodTypeParserRuleCall_1_0; }

		//nameMethod=ID
		public Assignment getNameMethodAssignment_2() { return cNameMethodAssignment_2; }

		//ID
		public RuleCall getNameMethodIDTerminalRuleCall_2_0() { return cNameMethodIDTerminalRuleCall_2_0; }

		//lParen=LPAREN
		public Assignment getLParenAssignment_3() { return cLParenAssignment_3; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_3_0() { return cLParenLPARENTerminalRuleCall_3_0; }

		//parameterListMethod=Parameter_list?
		public Assignment getParameterListMethodAssignment_4() { return cParameterListMethodAssignment_4; }

		//Parameter_list
		public RuleCall getParameterListMethodParameter_listParserRuleCall_4_0() { return cParameterListMethodParameter_listParserRuleCall_4_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_5() { return cRparentAssignment_5; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_5_0() { return cRparentRPARENTerminalRuleCall_5_0; }

		//("[" "]")*
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }

		//statementMethod=Statement_block | debug=";"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//statementMethod=Statement_block
		public Assignment getStatementMethodAssignment_7_0() { return cStatementMethodAssignment_7_0; }

		//Statement_block
		public RuleCall getStatementMethodStatement_blockParserRuleCall_7_0_0() { return cStatementMethodStatement_blockParserRuleCall_7_0_0; }

		//debug=";"
		public Assignment getDebugAssignment_7_1() { return cDebugAssignment_7_1; }

		//";"
		public Keyword getDebugSemicolonKeyword_7_1_0() { return cDebugSemicolonKeyword_7_1_0; }
	}

	public class Constructor_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersConstructorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersConstructorModifierParserRuleCall_0_0 = (RuleCall)cModifiersConstructorAssignment_0.eContents().get(0);
		private final Assignment cNameConstructorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameConstructorIDTerminalRuleCall_1_0 = (RuleCall)cNameConstructorAssignment_1.eContents().get(0);
		private final Assignment cLParenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLParenLPARENTerminalRuleCall_2_0 = (RuleCall)cLParenAssignment_2.eContents().get(0);
		private final Assignment cParameterListConstructorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListConstructorParameter_listParserRuleCall_3_0 = (RuleCall)cParameterListConstructorAssignment_3.eContents().get(0);
		private final Assignment cRparentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRparentRPARENTerminalRuleCall_4_0 = (RuleCall)cRparentAssignment_4.eContents().get(0);
		private final Assignment cStatementConstructorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementConstructorStatement_blockParserRuleCall_5_0 = (RuleCall)cStatementConstructorAssignment_5.eContents().get(0);
		
		//Constructor_declaration:
		//	modifiersConstructor+=Modifier* nameConstructor=ID lParen=LPAREN parameterListConstructor=Parameter_list?
		//	rparent=RPAREN statementConstructor=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//modifiersConstructor+=Modifier* nameConstructor=ID lParen=LPAREN parameterListConstructor=Parameter_list? rparent=RPAREN
		//statementConstructor=Statement_block
		public Group getGroup() { return cGroup; }

		//modifiersConstructor+=Modifier*
		public Assignment getModifiersConstructorAssignment_0() { return cModifiersConstructorAssignment_0; }

		//Modifier
		public RuleCall getModifiersConstructorModifierParserRuleCall_0_0() { return cModifiersConstructorModifierParserRuleCall_0_0; }

		//nameConstructor=ID
		public Assignment getNameConstructorAssignment_1() { return cNameConstructorAssignment_1; }

		//ID
		public RuleCall getNameConstructorIDTerminalRuleCall_1_0() { return cNameConstructorIDTerminalRuleCall_1_0; }

		//lParen=LPAREN
		public Assignment getLParenAssignment_2() { return cLParenAssignment_2; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_2_0() { return cLParenLPARENTerminalRuleCall_2_0; }

		//parameterListConstructor=Parameter_list?
		public Assignment getParameterListConstructorAssignment_3() { return cParameterListConstructorAssignment_3; }

		//Parameter_list
		public RuleCall getParameterListConstructorParameter_listParserRuleCall_3_0() { return cParameterListConstructorParameter_listParserRuleCall_3_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_4() { return cRparentAssignment_4; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_4_0() { return cRparentRPARENTerminalRuleCall_4_0; }

		//statementConstructor=Statement_block
		public Assignment getStatementConstructorAssignment_5() { return cStatementConstructorAssignment_5; }

		//Statement_block
		public RuleCall getStatementConstructorStatement_blockParserRuleCall_5_0() { return cStatementConstructorStatement_blockParserRuleCall_5_0; }
	}

	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameter_list:
		//	parameter=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameter=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameter=Parameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0() { return cParameterParameterParserRuleCall_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cParameterNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterNameIDTerminalRuleCall_1_0 = (RuleCall)cParameterNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Parameter:
		//	type=Type parameterName=ID ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//type=Type parameterName=ID ("[" "]")*
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//parameterName=ID
		public Assignment getParameterNameAssignment_1() { return cParameterNameAssignment_1; }

		//ID
		public RuleCall getParameterNameIDTerminalRuleCall_1_0() { return cParameterNameIDTerminalRuleCall_1_0; }

		//("[" "]")*
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersVariableModifierParserRuleCall_0_0 = (RuleCall)cModifiersVariableAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableVariable_declaratorParserRuleCall_2_0 = (RuleCall)cNameVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNamesVariable_declaratorParserRuleCall_3_1_0 = (RuleCall)cNamesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable_declaration:
		//	modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";";
		@Override public ParserRule getRule() { return rule; }

		//modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";"
		public Group getGroup() { return cGroup; }

		//modifiersVariable+=Modifier*
		public Assignment getModifiersVariableAssignment_0() { return cModifiersVariableAssignment_0; }

		//Modifier
		public RuleCall getModifiersVariableModifierParserRuleCall_0_0() { return cModifiersVariableModifierParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//nameVariable=Variable_declarator
		public Assignment getNameVariableAssignment_2() { return cNameVariableAssignment_2; }

		//Variable_declarator
		public RuleCall getNameVariableVariable_declaratorParserRuleCall_2_0() { return cNameVariableVariable_declaratorParserRuleCall_2_0; }

		//("," names+=Variable_declarator)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=Variable_declarator
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//Variable_declarator
		public RuleCall getNamesVariable_declaratorParserRuleCall_3_1_0() { return cNamesVariable_declaratorParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Variable_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0 = (RuleCall)cNameVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariVariable_initializerParserRuleCall_2_1_0 = (RuleCall)cVariAssignment_2_1.eContents().get(0);
		
		//Variable_declarator:
		//	nameVariable=ID ("[" "]")* ("=" vari=Variable_initializer)?;
		@Override public ParserRule getRule() { return rule; }

		//nameVariable=ID ("[" "]")* ("=" vari=Variable_initializer)?
		public Group getGroup() { return cGroup; }

		//nameVariable=ID
		public Assignment getNameVariableAssignment_0() { return cNameVariableAssignment_0; }

		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0() { return cNameVariableIDTerminalRuleCall_0_0; }

		//("[" "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }

		//("=" vari=Variable_initializer)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//vari=Variable_initializer
		public Assignment getVariAssignment_2_1() { return cVariAssignment_2_1; }

		//Variable_initializer
		public RuleCall getVariVariable_initializerParserRuleCall_2_1_0() { return cVariVariable_initializerParserRuleCall_2_1_0; }
	}

	public class Variable_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArray_initializerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable_initializer:
		//	Array_initializer | Expression;
		@Override public ParserRule getRule() { return rule; }

		//Array_initializer | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Array_initializer
		public RuleCall getArray_initializerParserRuleCall_0() { return cArray_initializerParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class Array_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArray_initializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableinitializerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableinitializerVariable_initializerParserRuleCall_2_0_0 = (RuleCall)cVariableinitializerAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariableinitializerAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVariableinitializerVariable_initializerParserRuleCall_2_1_1_0 = (RuleCall)cVariableinitializerAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array_initializer:
		//	{Array_initializer} "{" (variableinitializer+=Variable_initializer ("," variableinitializer+=Variable_initializer)*
		//	","?)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{Array_initializer} "{" (variableinitializer+=Variable_initializer ("," variableinitializer+=Variable_initializer)*
		//","?)? "}"
		public Group getGroup() { return cGroup; }

		//{Array_initializer}
		public Action getArray_initializerAction_0() { return cArray_initializerAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(variableinitializer+=Variable_initializer ("," variableinitializer+=Variable_initializer)* ","?)?
		public Group getGroup_2() { return cGroup_2; }

		//variableinitializer+=Variable_initializer
		public Assignment getVariableinitializerAssignment_2_0() { return cVariableinitializerAssignment_2_0; }

		//Variable_initializer
		public RuleCall getVariableinitializerVariable_initializerParserRuleCall_2_0_0() { return cVariableinitializerVariable_initializerParserRuleCall_2_0_0; }

		//("," variableinitializer+=Variable_initializer)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//variableinitializer+=Variable_initializer
		public Assignment getVariableinitializerAssignment_2_1_1() { return cVariableinitializerAssignment_2_1_1; }

		//Variable_initializer
		public RuleCall getVariableinitializerVariable_initializerParserRuleCall_2_1_1_0() { return cVariableinitializerVariable_initializerParserRuleCall_2_1_1_0; }

		//","?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_0_0 = (RuleCall)cTypeSpecifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Type:
		//	typeSpecifier=Type_specifier ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//typeSpecifier=Type_specifier ("[" "]")*
		public Group getGroup() { return cGroup; }

		//typeSpecifier=Type_specifier
		public Assignment getTypeSpecifierAssignment_0() { return cTypeSpecifierAssignment_0; }

		//Type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_0_0() { return cTypeSpecifierType_specifierParserRuleCall_0_0; }

		//("[" "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}

	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCharKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cVoidKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final RuleCall cClass_nameParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Type_specifier:
		//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | "void" | Class_name;
		@Override public ParserRule getRule() { return rule; }

		//"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | "void" | Class_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"char"
		public Keyword getCharKeyword_2() { return cCharKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"float"
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"double"
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }

		//"void"
		public Keyword getVoidKeyword_8() { return cVoidKeyword_8; }

		//Class_name
		public RuleCall getClass_nameParserRuleCall_9() { return cClass_nameParserRuleCall_9; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMODTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTATICTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Modifier:
		//	MOD | STATIC;
		@Override public ParserRule getRule() { return rule; }

		//MOD | STATIC
		public Alternatives getAlternatives() { return cAlternatives; }

		//MOD
		public RuleCall getMODTerminalRuleCall_0() { return cMODTerminalRuleCall_0; }

		//STATIC
		public RuleCall getSTATICTerminalRuleCall_1() { return cSTATICTerminalRuleCall_1; }
	}

	public class Static_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Static_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStaticSTATICTerminalRuleCall_0_0 = (RuleCall)cStaticAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStatement_blockParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Static_initializer:
		//	static=STATIC name=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//static=STATIC name=Statement_block
		public Group getGroup() { return cGroup; }

		//static=STATIC
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//STATIC
		public RuleCall getStaticSTATICTerminalRuleCall_0_0() { return cStaticSTATICTerminalRuleCall_0_0; }

		//name=Statement_block
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Statement_block
		public RuleCall getNameStatement_blockParserRuleCall_1_0() { return cNameStatement_blockParserRuleCall_1_0; }
	}

	public class Statement_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatement_blockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatmentsStatementParserRuleCall_2_0 = (RuleCall)cStatmentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Statement_block:
		//	{Statement_block} "{" statments+=Statement* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Statement_block} "{" statments+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{Statement_block}
		public Action getStatement_blockAction_0() { return cStatement_blockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statments+=Statement*
		public Assignment getStatmentsAssignment_2() { return cStatmentsAssignment_2; }

		//Statement
		public RuleCall getStatmentsStatementParserRuleCall_2_0() { return cStatmentsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationVariable_declarationParserRuleCall_0_0 = (RuleCall)cVariableDeclarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionStatementExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionStatementAssignment_1_0.eContents().get(0);
		private final Assignment cGAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cGSemicolonKeyword_1_1_0 = (Keyword)cGAssignment_1_1.eContents().get(0);
		private final Assignment cIfStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatementIf_statementParserRuleCall_2_0 = (RuleCall)cIfStatementAssignment_2.eContents().get(0);
		private final Assignment cDoStatementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDoStatementDo_StatementParserRuleCall_3_0 = (RuleCall)cDoStatementAssignment_3.eContents().get(0);
		private final Assignment cWhileStatementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cWhileStatementWhile_StatementParserRuleCall_4_0 = (RuleCall)cWhileStatementAssignment_4.eContents().get(0);
		private final Assignment cForStatementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cForStatementFor_StatementParserRuleCall_5_0 = (RuleCall)cForStatementAssignment_5.eContents().get(0);
		private final Assignment cSwitchStatementAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cSwitchStatementSwitch_statementParserRuleCall_6_0 = (RuleCall)cSwitchStatementAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cSynchronizedKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cRparentAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cRparentRPARENTerminalRuleCall_7_2_0 = (RuleCall)cRparentAssignment_7_2.eContents().get(0);
		private final Assignment cSyncStatementAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cSyncStatementStatementParserRuleCall_7_3_0 = (RuleCall)cSyncStatementAssignment_7_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cStatementAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cReturnKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_8_2_0 = (RuleCall)cExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cStatementAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cThrowKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpressionAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_9_2_0 = (RuleCall)cExpressionAssignment_9_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final RuleCall cStatement_blockParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final Assignment cTryStatementAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cTryStatementTry_statementParserRuleCall_11_0 = (RuleCall)cTryStatementAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cNameStatementAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final RuleCall cNameStatementIDTerminalRuleCall_12_0_0 = (RuleCall)cNameStatementAssignment_12_0.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cStatementAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_12_2_0 = (RuleCall)cStatementAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cStatementAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cBreakKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cNameAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_13_2_0 = (RuleCall)cNameAssignment_13_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cStatementAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cContinueKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cNameAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_14_2_0 = (RuleCall)cNameAssignment_14_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cStatementAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		
		////FIXME: resolver Expression em todas operações 
		//Statement:
		//	variableDeclaration=Variable_declaration | expressionStatement+=Expression g=";" | ifStatement=If_statement |
		//	doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement |
		//	switchStatement=Switch_statement | "synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement |
		//	{Statement} "return" expression=Expression? ";" | {Statement} "throw" expression=Expression? ";" | Statement_block |
		//	tryStatement=Try_statement | nameStatement=ID ":" statement=Statement | {Statement} "break" name=ID? ";" |
		//	{Statement} "continue" name=ID? ";" | {Statement} ";";
		@Override public ParserRule getRule() { return rule; }

		//variableDeclaration=Variable_declaration | expressionStatement+=Expression g=";" | ifStatement=If_statement |
		//doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement |
		//switchStatement=Switch_statement | "synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement |
		//{Statement} "return" expression=Expression? ";" | {Statement} "throw" expression=Expression? ";" | Statement_block |
		//tryStatement=Try_statement | nameStatement=ID ":" statement=Statement | {Statement} "break" name=ID? ";" | {Statement}
		//"continue" name=ID? ";" | {Statement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//variableDeclaration=Variable_declaration
		public Assignment getVariableDeclarationAssignment_0() { return cVariableDeclarationAssignment_0; }

		//Variable_declaration
		public RuleCall getVariableDeclarationVariable_declarationParserRuleCall_0_0() { return cVariableDeclarationVariable_declarationParserRuleCall_0_0; }

		//expressionStatement+=Expression g=";"
		public Group getGroup_1() { return cGroup_1; }

		//expressionStatement+=Expression
		public Assignment getExpressionStatementAssignment_1_0() { return cExpressionStatementAssignment_1_0; }

		//Expression
		public RuleCall getExpressionStatementExpressionParserRuleCall_1_0_0() { return cExpressionStatementExpressionParserRuleCall_1_0_0; }

		//g=";"
		public Assignment getGAssignment_1_1() { return cGAssignment_1_1; }

		//";"
		public Keyword getGSemicolonKeyword_1_1_0() { return cGSemicolonKeyword_1_1_0; }

		//ifStatement=If_statement
		public Assignment getIfStatementAssignment_2() { return cIfStatementAssignment_2; }

		//If_statement
		public RuleCall getIfStatementIf_statementParserRuleCall_2_0() { return cIfStatementIf_statementParserRuleCall_2_0; }

		//doStatement=Do_Statement
		public Assignment getDoStatementAssignment_3() { return cDoStatementAssignment_3; }

		//Do_Statement
		public RuleCall getDoStatementDo_StatementParserRuleCall_3_0() { return cDoStatementDo_StatementParserRuleCall_3_0; }

		//whileStatement=While_Statement
		public Assignment getWhileStatementAssignment_4() { return cWhileStatementAssignment_4; }

		//While_Statement
		public RuleCall getWhileStatementWhile_StatementParserRuleCall_4_0() { return cWhileStatementWhile_StatementParserRuleCall_4_0; }

		//forStatement=For_Statement
		public Assignment getForStatementAssignment_5() { return cForStatementAssignment_5; }

		//For_Statement
		public RuleCall getForStatementFor_StatementParserRuleCall_5_0() { return cForStatementFor_StatementParserRuleCall_5_0; }

		//switchStatement=Switch_statement
		public Assignment getSwitchStatementAssignment_6() { return cSwitchStatementAssignment_6; }

		//Switch_statement
		public RuleCall getSwitchStatementSwitch_statementParserRuleCall_6_0() { return cSwitchStatementSwitch_statementParserRuleCall_6_0; }

		//"synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement
		public Group getGroup_7() { return cGroup_7; }

		//"synchronized("
		public Keyword getSynchronizedKeyword_7_0() { return cSynchronizedKeyword_7_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_1_0() { return cExpressionExpressionParserRuleCall_7_1_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_7_2() { return cRparentAssignment_7_2; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_7_2_0() { return cRparentRPARENTerminalRuleCall_7_2_0; }

		//syncStatement=Statement
		public Assignment getSyncStatementAssignment_7_3() { return cSyncStatementAssignment_7_3; }

		//Statement
		public RuleCall getSyncStatementStatementParserRuleCall_7_3_0() { return cSyncStatementStatementParserRuleCall_7_3_0; }

		//{Statement} "return" expression=Expression? ";"
		public Group getGroup_8() { return cGroup_8; }

		//{Statement}
		public Action getStatementAction_8_0() { return cStatementAction_8_0; }

		//"return"
		public Keyword getReturnKeyword_8_1() { return cReturnKeyword_8_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_8_2() { return cExpressionAssignment_8_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_2_0() { return cExpressionExpressionParserRuleCall_8_2_0; }

		//";"
		public Keyword getSemicolonKeyword_8_3() { return cSemicolonKeyword_8_3; }

		//{Statement} "throw" expression=Expression? ";"
		public Group getGroup_9() { return cGroup_9; }

		//{Statement}
		public Action getStatementAction_9_0() { return cStatementAction_9_0; }

		//"throw"
		public Keyword getThrowKeyword_9_1() { return cThrowKeyword_9_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_9_2() { return cExpressionAssignment_9_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_9_2_0() { return cExpressionExpressionParserRuleCall_9_2_0; }

		//";"
		public Keyword getSemicolonKeyword_9_3() { return cSemicolonKeyword_9_3; }

		//Statement_block
		public RuleCall getStatement_blockParserRuleCall_10() { return cStatement_blockParserRuleCall_10; }

		//tryStatement=Try_statement
		public Assignment getTryStatementAssignment_11() { return cTryStatementAssignment_11; }

		//Try_statement
		public RuleCall getTryStatementTry_statementParserRuleCall_11_0() { return cTryStatementTry_statementParserRuleCall_11_0; }

		//nameStatement=ID ":" statement=Statement
		public Group getGroup_12() { return cGroup_12; }

		//nameStatement=ID
		public Assignment getNameStatementAssignment_12_0() { return cNameStatementAssignment_12_0; }

		//ID
		public RuleCall getNameStatementIDTerminalRuleCall_12_0_0() { return cNameStatementIDTerminalRuleCall_12_0_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//statement=Statement
		public Assignment getStatementAssignment_12_2() { return cStatementAssignment_12_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_12_2_0() { return cStatementStatementParserRuleCall_12_2_0; }

		//{Statement} "break" name=ID? ";"
		public Group getGroup_13() { return cGroup_13; }

		//{Statement}
		public Action getStatementAction_13_0() { return cStatementAction_13_0; }

		//"break"
		public Keyword getBreakKeyword_13_1() { return cBreakKeyword_13_1; }

		//name=ID?
		public Assignment getNameAssignment_13_2() { return cNameAssignment_13_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_13_2_0() { return cNameIDTerminalRuleCall_13_2_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3() { return cSemicolonKeyword_13_3; }

		//{Statement} "continue" name=ID? ";"
		public Group getGroup_14() { return cGroup_14; }

		//{Statement}
		public Action getStatementAction_14_0() { return cStatementAction_14_0; }

		//"continue"
		public Keyword getContinueKeyword_14_1() { return cContinueKeyword_14_1; }

		//name=ID?
		public Assignment getNameAssignment_14_2() { return cNameAssignment_14_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_14_2_0() { return cNameIDTerminalRuleCall_14_2_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3() { return cSemicolonKeyword_14_3; }

		//{Statement} ";"
		public Group getGroup_15() { return cGroup_15; }

		//{Statement}
		public Action getStatementAction_15_0() { return cStatementAction_15_0; }

		//";"
		public Keyword getSemicolonKeyword_15_1() { return cSemicolonKeyword_15_1; }
	}

	public class For_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLparentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLparentLPARENTerminalRuleCall_1_0 = (RuleCall)cLparentAssignment_1.eContents().get(0);
		private final Assignment cForControlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cForControlFor_controlParserRuleCall_2_0 = (RuleCall)cForControlAssignment_2.eContents().get(0);
		private final Assignment cRParentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRParentRPARENTerminalRuleCall_3_0 = (RuleCall)cRParentAssignment_3.eContents().get(0);
		private final Assignment cForStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForStatementStatementParserRuleCall_4_0 = (RuleCall)cForStatementAssignment_4.eContents().get(0);
		
		////##################################  For
		//For_Statement:
		//	"for" lparent=LPAREN forControl=For_control rParent=RPAREN forStatement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"for" lparent=LPAREN forControl=For_control rParent=RPAREN forStatement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_1() { return cLparentAssignment_1; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_1_0() { return cLparentLPARENTerminalRuleCall_1_0; }

		//forControl=For_control
		public Assignment getForControlAssignment_2() { return cForControlAssignment_2; }

		//For_control
		public RuleCall getForControlFor_controlParserRuleCall_2_0() { return cForControlFor_controlParserRuleCall_2_0; }

		//rParent=RPAREN
		public Assignment getRParentAssignment_3() { return cRParentAssignment_3; }

		//RPAREN
		public RuleCall getRParentRPARENTerminalRuleCall_3_0() { return cRParentRPARENTerminalRuleCall_3_0; }

		//forStatement=Statement
		public Assignment getForStatementAssignment_4() { return cForStatementAssignment_4; }

		//Statement
		public RuleCall getForStatementStatementParserRuleCall_4_0() { return cForStatementStatementParserRuleCall_4_0; }
	}

	public class For_controlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFor_controlAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cForinitAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cForinitFor_initParserRuleCall_1_0_0 = (RuleCall)cForinitAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionFor_expressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cForupdateAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cForupdateFor_updateParserRuleCall_1_4_0 = (RuleCall)cForupdateAssignment_1_4.eContents().get(0);
		
		//For_control:
		//	{For_control} (forinit=For_init? ";" expression=For_expression? ";" forupdate=For_update?);
		@Override public ParserRule getRule() { return rule; }

		//{For_control} (forinit=For_init? ";" expression=For_expression? ";" forupdate=For_update?)
		public Group getGroup() { return cGroup; }

		//{For_control}
		public Action getFor_controlAction_0() { return cFor_controlAction_0; }

		//forinit=For_init? ";" expression=For_expression? ";" forupdate=For_update?
		public Group getGroup_1() { return cGroup_1; }

		//forinit=For_init?
		public Assignment getForinitAssignment_1_0() { return cForinitAssignment_1_0; }

		//For_init
		public RuleCall getForinitFor_initParserRuleCall_1_0_0() { return cForinitFor_initParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//expression=For_expression?
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//For_expression
		public RuleCall getExpressionFor_expressionParserRuleCall_1_2_0() { return cExpressionFor_expressionParserRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//forupdate=For_update?
		public Assignment getForupdateAssignment_1_4() { return cForupdateAssignment_1_4; }

		//For_update
		public RuleCall getForupdateFor_updateParserRuleCall_1_4_0() { return cForupdateFor_updateParserRuleCall_1_4_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Variable_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_value");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameLiteralParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable_value:
		//	name=Literal;
		@Override public ParserRule getRule() { return rule; }

		//name=Literal
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Literal
		public RuleCall getNameLiteralParserRuleCall_0() { return cNameLiteralParserRuleCall_0; }
	}

	public class Primitive_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive_type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameType_specifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Primitive_type:
		//	name=Type_specifier;
		@Override public ParserRule getRule() { return rule; }

		//name=Type_specifier
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Type_specifier
		public RuleCall getNameType_specifierParserRuleCall_0() { return cNameType_specifierParserRuleCall_0; }
	}

	public class For_initElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFor_initAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePrimitive_typeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar_initAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVar_initVariable_valueParserRuleCall_4_0 = (RuleCall)cVar_initAssignment_4.eContents().get(0);
		
		////usual For init loop
		//For_init:
		//	{For_init} type=Primitive_type var=Variable "=" var_init=Variable_value;
		@Override public ParserRule getRule() { return rule; }

		//{For_init} type=Primitive_type var=Variable "=" var_init=Variable_value
		public Group getGroup() { return cGroup; }

		//{For_init}
		public Action getFor_initAction_0() { return cFor_initAction_0; }

		//type=Primitive_type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Primitive_type
		public RuleCall getTypePrimitive_typeParserRuleCall_1_0() { return cTypePrimitive_typeParserRuleCall_1_0; }

		//var=Variable
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_2_0() { return cVarVariableParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//var_init=Variable_value
		public Assignment getVar_initAssignment_4() { return cVar_initAssignment_4; }

		//Variable_value
		public RuleCall getVar_initVariable_valueParserRuleCall_4_0() { return cVar_initVariable_valueParserRuleCall_4_0; }
	}

	public class For_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFor_expressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariable1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariable1VariableParserRuleCall_1_0 = (RuleCall)cVariable1Assignment_1.eContents().get(0);
		private final Assignment cExpOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpOpFor_expression_operatorParserRuleCall_2_0 = (RuleCall)cExpOpAssignment_2.eContents().get(0);
		private final Assignment cLimitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLimitVariable_valueParserRuleCall_3_0 = (RuleCall)cLimitAssignment_3.eContents().get(0);
		
		////check with more expressions	
		//For_expression:
		//	{For_expression} variable1=Variable //('<' | '>' | '<' '=' | '>' '=')
		//	ExpOp=For_expression_operator //(variable2 = Variable ) //if another variablle is declared before the For declaration 
		//	limit=Variable_value;
		@Override public ParserRule getRule() { return rule; }

		//{For_expression} variable1=Variable //('<' | '>' | '<' '=' | '>' '=')
		//ExpOp=For_expression_operator //(variable2 = Variable ) //if another variablle is declared before the For declaration 
		//limit=Variable_value
		public Group getGroup() { return cGroup; }

		//{For_expression}
		public Action getFor_expressionAction_0() { return cFor_expressionAction_0; }

		//variable1=Variable
		public Assignment getVariable1Assignment_1() { return cVariable1Assignment_1; }

		//Variable
		public RuleCall getVariable1VariableParserRuleCall_1_0() { return cVariable1VariableParserRuleCall_1_0; }

		////('<' | '>' | '<' '=' | '>' '=')
		//ExpOp=For_expression_operator
		public Assignment getExpOpAssignment_2() { return cExpOpAssignment_2; }

		//For_expression_operator
		public RuleCall getExpOpFor_expression_operatorParserRuleCall_2_0() { return cExpOpFor_expression_operatorParserRuleCall_2_0; }

		////(variable2 = Variable ) //if another variablle is declared before the For declaration 
		//limit=Variable_value
		public Assignment getLimitAssignment_3() { return cLimitAssignment_3; }

		//Variable_value
		public RuleCall getLimitVariable_valueParserRuleCall_3_0() { return cLimitVariable_valueParserRuleCall_3_0; }
	}

	public class For_updateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFor_updateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cUpdateOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpdateOpFor_update_operatorParserRuleCall_2_0 = (RuleCall)cUpdateOpAssignment_2.eContents().get(0);
		
		//For_update:
		//	{For_update} variable= //('++' | '--')
		//	Variable updateOp=For_update_operator;
		@Override public ParserRule getRule() { return rule; }

		//{For_update} variable= //('++' | '--')
		//Variable updateOp=For_update_operator
		public Group getGroup() { return cGroup; }

		//{For_update}
		public Action getFor_updateAction_0() { return cFor_updateAction_0; }

		//variable= //('++' | '--')
		//Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		////('++' | '--')
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }

		//updateOp=For_update_operator
		public Assignment getUpdateOpAssignment_2() { return cUpdateOpAssignment_2; }

		//For_update_operator
		public RuleCall getUpdateOpFor_update_operatorParserRuleCall_2_0() { return cUpdateOpFor_update_operatorParserRuleCall_2_0; }
	}

	public class For_update_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_update_operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFor_update_operatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUpdate_operatorParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//For_update_operator:
		//	{For_update_operator} name=Update_operator;
		@Override public ParserRule getRule() { return rule; }

		//{For_update_operator} name=Update_operator
		public Group getGroup() { return cGroup; }

		//{For_update_operator}
		public Action getFor_update_operatorAction_0() { return cFor_update_operatorAction_0; }

		//name=Update_operator
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Update_operator
		public RuleCall getNameUpdate_operatorParserRuleCall_1_0() { return cNameUpdate_operatorParserRuleCall_1_0; }
	}

	public class Update_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Update_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Update_operator:
		//	"++" | "--";
		@Override public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class For_expression_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_expression_operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFor_expression_operatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameRelational_operatorParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//For_expression_operator: //check if it works with the options
		//	{For_expression_operator} name=Relational_operator;
		@Override public ParserRule getRule() { return rule; }

		////check if it works with the options
		//{For_expression_operator} name=Relational_operator
		public Group getGroup() { return cGroup; }

		////check if it works with the options
		//{For_expression_operator}
		public Action getFor_expression_operatorAction_0() { return cFor_expression_operatorAction_0; }

		//name=Relational_operator
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Relational_operator
		public RuleCall getNameRelational_operatorParserRuleCall_1_0() { return cNameRelational_operatorParserRuleCall_1_0; }
	}

	public class Parens_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parens_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLparentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLparentLPARENTerminalRuleCall_0_0 = (RuleCall)cLparentAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cRparentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRparentRPARENTerminalRuleCall_2_0 = (RuleCall)cRparentAssignment_2.eContents().get(0);
		
		////################################## EXPRESSOES
		//Parens_expression:
		//	lparent=LPAREN expression=Expression rparent=RPAREN;
		@Override public ParserRule getRule() { return rule; }

		//lparent=LPAREN expression=Expression rparent=RPAREN
		public Group getGroup() { return cGroup; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_0() { return cLparentAssignment_0; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_0_0() { return cLparentLPARENTerminalRuleCall_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_2() { return cRparentAssignment_2; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_2_0() { return cRparentRPARENTerminalRuleCall_2_0; }
	}

	public class Expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		
		//Expression_list:
		//	expression1=Expression ("," expression2+=Expression)*;
		@Override public ParserRule getRule() { return rule; }

		//expression1=Expression ("," expression2+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression1=Expression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_0_0() { return cExpression1ExpressionParserRuleCall_0_0; }

		//("," expression2+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditional_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentoperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAssignmentoperatorAssignment_operatorParserRuleCall_1_0_0 = (RuleCall)cAssignmentoperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	Conditional_expression (=> assignmentoperator=Assignment_operator expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//Conditional_expression (=> assignmentoperator=Assignment_operator expression=Expression)?
		public Group getGroup() { return cGroup; }

		//Conditional_expression
		public RuleCall getConditional_expressionParserRuleCall_0() { return cConditional_expressionParserRuleCall_0; }

		//(=> assignmentoperator=Assignment_operator expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> assignmentoperator=Assignment_operator
		public Assignment getAssignmentoperatorAssignment_1_0() { return cAssignmentoperatorAssignment_1_0; }

		//Assignment_operator
		public RuleCall getAssignmentoperatorAssignment_operatorParserRuleCall_1_0_0() { return cAssignmentoperatorAssignment_operatorParserRuleCall_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalorexpressionConditional_OR_expressionParserRuleCall_0_0 = (RuleCall)cConditionalorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression2Assignment_1_3.eContents().get(0);
		
		//Conditional_expression:
		//	conditionalorexpression=Conditional_OR_expression ("?" expression1=Expression ":" expression2=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//conditionalorexpression=Conditional_OR_expression ("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup() { return cGroup; }

		//conditionalorexpression=Conditional_OR_expression
		public Assignment getConditionalorexpressionAssignment_0() { return cConditionalorexpressionAssignment_0; }

		//Conditional_OR_expression
		public RuleCall getConditionalorexpressionConditional_OR_expressionParserRuleCall_0_0() { return cConditionalorexpressionConditional_OR_expressionParserRuleCall_0_0; }

		//("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression1=Expression
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_0() { return cExpression1ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression2=Expression
		public Assignment getExpression2Assignment_1_3() { return cExpression2Assignment_1_3; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_3_0() { return cExpression2ExpressionParserRuleCall_1_3_0; }
	}

	public class Conditional_OR_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional_OR_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalandexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalandexpressionConditional_AND_expressionParserRuleCall_0_0 = (RuleCall)cConditionalandexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionalandexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionalandexpressionConditional_AND_expressionParserRuleCall_1_1_0 = (RuleCall)cConditionalandexpressionAssignment_1_1.eContents().get(0);
		
		//Conditional_OR_expression:
		//	conditionalandexpression+=Conditional_AND_expression ("||" conditionalandexpression+=Conditional_AND_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//conditionalandexpression+=Conditional_AND_expression ("||" conditionalandexpression+=Conditional_AND_expression)*
		public Group getGroup() { return cGroup; }

		//conditionalandexpression+=Conditional_AND_expression
		public Assignment getConditionalandexpressionAssignment_0() { return cConditionalandexpressionAssignment_0; }

		//Conditional_AND_expression
		public RuleCall getConditionalandexpressionConditional_AND_expressionParserRuleCall_0_0() { return cConditionalandexpressionConditional_AND_expressionParserRuleCall_0_0; }

		//("||" conditionalandexpression+=Conditional_AND_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//conditionalandexpression+=Conditional_AND_expression
		public Assignment getConditionalandexpressionAssignment_1_1() { return cConditionalandexpressionAssignment_1_1; }

		//Conditional_AND_expression
		public RuleCall getConditionalandexpressionConditional_AND_expressionParserRuleCall_1_1_0() { return cConditionalandexpressionConditional_AND_expressionParserRuleCall_1_1_0; }
	}

	public class Conditional_AND_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional_AND_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInclusiveorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInclusiveorexpressionInclusive_OR_expressionParserRuleCall_0_0 = (RuleCall)cInclusiveorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInclusiveorexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInclusiveorexpressionInclusive_OR_expressionParserRuleCall_1_1_0 = (RuleCall)cInclusiveorexpressionAssignment_1_1.eContents().get(0);
		
		//Conditional_AND_expression:
		//	inclusiveorexpression+=Inclusive_OR_expression ("&&" inclusiveorexpression+=Inclusive_OR_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//inclusiveorexpression+=Inclusive_OR_expression ("&&" inclusiveorexpression+=Inclusive_OR_expression)*
		public Group getGroup() { return cGroup; }

		//inclusiveorexpression+=Inclusive_OR_expression
		public Assignment getInclusiveorexpressionAssignment_0() { return cInclusiveorexpressionAssignment_0; }

		//Inclusive_OR_expression
		public RuleCall getInclusiveorexpressionInclusive_OR_expressionParserRuleCall_0_0() { return cInclusiveorexpressionInclusive_OR_expressionParserRuleCall_0_0; }

		//("&&" inclusiveorexpression+=Inclusive_OR_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//inclusiveorexpression+=Inclusive_OR_expression
		public Assignment getInclusiveorexpressionAssignment_1_1() { return cInclusiveorexpressionAssignment_1_1; }

		//Inclusive_OR_expression
		public RuleCall getInclusiveorexpressionInclusive_OR_expressionParserRuleCall_1_1_0() { return cInclusiveorexpressionInclusive_OR_expressionParserRuleCall_1_1_0; }
	}

	public class Inclusive_OR_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inclusive_OR_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclusiveorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExclusiveorexpressionExclusive_OR_expressionParserRuleCall_0_0 = (RuleCall)cExclusiveorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExclusiveorexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExclusiveorexpressionExclusive_OR_expressionParserRuleCall_1_1_0 = (RuleCall)cExclusiveorexpressionAssignment_1_1.eContents().get(0);
		
		//Inclusive_OR_expression:
		//	exclusiveorexpression+=Exclusive_OR_expression ("|" exclusiveorexpression+=Exclusive_OR_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//exclusiveorexpression+=Exclusive_OR_expression ("|" exclusiveorexpression+=Exclusive_OR_expression)*
		public Group getGroup() { return cGroup; }

		//exclusiveorexpression+=Exclusive_OR_expression
		public Assignment getExclusiveorexpressionAssignment_0() { return cExclusiveorexpressionAssignment_0; }

		//Exclusive_OR_expression
		public RuleCall getExclusiveorexpressionExclusive_OR_expressionParserRuleCall_0_0() { return cExclusiveorexpressionExclusive_OR_expressionParserRuleCall_0_0; }

		//("|" exclusiveorexpression+=Exclusive_OR_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//exclusiveorexpression+=Exclusive_OR_expression
		public Assignment getExclusiveorexpressionAssignment_1_1() { return cExclusiveorexpressionAssignment_1_1; }

		//Exclusive_OR_expression
		public RuleCall getExclusiveorexpressionExclusive_OR_expressionParserRuleCall_1_1_0() { return cExclusiveorexpressionExclusive_OR_expressionParserRuleCall_1_1_0; }
	}

	public class Exclusive_OR_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exclusive_OR_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAndexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAndexpressionAND_expressionParserRuleCall_0_0 = (RuleCall)cAndexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndexpressionAND_expressionParserRuleCall_1_1_0 = (RuleCall)cAndexpressionAssignment_1_1.eContents().get(0);
		
		//Exclusive_OR_expression:
		//	andexpression+=AND_expression ("^" andexpression+=AND_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//andexpression+=AND_expression ("^" andexpression+=AND_expression)*
		public Group getGroup() { return cGroup; }

		//andexpression+=AND_expression
		public Assignment getAndexpressionAssignment_0() { return cAndexpressionAssignment_0; }

		//AND_expression
		public RuleCall getAndexpressionAND_expressionParserRuleCall_0_0() { return cAndexpressionAND_expressionParserRuleCall_0_0; }

		//("^" andexpression+=AND_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//andexpression+=AND_expression
		public Assignment getAndexpressionAssignment_1_1() { return cAndexpressionAssignment_1_1; }

		//AND_expression
		public RuleCall getAndexpressionAND_expressionParserRuleCall_1_1_0() { return cAndexpressionAND_expressionParserRuleCall_1_1_0; }
	}

	public class AND_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AND_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEqualityexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEqualityexpressionEquality_expressionParserRuleCall_0_0 = (RuleCall)cEqualityexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEqualityexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqualityexpressionEquality_expressionParserRuleCall_1_1_0 = (RuleCall)cEqualityexpressionAssignment_1_1.eContents().get(0);
		
		//AND_expression:
		//	equalityexpression+=Equality_expression ("&" equalityexpression+=Equality_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//equalityexpression+=Equality_expression ("&" equalityexpression+=Equality_expression)*
		public Group getGroup() { return cGroup; }

		//equalityexpression+=Equality_expression
		public Assignment getEqualityexpressionAssignment_0() { return cEqualityexpressionAssignment_0; }

		//Equality_expression
		public RuleCall getEqualityexpressionEquality_expressionParserRuleCall_0_0() { return cEqualityexpressionEquality_expressionParserRuleCall_0_0; }

		//("&" equalityexpression+=Equality_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//equalityexpression+=Equality_expression
		public Assignment getEqualityexpressionAssignment_1_1() { return cEqualityexpressionAssignment_1_1; }

		//Equality_expression
		public RuleCall getEqualityexpressionEquality_expressionParserRuleCall_1_1_0() { return cEqualityexpressionEquality_expressionParserRuleCall_1_1_0; }
	}

	public class Equality_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceofexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstanceofexpressionInstanceOf_expressionParserRuleCall_0_0 = (RuleCall)cInstanceofexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cInstanceofexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInstanceofexpressionInstanceOf_expressionParserRuleCall_1_1_0 = (RuleCall)cInstanceofexpressionAssignment_1_1.eContents().get(0);
		
		//Equality_expression:
		//	instanceofexpression+=InstanceOf_expression (("==" | "!=") instanceofexpression+=InstanceOf_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//instanceofexpression+=InstanceOf_expression (("==" | "!=") instanceofexpression+=InstanceOf_expression)*
		public Group getGroup() { return cGroup; }

		//instanceofexpression+=InstanceOf_expression
		public Assignment getInstanceofexpressionAssignment_0() { return cInstanceofexpressionAssignment_0; }

		//InstanceOf_expression
		public RuleCall getInstanceofexpressionInstanceOf_expressionParserRuleCall_0_0() { return cInstanceofexpressionInstanceOf_expressionParserRuleCall_0_0; }

		//(("==" | "!=") instanceofexpression+=InstanceOf_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//instanceofexpression+=InstanceOf_expression
		public Assignment getInstanceofexpressionAssignment_1_1() { return cInstanceofexpressionAssignment_1_1; }

		//InstanceOf_expression
		public RuleCall getInstanceofexpressionInstanceOf_expressionParserRuleCall_1_1_0() { return cInstanceofexpressionInstanceOf_expressionParserRuleCall_1_1_0; }
	}

	public class InstanceOf_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOf_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelational_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInstanceofKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//InstanceOf_expression:
		//	Relational_expression ("instanceof" type=Type)?;
		@Override public ParserRule getRule() { return rule; }

		//Relational_expression ("instanceof" type=Type)?
		public Group getGroup() { return cGroup; }

		//Relational_expression
		public RuleCall getRelational_expressionParserRuleCall_0() { return cRelational_expressionParserRuleCall_0; }

		//("instanceof" type=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0() { return cInstanceofKeyword_1_0; }

		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}

	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relational_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShiftexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShiftexpressionShift_expressionParserRuleCall_0_0 = (RuleCall)cShiftexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRelationalopAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationalopRelational_operatorParserRuleCall_1_0_0 = (RuleCall)cRelationalopAssignment_1_0.eContents().get(0);
		private final Assignment cShiftexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShiftexpressionShift_expressionParserRuleCall_1_1_0 = (RuleCall)cShiftexpressionAssignment_1_1.eContents().get(0);
		
		//Relational_expression:
		//	shiftexpression+=Shift_expression (relationalop+=Relational_operator shiftexpression+=Shift_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//shiftexpression+=Shift_expression (relationalop+=Relational_operator shiftexpression+=Shift_expression)*
		public Group getGroup() { return cGroup; }

		//shiftexpression+=Shift_expression
		public Assignment getShiftexpressionAssignment_0() { return cShiftexpressionAssignment_0; }

		//Shift_expression
		public RuleCall getShiftexpressionShift_expressionParserRuleCall_0_0() { return cShiftexpressionShift_expressionParserRuleCall_0_0; }

		//(relationalop+=Relational_operator shiftexpression+=Shift_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//relationalop+=Relational_operator
		public Assignment getRelationalopAssignment_1_0() { return cRelationalopAssignment_1_0; }

		//Relational_operator
		public RuleCall getRelationalopRelational_operatorParserRuleCall_1_0_0() { return cRelationalopRelational_operatorParserRuleCall_1_0_0; }

		//shiftexpression+=Shift_expression
		public Assignment getShiftexpressionAssignment_1_1() { return cShiftexpressionAssignment_1_1; }

		//Shift_expression
		public RuleCall getShiftexpressionShift_expressionParserRuleCall_1_1_0() { return cShiftexpressionShift_expressionParserRuleCall_1_1_0; }
	}

	public class Shift_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shift_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditiveexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditiveexpressionAdditive_expressionParserRuleCall_0_0 = (RuleCall)cAdditiveexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cShiftopAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cShiftopShift_operatorParserRuleCall_1_0_0 = (RuleCall)cShiftopAssignment_1_0.eContents().get(0);
		private final Assignment cAdditiveexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdditiveexpressionAdditive_expressionParserRuleCall_1_1_0 = (RuleCall)cAdditiveexpressionAssignment_1_1.eContents().get(0);
		
		//Shift_expression:
		//	additiveexpression+=Additive_expression (shiftop+=Shift_operator additiveexpression+=Additive_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//additiveexpression+=Additive_expression (shiftop+=Shift_operator additiveexpression+=Additive_expression)*
		public Group getGroup() { return cGroup; }

		//additiveexpression+=Additive_expression
		public Assignment getAdditiveexpressionAssignment_0() { return cAdditiveexpressionAssignment_0; }

		//Additive_expression
		public RuleCall getAdditiveexpressionAdditive_expressionParserRuleCall_0_0() { return cAdditiveexpressionAdditive_expressionParserRuleCall_0_0; }

		//(shiftop+=Shift_operator additiveexpression+=Additive_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//shiftop+=Shift_operator
		public Assignment getShiftopAssignment_1_0() { return cShiftopAssignment_1_0; }

		//Shift_operator
		public RuleCall getShiftopShift_operatorParserRuleCall_1_0_0() { return cShiftopShift_operatorParserRuleCall_1_0_0; }

		//additiveexpression+=Additive_expression
		public Assignment getAdditiveexpressionAssignment_1_1() { return cAdditiveexpressionAssignment_1_1; }

		//Additive_expression
		public RuleCall getAdditiveexpressionAdditive_expressionParserRuleCall_1_1_0() { return cAdditiveexpressionAdditive_expressionParserRuleCall_1_1_0; }
	}

	public class Additive_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Additive_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicativeexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicativeexpressionMultiplicative_expressionParserRuleCall_0_0 = (RuleCall)cMultiplicativeexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMultiplicativeexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicativeexpressionMultiplicative_expressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicativeexpressionAssignment_1_1.eContents().get(0);
		
		//Additive_expression:
		//	multiplicativeexpression+=Multiplicative_expression (("+" | "-")
		//	multiplicativeexpression+=Multiplicative_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//multiplicativeexpression+=Multiplicative_expression (("+" | "-") multiplicativeexpression+=Multiplicative_expression)*
		public Group getGroup() { return cGroup; }

		//multiplicativeexpression+=Multiplicative_expression
		public Assignment getMultiplicativeexpressionAssignment_0() { return cMultiplicativeexpressionAssignment_0; }

		//Multiplicative_expression
		public RuleCall getMultiplicativeexpressionMultiplicative_expressionParserRuleCall_0_0() { return cMultiplicativeexpressionMultiplicative_expressionParserRuleCall_0_0; }

		//(("+" | "-") multiplicativeexpression+=Multiplicative_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//multiplicativeexpression+=Multiplicative_expression
		public Assignment getMultiplicativeexpressionAssignment_1_1() { return cMultiplicativeexpressionAssignment_1_1; }

		//Multiplicative_expression
		public RuleCall getMultiplicativeexpressionMultiplicative_expressionParserRuleCall_1_1_0() { return cMultiplicativeexpressionMultiplicative_expressionParserRuleCall_1_1_0; }
	}

	public class Multiplicative_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicative_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryexpressionUnary_expressionParserRuleCall_0_0 = (RuleCall)cUnaryexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cUnaryexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryexpressionUnary_expressionParserRuleCall_1_1_0 = (RuleCall)cUnaryexpressionAssignment_1_1.eContents().get(0);
		
		//Multiplicative_expression:
		//	unaryexpression+=Unary_expression (("*" | "/" | "%") unaryexpression+=Unary_expression)*;
		@Override public ParserRule getRule() { return rule; }

		//unaryexpression+=Unary_expression (("*" | "/" | "%") unaryexpression+=Unary_expression)*
		public Group getGroup() { return cGroup; }

		//unaryexpression+=Unary_expression
		public Assignment getUnaryexpressionAssignment_0() { return cUnaryexpressionAssignment_0; }

		//Unary_expression
		public RuleCall getUnaryexpressionUnary_expressionParserRuleCall_0_0() { return cUnaryexpressionUnary_expressionParserRuleCall_0_0; }

		//(("*" | "/" | "%") unaryexpression+=Unary_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//unaryexpression+=Unary_expression
		public Assignment getUnaryexpressionAssignment_1_1() { return cUnaryexpressionAssignment_1_1; }

		//Unary_expression
		public RuleCall getUnaryexpressionUnary_expressionParserRuleCall_1_1_0() { return cUnaryexpressionUnary_expressionParserRuleCall_1_1_0; }
	}

	public class Unary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cUnary_expression_Not_Plus_MinusParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Unary_expression:
		//	"+" Unary_expression | "-" Unary_expression | "++" Unary_expression | "--" Unary_expression |
		//	Unary_expression_Not_Plus_Minus;
		@Override public ParserRule getRule() { return rule; }

		//"+" Unary_expression | "-" Unary_expression | "++" Unary_expression | "--" Unary_expression |
		//Unary_expression_Not_Plus_Minus
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" Unary_expression
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//Unary_expression
		public RuleCall getUnary_expressionParserRuleCall_0_1() { return cUnary_expressionParserRuleCall_0_1; }

		//"-" Unary_expression
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//Unary_expression
		public RuleCall getUnary_expressionParserRuleCall_1_1() { return cUnary_expressionParserRuleCall_1_1; }

		//"++" Unary_expression
		public Group getGroup_2() { return cGroup_2; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0() { return cPlusSignPlusSignKeyword_2_0; }

		//Unary_expression
		public RuleCall getUnary_expressionParserRuleCall_2_1() { return cUnary_expressionParserRuleCall_2_1; }

		//"--" Unary_expression
		public Group getGroup_3() { return cGroup_3; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3_0() { return cHyphenMinusHyphenMinusKeyword_3_0; }

		//Unary_expression
		public RuleCall getUnary_expressionParserRuleCall_3_1() { return cUnary_expressionParserRuleCall_3_1; }

		//Unary_expression_Not_Plus_Minus
		public RuleCall getUnary_expression_Not_Plus_MinusParserRuleCall_4() { return cUnary_expression_Not_Plus_MinusParserRuleCall_4; }
	}

	public class Unary_expression_Not_Plus_MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary_expression_Not_Plus_Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnary_expression_Not_Plus_MinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cUnaryexpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cUnaryexpressionUnary_expressionParserRuleCall_1_0_1_0 = (RuleCall)cUnaryexpressionAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cUnaryexpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cUnaryexpressionUnary_expressionParserRuleCall_1_1_1_0 = (RuleCall)cUnaryexpressionAssignment_1_1_1.eContents().get(0);
		private final Assignment cCastexpressionAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cCastexpressionCast_expressionParserRuleCall_1_2_0 = (RuleCall)cCastexpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cPrimaryAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cPrimaryPrimary_expressionParserRuleCall_1_3_0_0 = (RuleCall)cPrimaryAssignment_1_3_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_3_1_0 = (RuleCall)cSelectorAssignment_1_3_1.eContents().get(0);
		private final Alternatives cAlternatives_1_3_2 = (Alternatives)cGroup_1_3.eContents().get(2);
		private final Keyword cPlusSignPlusSignKeyword_1_3_2_0 = (Keyword)cAlternatives_1_3_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_3_2_1 = (Keyword)cAlternatives_1_3_2.eContents().get(1);
		
		//Unary_expression_Not_Plus_Minus:
		//	{Unary_expression_Not_Plus_Minus} ("~" unaryexpression=Unary_expression | "!" unaryexpression=Unary_expression |
		//	castexpression=Cast_expression | primary=Primary_expression selector+=Selector* ("++" | "--")?);
		@Override public ParserRule getRule() { return rule; }

		//{Unary_expression_Not_Plus_Minus} ("~" unaryexpression=Unary_expression | "!" unaryexpression=Unary_expression |
		//castexpression=Cast_expression | primary=Primary_expression selector+=Selector* ("++" | "--")?)
		public Group getGroup() { return cGroup; }

		//{Unary_expression_Not_Plus_Minus}
		public Action getUnary_expression_Not_Plus_MinusAction_0() { return cUnary_expression_Not_Plus_MinusAction_0; }

		//"~" unaryexpression=Unary_expression | "!" unaryexpression=Unary_expression | castexpression=Cast_expression |
		//primary=Primary_expression selector+=Selector* ("++" | "--")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"~" unaryexpression=Unary_expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"~"
		public Keyword getTildeKeyword_1_0_0() { return cTildeKeyword_1_0_0; }

		//unaryexpression=Unary_expression
		public Assignment getUnaryexpressionAssignment_1_0_1() { return cUnaryexpressionAssignment_1_0_1; }

		//Unary_expression
		public RuleCall getUnaryexpressionUnary_expressionParserRuleCall_1_0_1_0() { return cUnaryexpressionUnary_expressionParserRuleCall_1_0_1_0; }

		//"!" unaryexpression=Unary_expression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_0() { return cExclamationMarkKeyword_1_1_0; }

		//unaryexpression=Unary_expression
		public Assignment getUnaryexpressionAssignment_1_1_1() { return cUnaryexpressionAssignment_1_1_1; }

		//Unary_expression
		public RuleCall getUnaryexpressionUnary_expressionParserRuleCall_1_1_1_0() { return cUnaryexpressionUnary_expressionParserRuleCall_1_1_1_0; }

		//castexpression=Cast_expression
		public Assignment getCastexpressionAssignment_1_2() { return cCastexpressionAssignment_1_2; }

		//Cast_expression
		public RuleCall getCastexpressionCast_expressionParserRuleCall_1_2_0() { return cCastexpressionCast_expressionParserRuleCall_1_2_0; }

		//primary=Primary_expression selector+=Selector* ("++" | "--")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//primary=Primary_expression
		public Assignment getPrimaryAssignment_1_3_0() { return cPrimaryAssignment_1_3_0; }

		//Primary_expression
		public RuleCall getPrimaryPrimary_expressionParserRuleCall_1_3_0_0() { return cPrimaryPrimary_expressionParserRuleCall_1_3_0_0; }

		//selector+=Selector*
		public Assignment getSelectorAssignment_1_3_1() { return cSelectorAssignment_1_3_1; }

		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_3_1_0() { return cSelectorSelectorParserRuleCall_1_3_1_0; }

		//("++" | "--")?
		public Alternatives getAlternatives_1_3_2() { return cAlternatives_1_3_2; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_3_2_0() { return cPlusSignPlusSignKeyword_1_3_2_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_3_2_1() { return cHyphenMinusHyphenMinusKeyword_1_3_2_1; }
	}

	public class Cast_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCast_expressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLparentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLparentLPARENTerminalRuleCall_0_1_0 = (RuleCall)cLparentAssignment_0_1.eContents().get(0);
		private final Assignment cPrimitivetypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPrimitivetypePrimitive_typeParserRuleCall_0_2_0 = (RuleCall)cPrimitivetypeAssignment_0_2.eContents().get(0);
		private final Assignment cRparentAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRparentRPARENTerminalRuleCall_0_3_0 = (RuleCall)cRparentAssignment_0_3.eContents().get(0);
		private final Assignment cUnaryexpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cUnaryexpressionUnary_expressionParserRuleCall_0_4_0 = (RuleCall)cUnaryexpressionAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLparentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLparentLPARENTerminalRuleCall_1_0_0 = (RuleCall)cLparentAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		private final Assignment cRparentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRparentRPARENTerminalRuleCall_1_2_0 = (RuleCall)cRparentAssignment_1_2.eContents().get(0);
		private final Assignment cUnaryexpressionnotplusminusAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cUnaryexpressionnotplusminusUnary_expression_Not_Plus_MinusParserRuleCall_1_3_0 = (RuleCall)cUnaryexpressionnotplusminusAssignment_1_3.eContents().get(0);
		
		//Cast_expression:
		//	{Cast_expression} lparent=LPAREN primitivetype=Primitive_type rparent=RPAREN unaryexpression=Unary_expression |
		//	lparent=LPAREN (type=Type | expression=Expression) rparent=RPAREN
		//	unaryexpressionnotplusminus=Unary_expression_Not_Plus_Minus;
		@Override public ParserRule getRule() { return rule; }

		//{Cast_expression} lparent=LPAREN primitivetype=Primitive_type rparent=RPAREN unaryexpression=Unary_expression |
		//lparent=LPAREN (type=Type | expression=Expression) rparent=RPAREN
		//unaryexpressionnotplusminus=Unary_expression_Not_Plus_Minus
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Cast_expression} lparent=LPAREN primitivetype=Primitive_type rparent=RPAREN unaryexpression=Unary_expression
		public Group getGroup_0() { return cGroup_0; }

		//{Cast_expression}
		public Action getCast_expressionAction_0_0() { return cCast_expressionAction_0_0; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_0_1() { return cLparentAssignment_0_1; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_0_1_0() { return cLparentLPARENTerminalRuleCall_0_1_0; }

		//primitivetype=Primitive_type
		public Assignment getPrimitivetypeAssignment_0_2() { return cPrimitivetypeAssignment_0_2; }

		//Primitive_type
		public RuleCall getPrimitivetypePrimitive_typeParserRuleCall_0_2_0() { return cPrimitivetypePrimitive_typeParserRuleCall_0_2_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_0_3() { return cRparentAssignment_0_3; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_0_3_0() { return cRparentRPARENTerminalRuleCall_0_3_0; }

		//unaryexpression=Unary_expression
		public Assignment getUnaryexpressionAssignment_0_4() { return cUnaryexpressionAssignment_0_4; }

		//Unary_expression
		public RuleCall getUnaryexpressionUnary_expressionParserRuleCall_0_4_0() { return cUnaryexpressionUnary_expressionParserRuleCall_0_4_0; }

		//lparent=LPAREN (type=Type | expression=Expression) rparent=RPAREN
		//unaryexpressionnotplusminus=Unary_expression_Not_Plus_Minus
		public Group getGroup_1() { return cGroup_1; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_1_0() { return cLparentAssignment_1_0; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_1_0_0() { return cLparentLPARENTerminalRuleCall_1_0_0; }

		//type=Type | expression=Expression
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//type=Type
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0_0() { return cTypeTypeParserRuleCall_1_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_1_2() { return cRparentAssignment_1_2; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_1_2_0() { return cRparentRPARENTerminalRuleCall_1_2_0; }

		//unaryexpressionnotplusminus=Unary_expression_Not_Plus_Minus
		public Assignment getUnaryexpressionnotplusminusAssignment_1_3() { return cUnaryexpressionnotplusminusAssignment_1_3; }

		//Unary_expression_Not_Plus_Minus
		public RuleCall getUnaryexpressionnotplusminusUnary_expression_Not_Plus_MinusParserRuleCall_1_3_0() { return cUnaryexpressionnotplusminusUnary_expression_Not_Plus_MinusParserRuleCall_1_3_0; }
	}

	public class Primary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimary_expressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cParexpressionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cParexpressionParens_expressionParserRuleCall_1_0_0 = (RuleCall)cParexpressionAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cThisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_1_1_0 = (RuleCall)cIdentifierAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cIdentifiersuffixAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIdentifiersuffixIdentifier_suffixParserRuleCall_1_1_2_0 = (RuleCall)cIdentifiersuffixAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cSuperKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSupersuffixAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSupersuffixSuper_suffixParserRuleCall_1_2_1_0 = (RuleCall)cSupersuffixAssignment_1_2_1.eContents().get(0);
		private final Assignment cLiteralAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cLiteralLiteralParserRuleCall_1_3_0 = (RuleCall)cLiteralAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cNewKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cCreatorAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cCreatorCreatorParserRuleCall_1_4_1_0 = (RuleCall)cCreatorAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cIdentifierAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_5_0_0 = (RuleCall)cIdentifierAssignment_1_5_0.eContents().get(0);
		private final Group cGroup_1_5_1 = (Group)cGroup_1_5.eContents().get(1);
		private final Keyword cFullStopKeyword_1_5_1_0 = (Keyword)cGroup_1_5_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_5_1_1 = (Assignment)cGroup_1_5_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_5_1_1_0 = (RuleCall)cIdentifierAssignment_1_5_1_1.eContents().get(0);
		private final Assignment cIdentifiersuffixAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cIdentifiersuffixIdentifier_suffixParserRuleCall_1_5_2_0 = (RuleCall)cIdentifiersuffixAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Assignment cPrimitivetypeAssignment_1_6_0 = (Assignment)cGroup_1_6.eContents().get(0);
		private final RuleCall cPrimitivetypePrimitive_typeParserRuleCall_1_6_0_0 = (RuleCall)cPrimitivetypeAssignment_1_6_0.eContents().get(0);
		private final Group cGroup_1_6_1 = (Group)cGroup_1_6.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_6_1_0 = (Keyword)cGroup_1_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_6_1_1 = (Keyword)cGroup_1_6_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final Keyword cClassKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Keyword cVoidKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Keyword cFullStopKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Keyword cClassKeyword_1_7_2 = (Keyword)cGroup_1_7.eContents().get(2);
		
		//Primary_expression:
		//	{Primary_expression} (parexpression=Parens_expression | "this" ("." identifier+=ID)* =>
		//	identifiersuffix=Identifier_suffix? | "super" supersuffix=Super_suffix | literal=Literal | "new" creator=Creator |
		//	identifier+=ID ("." identifier+=ID)* => identifiersuffix=Identifier_suffix? | primitivetype=Primitive_type ("[" "]")*
		//	"." "class" | "void" "." "class");
		@Override public ParserRule getRule() { return rule; }

		//{Primary_expression} (parexpression=Parens_expression | "this" ("." identifier+=ID)* =>
		//identifiersuffix=Identifier_suffix? | "super" supersuffix=Super_suffix | literal=Literal | "new" creator=Creator |
		//identifier+=ID ("." identifier+=ID)* => identifiersuffix=Identifier_suffix? | primitivetype=Primitive_type ("[" "]")*
		//"." "class" | "void" "." "class")
		public Group getGroup() { return cGroup; }

		//{Primary_expression}
		public Action getPrimary_expressionAction_0() { return cPrimary_expressionAction_0; }

		//parexpression=Parens_expression | "this" ("." identifier+=ID)* => identifiersuffix=Identifier_suffix? | "super"
		//supersuffix=Super_suffix | literal=Literal | "new" creator=Creator | identifier+=ID ("." identifier+=ID)* =>
		//identifiersuffix=Identifier_suffix? | primitivetype=Primitive_type ("[" "]")* "." "class" | "void" "." "class"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//parexpression=Parens_expression
		public Assignment getParexpressionAssignment_1_0() { return cParexpressionAssignment_1_0; }

		//Parens_expression
		public RuleCall getParexpressionParens_expressionParserRuleCall_1_0_0() { return cParexpressionParens_expressionParserRuleCall_1_0_0; }

		//"this" ("." identifier+=ID)* => identifiersuffix=Identifier_suffix?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"this"
		public Keyword getThisKeyword_1_1_0() { return cThisKeyword_1_1_0; }

		//("." identifier+=ID)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_1_0() { return cFullStopKeyword_1_1_1_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_1_1_1() { return cIdentifierAssignment_1_1_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_1_1_0; }

		//=> identifiersuffix=Identifier_suffix?
		public Assignment getIdentifiersuffixAssignment_1_1_2() { return cIdentifiersuffixAssignment_1_1_2; }

		//Identifier_suffix
		public RuleCall getIdentifiersuffixIdentifier_suffixParserRuleCall_1_1_2_0() { return cIdentifiersuffixIdentifier_suffixParserRuleCall_1_1_2_0; }

		//"super" supersuffix=Super_suffix
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"super"
		public Keyword getSuperKeyword_1_2_0() { return cSuperKeyword_1_2_0; }

		//supersuffix=Super_suffix
		public Assignment getSupersuffixAssignment_1_2_1() { return cSupersuffixAssignment_1_2_1; }

		//Super_suffix
		public RuleCall getSupersuffixSuper_suffixParserRuleCall_1_2_1_0() { return cSupersuffixSuper_suffixParserRuleCall_1_2_1_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_1_3() { return cLiteralAssignment_1_3; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_3_0() { return cLiteralLiteralParserRuleCall_1_3_0; }

		//"new" creator=Creator
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"new"
		public Keyword getNewKeyword_1_4_0() { return cNewKeyword_1_4_0; }

		//creator=Creator
		public Assignment getCreatorAssignment_1_4_1() { return cCreatorAssignment_1_4_1; }

		//Creator
		public RuleCall getCreatorCreatorParserRuleCall_1_4_1_0() { return cCreatorCreatorParserRuleCall_1_4_1_0; }

		//identifier+=ID ("." identifier+=ID)* => identifiersuffix=Identifier_suffix?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_5_0() { return cIdentifierAssignment_1_5_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_5_0_0() { return cIdentifierIDTerminalRuleCall_1_5_0_0; }

		//("." identifier+=ID)*
		public Group getGroup_1_5_1() { return cGroup_1_5_1; }

		//"."
		public Keyword getFullStopKeyword_1_5_1_0() { return cFullStopKeyword_1_5_1_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_5_1_1() { return cIdentifierAssignment_1_5_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_5_1_1_0() { return cIdentifierIDTerminalRuleCall_1_5_1_1_0; }

		//=> identifiersuffix=Identifier_suffix?
		public Assignment getIdentifiersuffixAssignment_1_5_2() { return cIdentifiersuffixAssignment_1_5_2; }

		//Identifier_suffix
		public RuleCall getIdentifiersuffixIdentifier_suffixParserRuleCall_1_5_2_0() { return cIdentifiersuffixIdentifier_suffixParserRuleCall_1_5_2_0; }

		//primitivetype=Primitive_type ("[" "]")* "." "class"
		public Group getGroup_1_6() { return cGroup_1_6; }

		//primitivetype=Primitive_type
		public Assignment getPrimitivetypeAssignment_1_6_0() { return cPrimitivetypeAssignment_1_6_0; }

		//Primitive_type
		public RuleCall getPrimitivetypePrimitive_typeParserRuleCall_1_6_0_0() { return cPrimitivetypePrimitive_typeParserRuleCall_1_6_0_0; }

		//("[" "]")*
		public Group getGroup_1_6_1() { return cGroup_1_6_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_6_1_0() { return cLeftSquareBracketKeyword_1_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_6_1_1() { return cRightSquareBracketKeyword_1_6_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_6_2() { return cFullStopKeyword_1_6_2; }

		//"class"
		public Keyword getClassKeyword_1_6_3() { return cClassKeyword_1_6_3; }

		//"void" "." "class"
		public Group getGroup_1_7() { return cGroup_1_7; }

		//"void"
		public Keyword getVoidKeyword_1_7_0() { return cVoidKeyword_1_7_0; }

		//"."
		public Keyword getFullStopKeyword_1_7_1() { return cFullStopKeyword_1_7_1; }

		//"class"
		public Keyword getClassKeyword_1_7_2() { return cClassKeyword_1_7_2; }
	}

	public class Identifier_suffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier_suffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifier_suffixAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cClassKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cClassKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFullStopKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cExplicitgenericinvocationAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExplicitgenericinvocationExplicit_generic_invocationParserRuleCall_1_3_1_0 = (RuleCall)cExplicitgenericinvocationAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cThisKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cFullStopKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Keyword cSuperKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_5_2_0 = (RuleCall)cArgumentsAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Keyword cFullStopKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cNewKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cInnercreatorAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cInnercreatorInner_creatorParserRuleCall_1_6_2_0 = (RuleCall)cInnercreatorAssignment_1_6_2.eContents().get(0);
		
		//Identifier_suffix:
		//	{Identifier_suffix} (("[" "]")+ "." "class" //	| ('[' expression += Expression ']')+ // can also be matched by selector, but do here
		//	| arguments=Arguments | "." "class" | "." explicitgenericinvocation=Explicit_generic_invocation | "." "this" | "."
		//	"super" arguments=Arguments | "." "new" innercreator=Inner_creator);
		@Override public ParserRule getRule() { return rule; }

		//{Identifier_suffix} (("[" "]")+ "." "class" //	| ('[' expression += Expression ']')+ // can also be matched by selector, but do here
		//| arguments=Arguments | "." "class" | "." explicitgenericinvocation=Explicit_generic_invocation | "." "this" | "."
		//"super" arguments=Arguments | "." "new" innercreator=Inner_creator)
		public Group getGroup() { return cGroup; }

		//{Identifier_suffix}
		public Action getIdentifier_suffixAction_0() { return cIdentifier_suffixAction_0; }

		//("[" "]")+ "." "class" //	| ('[' expression += Expression ']')+ // can also be matched by selector, but do here
		//| arguments=Arguments | "." "class" | "." explicitgenericinvocation=Explicit_generic_invocation | "." "this" | "."
		//"super" arguments=Arguments | "." "new" innercreator=Inner_creator
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//("[" "]")+ "." "class"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//("[" "]")+
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0_0() { return cLeftSquareBracketKeyword_1_0_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0_1() { return cRightSquareBracketKeyword_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//"class"
		public Keyword getClassKeyword_1_0_2() { return cClassKeyword_1_0_2; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_1_0() { return cArgumentsArgumentsParserRuleCall_1_1_0; }

		//"." "class"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//"class"
		public Keyword getClassKeyword_1_2_1() { return cClassKeyword_1_2_1; }

		//"." explicitgenericinvocation=Explicit_generic_invocation
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"."
		public Keyword getFullStopKeyword_1_3_0() { return cFullStopKeyword_1_3_0; }

		//explicitgenericinvocation=Explicit_generic_invocation
		public Assignment getExplicitgenericinvocationAssignment_1_3_1() { return cExplicitgenericinvocationAssignment_1_3_1; }

		//Explicit_generic_invocation
		public RuleCall getExplicitgenericinvocationExplicit_generic_invocationParserRuleCall_1_3_1_0() { return cExplicitgenericinvocationExplicit_generic_invocationParserRuleCall_1_3_1_0; }

		//"." "this"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"."
		public Keyword getFullStopKeyword_1_4_0() { return cFullStopKeyword_1_4_0; }

		//"this"
		public Keyword getThisKeyword_1_4_1() { return cThisKeyword_1_4_1; }

		//"." "super" arguments=Arguments
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"."
		public Keyword getFullStopKeyword_1_5_0() { return cFullStopKeyword_1_5_0; }

		//"super"
		public Keyword getSuperKeyword_1_5_1() { return cSuperKeyword_1_5_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_5_2() { return cArgumentsAssignment_1_5_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_5_2_0() { return cArgumentsArgumentsParserRuleCall_1_5_2_0; }

		//"." "new" innercreator=Inner_creator
		public Group getGroup_1_6() { return cGroup_1_6; }

		//"."
		public Keyword getFullStopKeyword_1_6_0() { return cFullStopKeyword_1_6_0; }

		//"new"
		public Keyword getNewKeyword_1_6_1() { return cNewKeyword_1_6_1; }

		//innercreator=Inner_creator
		public Assignment getInnercreatorAssignment_1_6_2() { return cInnercreatorAssignment_1_6_2; }

		//Inner_creator
		public RuleCall getInnercreatorInner_creatorParserRuleCall_1_6_2_0() { return cInnercreatorInner_creatorParserRuleCall_1_6_2_0; }
	}

	public class CreatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Creator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNon_wildcard_type_argumentsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cCreatednameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCreatednameCreated_nameParserRuleCall_0_1_0 = (RuleCall)cCreatednameAssignment_0_1.eContents().get(0);
		private final Assignment cClasscreatorrestAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cClasscreatorrestClass_creator_restParserRuleCall_0_2_0 = (RuleCall)cClasscreatorrestAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCreated_nameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cArraycreatorrestAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cArraycreatorrestArray_creator_restParserRuleCall_1_1_0_0 = (RuleCall)cArraycreatorrestAssignment_1_1_0.eContents().get(0);
		private final Assignment cClasscreatorrestAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cClasscreatorrestClass_creator_restParserRuleCall_1_1_1_0 = (RuleCall)cClasscreatorrestAssignment_1_1_1.eContents().get(0);
		
		//Creator:
		//	Non_wildcard_type_arguments createdname=Created_name classcreatorrest=Class_creator_rest | Created_name
		//	(arraycreatorrest=Array_creator_rest | classcreatorrest=Class_creator_rest);
		@Override public ParserRule getRule() { return rule; }

		//Non_wildcard_type_arguments createdname=Created_name classcreatorrest=Class_creator_rest | Created_name
		//(arraycreatorrest=Array_creator_rest | classcreatorrest=Class_creator_rest)
		public Alternatives getAlternatives() { return cAlternatives; }

		//Non_wildcard_type_arguments createdname=Created_name classcreatorrest=Class_creator_rest
		public Group getGroup_0() { return cGroup_0; }

		//Non_wildcard_type_arguments
		public RuleCall getNon_wildcard_type_argumentsParserRuleCall_0_0() { return cNon_wildcard_type_argumentsParserRuleCall_0_0; }

		//createdname=Created_name
		public Assignment getCreatednameAssignment_0_1() { return cCreatednameAssignment_0_1; }

		//Created_name
		public RuleCall getCreatednameCreated_nameParserRuleCall_0_1_0() { return cCreatednameCreated_nameParserRuleCall_0_1_0; }

		//classcreatorrest=Class_creator_rest
		public Assignment getClasscreatorrestAssignment_0_2() { return cClasscreatorrestAssignment_0_2; }

		//Class_creator_rest
		public RuleCall getClasscreatorrestClass_creator_restParserRuleCall_0_2_0() { return cClasscreatorrestClass_creator_restParserRuleCall_0_2_0; }

		//Created_name (arraycreatorrest=Array_creator_rest | classcreatorrest=Class_creator_rest)
		public Group getGroup_1() { return cGroup_1; }

		//Created_name
		public RuleCall getCreated_nameParserRuleCall_1_0() { return cCreated_nameParserRuleCall_1_0; }

		//arraycreatorrest=Array_creator_rest | classcreatorrest=Class_creator_rest
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//arraycreatorrest=Array_creator_rest
		public Assignment getArraycreatorrestAssignment_1_1_0() { return cArraycreatorrestAssignment_1_1_0; }

		//Array_creator_rest
		public RuleCall getArraycreatorrestArray_creator_restParserRuleCall_1_1_0_0() { return cArraycreatorrestArray_creator_restParserRuleCall_1_1_0_0; }

		//classcreatorrest=Class_creator_rest
		public Assignment getClasscreatorrestAssignment_1_1_1() { return cClasscreatorrestAssignment_1_1_1; }

		//Class_creator_rest
		public RuleCall getClasscreatorrestClass_creator_restParserRuleCall_1_1_1_0() { return cClasscreatorrestClass_creator_restParserRuleCall_1_1_1_0; }
	}

	public class Created_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Created_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreated_nameAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassorinterfacetypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassorinterfacetypeClass_declarationParserRuleCall_1_0_0 = (RuleCall)cClassorinterfacetypeAssignment_1_0.eContents().get(0);
		private final Assignment cPrimitivetypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPrimitivetypePrimitive_typeParserRuleCall_1_1_0 = (RuleCall)cPrimitivetypeAssignment_1_1.eContents().get(0);
		
		//Created_name:
		//	{Created_name} (classorinterfacetype=Class_declaration | primitivetype=Primitive_type);
		@Override public ParserRule getRule() { return rule; }

		//{Created_name} (classorinterfacetype=Class_declaration | primitivetype=Primitive_type)
		public Group getGroup() { return cGroup; }

		//{Created_name}
		public Action getCreated_nameAction_0() { return cCreated_nameAction_0; }

		//classorinterfacetype=Class_declaration | primitivetype=Primitive_type
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//classorinterfacetype=Class_declaration
		public Assignment getClassorinterfacetypeAssignment_1_0() { return cClassorinterfacetypeAssignment_1_0; }

		//Class_declaration
		public RuleCall getClassorinterfacetypeClass_declarationParserRuleCall_1_0_0() { return cClassorinterfacetypeClass_declarationParserRuleCall_1_0_0; }

		//primitivetype=Primitive_type
		public Assignment getPrimitivetypeAssignment_1_1() { return cPrimitivetypeAssignment_1_1; }

		//Primitive_type
		public RuleCall getPrimitivetypePrimitive_typeParserRuleCall_1_1_0() { return cPrimitivetypePrimitive_typeParserRuleCall_1_1_0; }
	}

	public class Inner_creatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inner_creator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNonwildcardtypeargumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0 = (RuleCall)cNonwildcardtypeargumentsAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cClasscreatorrestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClasscreatorrestClass_creator_restParserRuleCall_2_0 = (RuleCall)cClasscreatorrestAssignment_2.eContents().get(0);
		
		//Inner_creator:
		//	nonwildcardtypearguments=Non_wildcard_type_arguments? identifier=ID classcreatorrest=Class_creator_rest;
		@Override public ParserRule getRule() { return rule; }

		//nonwildcardtypearguments=Non_wildcard_type_arguments? identifier=ID classcreatorrest=Class_creator_rest
		public Group getGroup() { return cGroup; }

		//nonwildcardtypearguments=Non_wildcard_type_arguments?
		public Assignment getNonwildcardtypeargumentsAssignment_0() { return cNonwildcardtypeargumentsAssignment_0; }

		//Non_wildcard_type_arguments
		public RuleCall getNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0() { return cNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//classcreatorrest=Class_creator_rest
		public Assignment getClasscreatorrestAssignment_2() { return cClasscreatorrestAssignment_2; }

		//Class_creator_rest
		public RuleCall getClasscreatorrestClass_creator_restParserRuleCall_2_0() { return cClasscreatorrestClass_creator_restParserRuleCall_2_0; }
	}

	public class Array_creator_restElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array_creator_rest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cArray_initializerParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionAssignment_1_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3_1 = (Keyword)cGroup_1_1_3.eContents().get(1);
		
		//Array_creator_rest:
		//	"[" ("]" ("[" "]")* Array_initializer | expression+=Expression "]" ("[" expression+=Expression "]")* ("[" "]")*);
		@Override public ParserRule getRule() { return rule; }

		//"[" ("]" ("[" "]")* Array_initializer | expression+=Expression "]" ("[" expression+=Expression "]")* ("[" "]")*)
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"]" ("[" "]")* Array_initializer | expression+=Expression "]" ("[" expression+=Expression "]")* ("[" "]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"]" ("[" "]")* Array_initializer
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0() { return cRightSquareBracketKeyword_1_0_0; }

		//("[" "]")*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_1_0() { return cLeftSquareBracketKeyword_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_1_1() { return cRightSquareBracketKeyword_1_0_1_1; }

		//Array_initializer
		public RuleCall getArray_initializerParserRuleCall_1_0_2() { return cArray_initializerParserRuleCall_1_0_2; }

		//expression+=Expression "]" ("[" expression+=Expression "]")* ("[" "]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expression+=Expression
		public Assignment getExpressionAssignment_1_1_0() { return cExpressionAssignment_1_1_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0_0() { return cExpressionExpressionParserRuleCall_1_1_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1() { return cRightSquareBracketKeyword_1_1_1; }

		//(=> "[" expression+=Expression "]")*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }

		//expression+=Expression
		public Assignment getExpressionAssignment_1_1_2_1() { return cExpressionAssignment_1_1_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_2() { return cRightSquareBracketKeyword_1_1_2_2; }

		//("[" "]")*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_3_0() { return cLeftSquareBracketKeyword_1_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3_1() { return cRightSquareBracketKeyword_1_1_3_1; }
	}

	public class Class_creator_restElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_creator_rest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentsParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Assignment cClassbodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassbodyClass_declarationParserRuleCall_1_0 = (RuleCall)cClassbodyAssignment_1.eContents().get(0);
		
		//Class_creator_rest:
		//	arguments=Arguments classbody=Class_declaration?;
		@Override public ParserRule getRule() { return rule; }

		//arguments=Arguments classbody=Class_declaration?
		public Group getGroup() { return cGroup; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_0_0() { return cArgumentsArgumentsParserRuleCall_0_0; }

		//classbody=Class_declaration?
		public Assignment getClassbodyAssignment_1() { return cClassbodyAssignment_1; }

		//Class_declaration
		public RuleCall getClassbodyClass_declarationParserRuleCall_1_0() { return cClassbodyClass_declarationParserRuleCall_1_0; }
	}

	public class Explicit_generic_invocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Explicit_generic_invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNonwildcardtypeargumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0 = (RuleCall)cNonwildcardtypeargumentsAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		
		//Explicit_generic_invocation:
		//	nonwildcardtypearguments=Non_wildcard_type_arguments identifier=ID arguments=Arguments;
		@Override public ParserRule getRule() { return rule; }

		//nonwildcardtypearguments=Non_wildcard_type_arguments identifier=ID arguments=Arguments
		public Group getGroup() { return cGroup; }

		//nonwildcardtypearguments=Non_wildcard_type_arguments
		public Assignment getNonwildcardtypeargumentsAssignment_0() { return cNonwildcardtypeargumentsAssignment_0; }

		//Non_wildcard_type_arguments
		public RuleCall getNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0() { return cNonwildcardtypeargumentsNon_wildcard_type_argumentsParserRuleCall_0_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }
	}

	public class Non_wildcard_type_argumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Non_wildcard_type_arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Non_wildcard_type_arguments:
		//	"<" type=Type ">";
		@Override public ParserRule getRule() { return rule; }

		//"<" type=Type ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cSuperKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSupersuffixAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSupersuffixSuper_suffixParserRuleCall_1_0_2_0 = (RuleCall)cSupersuffixAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cNewKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cInnercreatorAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cInnercreatorInner_creatorParserRuleCall_1_1_2_0 = (RuleCall)cInnercreatorAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExpressionAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//Selector:
		//	{Selector} //	'.' identifier = Identifier arguments = Arguments? | 
		//	//	'.' 'this' | 
		//	("." "super" supersuffix=Super_suffix | "." "new" innercreator=Inner_creator | "[" expression=Expression "]");
		@Override public ParserRule getRule() { return rule; }

		//{Selector} //	'.' identifier = Identifier arguments = Arguments? | 
		////	'.' 'this' | 
		//("." "super" supersuffix=Super_suffix | "." "new" innercreator=Inner_creator | "[" expression=Expression "]")
		public Group getGroup() { return cGroup; }

		//{Selector}
		public Action getSelectorAction_0() { return cSelectorAction_0; }

		////	'.' identifier = Identifier arguments = Arguments? | 
		////	'.' 'this' | 
		//"." "super" supersuffix=Super_suffix | "." "new" innercreator=Inner_creator | "[" expression=Expression "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		////	'.' identifier = Identifier arguments = Arguments? | 
		////	'.' 'this' | 
		//"." "super" supersuffix=Super_suffix
		public Group getGroup_1_0() { return cGroup_1_0; }

		////	'.' identifier = Identifier arguments = Arguments? | 
		////	'.' 'this' | 
		//"."
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }

		//"super"
		public Keyword getSuperKeyword_1_0_1() { return cSuperKeyword_1_0_1; }

		//supersuffix=Super_suffix
		public Assignment getSupersuffixAssignment_1_0_2() { return cSupersuffixAssignment_1_0_2; }

		//Super_suffix
		public RuleCall getSupersuffixSuper_suffixParserRuleCall_1_0_2_0() { return cSupersuffixSuper_suffixParserRuleCall_1_0_2_0; }

		//"." "new" innercreator=Inner_creator
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//"new"
		public Keyword getNewKeyword_1_1_1() { return cNewKeyword_1_1_1; }

		//innercreator=Inner_creator
		public Assignment getInnercreatorAssignment_1_1_2() { return cInnercreatorAssignment_1_1_2; }

		//Inner_creator
		public RuleCall getInnercreatorInner_creatorParserRuleCall_1_1_2_0() { return cInnercreatorInner_creatorParserRuleCall_1_1_2_0; }

		//"[" expression=Expression "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2_1() { return cExpressionAssignment_1_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}

	public class Super_suffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Super_suffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuper_suffixAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_1_0 = (RuleCall)cIdentifierAssignment_1_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_1_2_0 = (RuleCall)cArgumentsAssignment_1_1_2.eContents().get(0);
		
		//Super_suffix:
		//	{Super_suffix} (arguments=Arguments | "." identifier=ID arguments=Arguments?);
		@Override public ParserRule getRule() { return rule; }

		//{Super_suffix} (arguments=Arguments | "." identifier=ID arguments=Arguments?)
		public Group getGroup() { return cGroup; }

		//{Super_suffix}
		public Action getSuper_suffixAction_0() { return cSuper_suffixAction_0; }

		//arguments=Arguments | "." identifier=ID arguments=Arguments?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_0_0() { return cArgumentsArgumentsParserRuleCall_1_0_0; }

		//"." identifier=ID arguments=Arguments?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1_1_1() { return cIdentifierAssignment_1_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_1_0; }

		//arguments=Arguments?
		public Assignment getArgumentsAssignment_1_1_2() { return cArgumentsAssignment_1_1_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_1_2_0() { return cArgumentsArgumentsParserRuleCall_1_1_2_0; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLparentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLparentLPARENTerminalRuleCall_1_0 = (RuleCall)cLparentAssignment_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpression_listParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		private final Assignment cRparentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRparentRPARENTerminalRuleCall_3_0 = (RuleCall)cRparentAssignment_3.eContents().get(0);
		
		//Arguments:
		//	{Arguments} lparent=LPAREN expressionlist=Expression_list? rparent=RPAREN;
		@Override public ParserRule getRule() { return rule; }

		//{Arguments} lparent=LPAREN expressionlist=Expression_list? rparent=RPAREN
		public Group getGroup() { return cGroup; }

		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_1() { return cLparentAssignment_1; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_1_0() { return cLparentLPARENTerminalRuleCall_1_0; }

		//expressionlist=Expression_list?
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }

		//Expression_list
		public RuleCall getExpressionlistExpression_listParserRuleCall_2_0() { return cExpressionlistExpression_listParserRuleCall_2_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_3() { return cRparentAssignment_3; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_3_0() { return cRparentRPARENTerminalRuleCall_3_0; }
	}

	public class Switch_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitch_statementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLParenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLParenLPARENTerminalRuleCall_2_0 = (RuleCall)cLParenAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Assignment cRparentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRparentRPARENTerminalRuleCall_4_0 = (RuleCall)cRparentAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cCaseKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cExpression2Assignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_6_0_1_0 = (RuleCall)cExpression2Assignment_6_0_1.eContents().get(0);
		private final Keyword cColonKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cDefaultKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cSwitchStatementsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cSwitchStatementsStatementParserRuleCall_6_2_0 = (RuleCall)cSwitchStatementsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Switch_statement:
		//	{Switch_statement} "switch" lParen=LPAREN expression=Expression rparent=RPAREN "{" ("case" expression2+=Expression
		//	":" | "default" ":" | switchStatements+=Statement)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Switch_statement} "switch" lParen=LPAREN expression=Expression rparent=RPAREN "{" ("case" expression2+=Expression ":" |
		//"default" ":" | switchStatements+=Statement)* "}"
		public Group getGroup() { return cGroup; }

		//{Switch_statement}
		public Action getSwitch_statementAction_0() { return cSwitch_statementAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//lParen=LPAREN
		public Assignment getLParenAssignment_2() { return cLParenAssignment_2; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_2_0() { return cLParenLPARENTerminalRuleCall_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_4() { return cRparentAssignment_4; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_4_0() { return cRparentRPARENTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("case" expression2+=Expression ":" | "default" ":" | switchStatements+=Statement)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"case" expression2+=Expression ":"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"case"
		public Keyword getCaseKeyword_6_0_0() { return cCaseKeyword_6_0_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_6_0_1() { return cExpression2Assignment_6_0_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_6_0_1_0() { return cExpression2ExpressionParserRuleCall_6_0_1_0; }

		//":"
		public Keyword getColonKeyword_6_0_2() { return cColonKeyword_6_0_2; }

		//"default" ":"
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"default"
		public Keyword getDefaultKeyword_6_1_0() { return cDefaultKeyword_6_1_0; }

		//":"
		public Keyword getColonKeyword_6_1_1() { return cColonKeyword_6_1_1; }

		//switchStatements+=Statement
		public Assignment getSwitchStatementsAssignment_6_2() { return cSwitchStatementsAssignment_6_2; }

		//Statement
		public RuleCall getSwitchStatementsStatementParserRuleCall_6_2_0() { return cSwitchStatementsStatementParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class While_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cRparentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRparentRPARENTerminalRuleCall_2_0 = (RuleCall)cRparentAssignment_2.eContents().get(0);
		private final Assignment cWhileStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhileStatementStatementParserRuleCall_3_0 = (RuleCall)cWhileStatementAssignment_3.eContents().get(0);
		
		//While_Statement:
		//	"while(" expression=Expression rparent=RPAREN whileStatement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"while(" expression=Expression rparent=RPAREN whileStatement=Statement
		public Group getGroup() { return cGroup; }

		//"while("
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_2() { return cRparentAssignment_2; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_2_0() { return cRparentRPARENTerminalRuleCall_2_0; }

		//whileStatement=Statement
		public Assignment getWhileStatementAssignment_3() { return cWhileStatementAssignment_3; }

		//Statement
		public RuleCall getWhileStatementStatementParserRuleCall_3_0() { return cWhileStatementStatementParserRuleCall_3_0; }
	}

	public class Do_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Do_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDoStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDoStatementStatementParserRuleCall_1_0 = (RuleCall)cDoStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLparentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLparentLPARENTerminalRuleCall_3_0 = (RuleCall)cLparentAssignment_3.eContents().get(0);
		private final Assignment cRparentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRparentRPARENTerminalRuleCall_4_0 = (RuleCall)cRparentAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Do_Statement:
		//	"do" doStatement=Statement "while" lparent=LPAREN / *doWhileExpression = Expression* / rparent=RPAREN ";";
		@Override public ParserRule getRule() { return rule; }

		//"do" doStatement=Statement "while" lparent=LPAREN / *doWhileExpression = Expression* / rparent=RPAREN ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//doStatement=Statement
		public Assignment getDoStatementAssignment_1() { return cDoStatementAssignment_1; }

		//Statement
		public RuleCall getDoStatementStatementParserRuleCall_1_0() { return cDoStatementStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_3() { return cLparentAssignment_3; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_3_0() { return cLparentLPARENTerminalRuleCall_3_0; }

		/// *doWhileExpression = Expression* / rparent=RPAREN
		public Assignment getRparentAssignment_4() { return cRparentAssignment_4; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_4_0() { return cRparentRPARENTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLparenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLparenLPARENTerminalRuleCall_1_0 = (RuleCall)cLparenAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cRparentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRparentRPARENTerminalRuleCall_3_0 = (RuleCall)cRparentAssignment_3.eContents().get(0);
		private final Assignment cIdStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdStatementStatementParserRuleCall_4_0 = (RuleCall)cIdStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//If_statement:
		//	"if" lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement ("else" elseStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement ("else" elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//lparen=LPAREN
		public Assignment getLparenAssignment_1() { return cLparenAssignment_1; }

		//LPAREN
		public RuleCall getLparenLPARENTerminalRuleCall_1_0() { return cLparenLPARENTerminalRuleCall_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_3() { return cRparentAssignment_3; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_3_0() { return cRparentRPARENTerminalRuleCall_3_0; }

		//idStatement=Statement
		public Assignment getIdStatementAssignment_4() { return cIdStatementAssignment_4; }

		//Statement
		public RuleCall getIdStatementStatementParserRuleCall_4_0() { return cIdStatementStatementParserRuleCall_4_0; }

		//(=> "else" elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}

	public class Try_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Try_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTryStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryStatementStatementParserRuleCall_1_0 = (RuleCall)cTryStatementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLParenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLParenLPARENTerminalRuleCall_2_1_0 = (RuleCall)cLParenAssignment_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_2_0 = (RuleCall)cParametersAssignment_2_2.eContents().get(0);
		private final Assignment cRparentAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRparentRPARENTerminalRuleCall_2_3_0 = (RuleCall)cRparentAssignment_2_3.eContents().get(0);
		private final Assignment cCatchStatementAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cCatchStatementStatementParserRuleCall_2_4_0 = (RuleCall)cCatchStatementAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFinallyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFinallyStatementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinallyStatementStatementParserRuleCall_3_1_0 = (RuleCall)cFinallyStatementAssignment_3_1.eContents().get(0);
		
		//Try_statement:
		//	"try" tryStatement=Statement ("catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN
		//	catchStatement+=Statement)* ("finally" finallyStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"try" tryStatement=Statement ("catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN catchStatement+=Statement)*
		//("finally" finallyStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//tryStatement=Statement
		public Assignment getTryStatementAssignment_1() { return cTryStatementAssignment_1; }

		//Statement
		public RuleCall getTryStatementStatementParserRuleCall_1_0() { return cTryStatementStatementParserRuleCall_1_0; }

		//(=> "catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN catchStatement+=Statement)*
		public Group getGroup_2() { return cGroup_2; }

		//=> "catch"
		public Keyword getCatchKeyword_2_0() { return cCatchKeyword_2_0; }

		//lParen+=LPAREN
		public Assignment getLParenAssignment_2_1() { return cLParenAssignment_2_1; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_2_1_0() { return cLParenLPARENTerminalRuleCall_2_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2() { return cParametersAssignment_2_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_0() { return cParametersParameterParserRuleCall_2_2_0; }

		//rparent+=RPAREN
		public Assignment getRparentAssignment_2_3() { return cRparentAssignment_2_3; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_2_3_0() { return cRparentRPARENTerminalRuleCall_2_3_0; }

		//catchStatement+=Statement
		public Assignment getCatchStatementAssignment_2_4() { return cCatchStatementAssignment_2_4; }

		//Statement
		public RuleCall getCatchStatementStatementParserRuleCall_2_4_0() { return cCatchStatementStatementParserRuleCall_2_4_0; }

		//(=> "finally" finallyStatement=Statement)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0() { return cFinallyKeyword_3_0; }

		//finallyStatement=Statement
		public Assignment getFinallyStatementAssignment_3_1() { return cFinallyStatementAssignment_3_1; }

		//Statement
		public RuleCall getFinallyStatementStatementParserRuleCall_3_1_0() { return cFinallyStatementStatementParserRuleCall_3_1_0; }
	}

	public class Import_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClassNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cClassNameClass_nameParserRuleCall_1_0_0_0 = (RuleCall)cClassNameAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPacNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPacNamePackage_nameParserRuleCall_1_1_0_0 = (RuleCall)cPacNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopAsteriskSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		////FIXME:força a descer por className --  | interfaceName = Interface_name";"
		//Import_statement:
		//	"import" (className=Class_name ";" | pacName=Package_name ".*;");
		@Override public ParserRule getRule() { return rule; }

		//"import" (className=Class_name ";" | pacName=Package_name ".*;")
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//className=Class_name ";" | pacName=Package_name ".*;"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//className=Class_name ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//className=Class_name
		public Assignment getClassNameAssignment_1_0_0() { return cClassNameAssignment_1_0_0; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_1_0_0_0() { return cClassNameClass_nameParserRuleCall_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//pacName=Package_name ".*;"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//pacName=Package_name
		public Assignment getPacNameAssignment_1_1_0() { return cPacNameAssignment_1_1_0; }

		//Package_name
		public RuleCall getPacNamePackage_nameParserRuleCall_1_1_0_0() { return cPacNamePackage_nameParserRuleCall_1_1_0_0; }

		//".*;"
		public Keyword getFullStopAsteriskSemicolonKeyword_1_1_1() { return cFullStopAsteriskSemicolonKeyword_1_1_1; }
	}

	public class Class_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Class_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Interface_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Interface_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Package_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPacNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPacNamePackage_nameParserRuleCall_1_0 = (RuleCall)cPacNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package_statement:
		//	"package" pacName=Package_name ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" pacName=Package_name ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//pacName=Package_name
		public Assignment getPacNameAssignment_1() { return cPacNameAssignment_1; }

		//Package_name
		public RuleCall getPacNamePackage_nameParserRuleCall_1_0() { return cPacNamePackage_nameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Package_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackage_name_lineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name:
		//	ID Package_name_line;
		@Override public ParserRule getRule() { return rule; }

		//ID Package_name_line
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Package_name_line
		public RuleCall getPackage_name_lineParserRuleCall_1() { return cPackage_name_lineParserRuleCall_1; }
	}

	public class Package_name_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_name_line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name_line:
		//	("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//("." ID)*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_literalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATING_POINT_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolean_literalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Keyword cNullKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		////################TERMINAIS
		//Literal:
		//	Integer_literal | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | Boolean_literal | "null";
		@Override public ParserRule getRule() { return rule; }

		//Integer_literal | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | Boolean_literal | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer_literal
		public RuleCall getInteger_literalParserRuleCall_0() { return cInteger_literalParserRuleCall_0; }

		//FLOATING_POINT_LITERAL
		public RuleCall getFLOATING_POINT_LITERALTerminalRuleCall_1() { return cFLOATING_POINT_LITERALTerminalRuleCall_1; }

		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_2() { return cCHARACTER_LITERALTerminalRuleCall_2; }

		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_3() { return cSTRING_LITERALTerminalRuleCall_3; }

		//Boolean_literal
		public RuleCall getBoolean_literalParserRuleCall_4() { return cBoolean_literalParserRuleCall_4; }

		//"null"
		public Keyword getNullKeyword_5() { return cNullKeyword_5; }
	}

	public class Integer_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer_literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEX_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOCTAL_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMAL_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Integer_literal:
		//	HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL;
		@Override public ParserRule getRule() { return rule; }

		//HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX_LITERAL
		public RuleCall getHEX_LITERALTerminalRuleCall_0() { return cHEX_LITERALTerminalRuleCall_0; }

		//OCTAL_LITERAL
		public RuleCall getOCTAL_LITERALTerminalRuleCall_1() { return cOCTAL_LITERALTerminalRuleCall_1; }

		//DECIMAL_LITERAL
		public RuleCall getDECIMAL_LITERALTerminalRuleCall_2() { return cDECIMAL_LITERALTerminalRuleCall_2; }
	}

	public class Boolean_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean_literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean_literal:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class Relational_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relational_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Relational_operator:
		//	"<" | ">" | ">" "=" | "<" "=";
		@Override public ParserRule getRule() { return rule; }

		//"<" | ">" | ">" "=" | "<" "="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//">" "="
		public Group getGroup_2() { return cGroup_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//"<" "="
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
	}

	public class Assignment_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPercentSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Assignment_operator:
		//	"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=";
		@Override public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_8() { return cPercentSignEqualsSignKeyword_8; }
	}

	public class Shift_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shift_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Shift_operator:
		//	"<" "<" | ">" ">" ">" | ">" ">";
		@Override public ParserRule getRule() { return rule; }

		//"<" "<" | ">" ">" ">" | ">" ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<" "<"
		public Group getGroup_0() { return cGroup_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }

		//">" ">" ">"
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }

		//">" ">"
		public Group getGroup_2() { return cGroup_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_1() { return cGreaterThanSignKeyword_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final Compilation_unitElements pCompilation_unit;
	private final Type_declarationElements pType_declaration;
	private final Interface_declarationElements pInterface_declaration;
	private final Class_declarationElements pClass_declaration;
	private final Field_declarationElements pField_declaration;
	private final Method_declarationElements pMethod_declaration;
	private final Constructor_declarationElements pConstructor_declaration;
	private final Parameter_listElements pParameter_list;
	private final ParameterElements pParameter;
	private final Variable_declarationElements pVariable_declaration;
	private final Variable_declaratorElements pVariable_declarator;
	private final Variable_initializerElements pVariable_initializer;
	private final Array_initializerElements pArray_initializer;
	private final TypeElements pType;
	private final Type_specifierElements pType_specifier;
	private final ModifierElements pModifier;
	private final TerminalRule tSTATIC;
	private final Static_initializerElements pStatic_initializer;
	private final Statement_blockElements pStatement_block;
	private final StatementElements pStatement;
	private final For_StatementElements pFor_Statement;
	private final For_controlElements pFor_control;
	private final VariableElements pVariable;
	private final Variable_valueElements pVariable_value;
	private final Primitive_typeElements pPrimitive_type;
	private final For_initElements pFor_init;
	private final For_expressionElements pFor_expression;
	private final For_updateElements pFor_update;
	private final For_update_operatorElements pFor_update_operator;
	private final Update_operatorElements pUpdate_operator;
	private final For_expression_operatorElements pFor_expression_operator;
	private final Parens_expressionElements pParens_expression;
	private final Expression_listElements pExpression_list;
	private final ExpressionElements pExpression;
	private final Conditional_expressionElements pConditional_expression;
	private final Conditional_OR_expressionElements pConditional_OR_expression;
	private final Conditional_AND_expressionElements pConditional_AND_expression;
	private final Inclusive_OR_expressionElements pInclusive_OR_expression;
	private final Exclusive_OR_expressionElements pExclusive_OR_expression;
	private final AND_expressionElements pAND_expression;
	private final Equality_expressionElements pEquality_expression;
	private final InstanceOf_expressionElements pInstanceOf_expression;
	private final Relational_expressionElements pRelational_expression;
	private final Shift_expressionElements pShift_expression;
	private final Additive_expressionElements pAdditive_expression;
	private final Multiplicative_expressionElements pMultiplicative_expression;
	private final Unary_expressionElements pUnary_expression;
	private final Unary_expression_Not_Plus_MinusElements pUnary_expression_Not_Plus_Minus;
	private final Cast_expressionElements pCast_expression;
	private final Primary_expressionElements pPrimary_expression;
	private final Identifier_suffixElements pIdentifier_suffix;
	private final CreatorElements pCreator;
	private final Created_nameElements pCreated_name;
	private final Inner_creatorElements pInner_creator;
	private final Array_creator_restElements pArray_creator_rest;
	private final Class_creator_restElements pClass_creator_rest;
	private final Explicit_generic_invocationElements pExplicit_generic_invocation;
	private final Non_wildcard_type_argumentsElements pNon_wildcard_type_arguments;
	private final SelectorElements pSelector;
	private final Super_suffixElements pSuper_suffix;
	private final ArgumentsElements pArguments;
	private final Switch_statementElements pSwitch_statement;
	private final While_StatementElements pWhile_Statement;
	private final Do_StatementElements pDo_Statement;
	private final If_statementElements pIf_statement;
	private final Try_statementElements pTry_statement;
	private final Import_statementElements pImport_statement;
	private final Class_nameElements pClass_name;
	private final Interface_nameElements pInterface_name;
	private final Package_statementElements pPackage_statement;
	private final Package_nameElements pPackage_name;
	private final Package_name_lineElements pPackage_name_line;
	private final LiteralElements pLiteral;
	private final Integer_literalElements pInteger_literal;
	private final Boolean_literalElements pBoolean_literal;
	private final Relational_operatorElements pRelational_operator;
	private final Assignment_operatorElements pAssignment_operator;
	private final Shift_operatorElements pShift_operator;
	private final TerminalRule tHEX_LITERAL;
	private final TerminalRule tDECIMAL_LITERAL;
	private final TerminalRule tOCTAL_LITERAL;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tINTEGER_TYPE_SUFFIX;
	private final TerminalRule tFLOATING_POINT_LITERAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tCHARACTER_LITERAL;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tESCAPE_SEQUENCE;
	private final TerminalRule tOCTAL_ESCAPE;
	private final TerminalRule tUNICODE_ESCAPE;
	private final TerminalRule tRPAREN;
	private final TerminalRule tLPAREN;
	private final TerminalRule tMOD;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tDOC_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCompilation_unit = new Compilation_unitElements();
		this.pType_declaration = new Type_declarationElements();
		this.pInterface_declaration = new Interface_declarationElements();
		this.pClass_declaration = new Class_declarationElements();
		this.pField_declaration = new Field_declarationElements();
		this.pMethod_declaration = new Method_declarationElements();
		this.pConstructor_declaration = new Constructor_declarationElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter = new ParameterElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pVariable_declarator = new Variable_declaratorElements();
		this.pVariable_initializer = new Variable_initializerElements();
		this.pArray_initializer = new Array_initializerElements();
		this.pType = new TypeElements();
		this.pType_specifier = new Type_specifierElements();
		this.pModifier = new ModifierElements();
		this.tSTATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STATIC");
		this.pStatic_initializer = new Static_initializerElements();
		this.pStatement_block = new Statement_blockElements();
		this.pStatement = new StatementElements();
		this.pFor_Statement = new For_StatementElements();
		this.pFor_control = new For_controlElements();
		this.pVariable = new VariableElements();
		this.pVariable_value = new Variable_valueElements();
		this.pPrimitive_type = new Primitive_typeElements();
		this.pFor_init = new For_initElements();
		this.pFor_expression = new For_expressionElements();
		this.pFor_update = new For_updateElements();
		this.pFor_update_operator = new For_update_operatorElements();
		this.pUpdate_operator = new Update_operatorElements();
		this.pFor_expression_operator = new For_expression_operatorElements();
		this.pParens_expression = new Parens_expressionElements();
		this.pExpression_list = new Expression_listElements();
		this.pExpression = new ExpressionElements();
		this.pConditional_expression = new Conditional_expressionElements();
		this.pConditional_OR_expression = new Conditional_OR_expressionElements();
		this.pConditional_AND_expression = new Conditional_AND_expressionElements();
		this.pInclusive_OR_expression = new Inclusive_OR_expressionElements();
		this.pExclusive_OR_expression = new Exclusive_OR_expressionElements();
		this.pAND_expression = new AND_expressionElements();
		this.pEquality_expression = new Equality_expressionElements();
		this.pInstanceOf_expression = new InstanceOf_expressionElements();
		this.pRelational_expression = new Relational_expressionElements();
		this.pShift_expression = new Shift_expressionElements();
		this.pAdditive_expression = new Additive_expressionElements();
		this.pMultiplicative_expression = new Multiplicative_expressionElements();
		this.pUnary_expression = new Unary_expressionElements();
		this.pUnary_expression_Not_Plus_Minus = new Unary_expression_Not_Plus_MinusElements();
		this.pCast_expression = new Cast_expressionElements();
		this.pPrimary_expression = new Primary_expressionElements();
		this.pIdentifier_suffix = new Identifier_suffixElements();
		this.pCreator = new CreatorElements();
		this.pCreated_name = new Created_nameElements();
		this.pInner_creator = new Inner_creatorElements();
		this.pArray_creator_rest = new Array_creator_restElements();
		this.pClass_creator_rest = new Class_creator_restElements();
		this.pExplicit_generic_invocation = new Explicit_generic_invocationElements();
		this.pNon_wildcard_type_arguments = new Non_wildcard_type_argumentsElements();
		this.pSelector = new SelectorElements();
		this.pSuper_suffix = new Super_suffixElements();
		this.pArguments = new ArgumentsElements();
		this.pSwitch_statement = new Switch_statementElements();
		this.pWhile_Statement = new While_StatementElements();
		this.pDo_Statement = new Do_StatementElements();
		this.pIf_statement = new If_statementElements();
		this.pTry_statement = new Try_statementElements();
		this.pImport_statement = new Import_statementElements();
		this.pClass_name = new Class_nameElements();
		this.pInterface_name = new Interface_nameElements();
		this.pPackage_statement = new Package_statementElements();
		this.pPackage_name = new Package_nameElements();
		this.pPackage_name_line = new Package_name_lineElements();
		this.pLiteral = new LiteralElements();
		this.pInteger_literal = new Integer_literalElements();
		this.pBoolean_literal = new Boolean_literalElements();
		this.pRelational_operator = new Relational_operatorElements();
		this.pAssignment_operator = new Assignment_operatorElements();
		this.pShift_operator = new Shift_operatorElements();
		this.tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_LITERAL");
		this.tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_LITERAL");
		this.tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_LITERAL");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT");
		this.tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX");
		this.tFLOATING_POINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_POINT_LITERAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE_SUFFIX");
		this.tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER_LITERAL");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LITERAL");
		this.tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE");
		this.tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE");
		this.tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_ESCAPE");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN");
		this.tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MOD");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tDOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOC_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	greetings+=Compilation_unit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Compilation_unit:
	//	{Compilation_unit} name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*;
	public Compilation_unitElements getCompilation_unitAccess() {
		return pCompilation_unit;
	}
	
	public ParserRule getCompilation_unitRule() {
		return getCompilation_unitAccess().getRule();
	}

	//Type_declaration:
	//	comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//Interface_declaration:
	//	modifiers+=Modifier* "interface" interfaceName=ID ("extends" interfaceHerdada=Interface_name (","
	//	interfacesHerdadas+=Interface_name)*)? "{" fieldsDeclaration+=Field_declaration* "}";
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//Class_declaration:
	//	modifiers+=Modifier* "class" className=ID ("extends" classHerdada=Class_name)? ("implements"
	//	interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? "{"
	//	fieldsDeclaration+=Field_declaration* "}";
	public Class_declarationElements getClass_declarationAccess() {
		return pClass_declaration;
	}
	
	public ParserRule getClass_declarationRule() {
		return getClass_declarationAccess().getRule();
	}

	//Field_declaration:
	//	comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
	//	methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";";
	public Field_declarationElements getField_declarationAccess() {
		return pField_declaration;
	}
	
	public ParserRule getField_declarationRule() {
		return getField_declarationAccess().getRule();
	}

	//Method_declaration:
	//	modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID lParen=LPAREN parameterListMethod=Parameter_list?
	//	rparent=RPAREN ("[" "]")* (statementMethod=Statement_block | debug=";");
	public Method_declarationElements getMethod_declarationAccess() {
		return pMethod_declaration;
	}
	
	public ParserRule getMethod_declarationRule() {
		return getMethod_declarationAccess().getRule();
	}

	//Constructor_declaration:
	//	modifiersConstructor+=Modifier* nameConstructor=ID lParen=LPAREN parameterListConstructor=Parameter_list?
	//	rparent=RPAREN statementConstructor=Statement_block;
	public Constructor_declarationElements getConstructor_declarationAccess() {
		return pConstructor_declaration;
	}
	
	public ParserRule getConstructor_declarationRule() {
		return getConstructor_declarationAccess().getRule();
	}

	//Parameter_list:
	//	parameter=Parameter ("," parameters+=Parameter)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}

	//Parameter:
	//	type=Type parameterName=ID ("[" "]")*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Variable_declaration:
	//	modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";";
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//Variable_declarator:
	//	nameVariable=ID ("[" "]")* ("=" vari=Variable_initializer)?;
	public Variable_declaratorElements getVariable_declaratorAccess() {
		return pVariable_declarator;
	}
	
	public ParserRule getVariable_declaratorRule() {
		return getVariable_declaratorAccess().getRule();
	}

	//Variable_initializer:
	//	Array_initializer | Expression;
	public Variable_initializerElements getVariable_initializerAccess() {
		return pVariable_initializer;
	}
	
	public ParserRule getVariable_initializerRule() {
		return getVariable_initializerAccess().getRule();
	}

	//Array_initializer:
	//	{Array_initializer} "{" (variableinitializer+=Variable_initializer ("," variableinitializer+=Variable_initializer)*
	//	","?)? "}";
	public Array_initializerElements getArray_initializerAccess() {
		return pArray_initializer;
	}
	
	public ParserRule getArray_initializerRule() {
		return getArray_initializerAccess().getRule();
	}

	//Type:
	//	typeSpecifier=Type_specifier ("[" "]")*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Type_specifier:
	//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | "void" | Class_name;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//Modifier:
	//	MOD | STATIC;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//terminal STATIC:
	//	"static";
	public TerminalRule getSTATICRule() {
		return tSTATIC;
	} 

	//Static_initializer:
	//	static=STATIC name=Statement_block;
	public Static_initializerElements getStatic_initializerAccess() {
		return pStatic_initializer;
	}
	
	public ParserRule getStatic_initializerRule() {
		return getStatic_initializerAccess().getRule();
	}

	//Statement_block:
	//	{Statement_block} "{" statments+=Statement* "}";
	public Statement_blockElements getStatement_blockAccess() {
		return pStatement_block;
	}
	
	public ParserRule getStatement_blockRule() {
		return getStatement_blockAccess().getRule();
	}

	////FIXME: resolver Expression em todas operações 
	//Statement:
	//	variableDeclaration=Variable_declaration | expressionStatement+=Expression g=";" | ifStatement=If_statement |
	//	doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement |
	//	switchStatement=Switch_statement | "synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement |
	//	{Statement} "return" expression=Expression? ";" | {Statement} "throw" expression=Expression? ";" | Statement_block |
	//	tryStatement=Try_statement | nameStatement=ID ":" statement=Statement | {Statement} "break" name=ID? ";" |
	//	{Statement} "continue" name=ID? ";" | {Statement} ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////##################################  For
	//For_Statement:
	//	"for" lparent=LPAREN forControl=For_control rParent=RPAREN forStatement=Statement;
	public For_StatementElements getFor_StatementAccess() {
		return pFor_Statement;
	}
	
	public ParserRule getFor_StatementRule() {
		return getFor_StatementAccess().getRule();
	}

	//For_control:
	//	{For_control} (forinit=For_init? ";" expression=For_expression? ";" forupdate=For_update?);
	public For_controlElements getFor_controlAccess() {
		return pFor_control;
	}
	
	public ParserRule getFor_controlRule() {
		return getFor_controlAccess().getRule();
	}

	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Variable_value:
	//	name=Literal;
	public Variable_valueElements getVariable_valueAccess() {
		return pVariable_value;
	}
	
	public ParserRule getVariable_valueRule() {
		return getVariable_valueAccess().getRule();
	}

	//Primitive_type:
	//	name=Type_specifier;
	public Primitive_typeElements getPrimitive_typeAccess() {
		return pPrimitive_type;
	}
	
	public ParserRule getPrimitive_typeRule() {
		return getPrimitive_typeAccess().getRule();
	}

	////usual For init loop
	//For_init:
	//	{For_init} type=Primitive_type var=Variable "=" var_init=Variable_value;
	public For_initElements getFor_initAccess() {
		return pFor_init;
	}
	
	public ParserRule getFor_initRule() {
		return getFor_initAccess().getRule();
	}

	////check with more expressions	
	//For_expression:
	//	{For_expression} variable1=Variable //('<' | '>' | '<' '=' | '>' '=')
	//	ExpOp=For_expression_operator //(variable2 = Variable ) //if another variablle is declared before the For declaration 
	//	limit=Variable_value;
	public For_expressionElements getFor_expressionAccess() {
		return pFor_expression;
	}
	
	public ParserRule getFor_expressionRule() {
		return getFor_expressionAccess().getRule();
	}

	//For_update:
	//	{For_update} variable= //('++' | '--')
	//	Variable updateOp=For_update_operator;
	public For_updateElements getFor_updateAccess() {
		return pFor_update;
	}
	
	public ParserRule getFor_updateRule() {
		return getFor_updateAccess().getRule();
	}

	//For_update_operator:
	//	{For_update_operator} name=Update_operator;
	public For_update_operatorElements getFor_update_operatorAccess() {
		return pFor_update_operator;
	}
	
	public ParserRule getFor_update_operatorRule() {
		return getFor_update_operatorAccess().getRule();
	}

	//Update_operator:
	//	"++" | "--";
	public Update_operatorElements getUpdate_operatorAccess() {
		return pUpdate_operator;
	}
	
	public ParserRule getUpdate_operatorRule() {
		return getUpdate_operatorAccess().getRule();
	}

	//For_expression_operator: //check if it works with the options
	//	{For_expression_operator} name=Relational_operator;
	public For_expression_operatorElements getFor_expression_operatorAccess() {
		return pFor_expression_operator;
	}
	
	public ParserRule getFor_expression_operatorRule() {
		return getFor_expression_operatorAccess().getRule();
	}

	////################################## EXPRESSOES
	//Parens_expression:
	//	lparent=LPAREN expression=Expression rparent=RPAREN;
	public Parens_expressionElements getParens_expressionAccess() {
		return pParens_expression;
	}
	
	public ParserRule getParens_expressionRule() {
		return getParens_expressionAccess().getRule();
	}

	//Expression_list:
	//	expression1=Expression ("," expression2+=Expression)*;
	public Expression_listElements getExpression_listAccess() {
		return pExpression_list;
	}
	
	public ParserRule getExpression_listRule() {
		return getExpression_listAccess().getRule();
	}

	//Expression:
	//	Conditional_expression (=> assignmentoperator=Assignment_operator expression=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Conditional_expression:
	//	conditionalorexpression=Conditional_OR_expression ("?" expression1=Expression ":" expression2=Expression)?;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return pConditional_expression;
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}

	//Conditional_OR_expression:
	//	conditionalandexpression+=Conditional_AND_expression ("||" conditionalandexpression+=Conditional_AND_expression)*;
	public Conditional_OR_expressionElements getConditional_OR_expressionAccess() {
		return pConditional_OR_expression;
	}
	
	public ParserRule getConditional_OR_expressionRule() {
		return getConditional_OR_expressionAccess().getRule();
	}

	//Conditional_AND_expression:
	//	inclusiveorexpression+=Inclusive_OR_expression ("&&" inclusiveorexpression+=Inclusive_OR_expression)*;
	public Conditional_AND_expressionElements getConditional_AND_expressionAccess() {
		return pConditional_AND_expression;
	}
	
	public ParserRule getConditional_AND_expressionRule() {
		return getConditional_AND_expressionAccess().getRule();
	}

	//Inclusive_OR_expression:
	//	exclusiveorexpression+=Exclusive_OR_expression ("|" exclusiveorexpression+=Exclusive_OR_expression)*;
	public Inclusive_OR_expressionElements getInclusive_OR_expressionAccess() {
		return pInclusive_OR_expression;
	}
	
	public ParserRule getInclusive_OR_expressionRule() {
		return getInclusive_OR_expressionAccess().getRule();
	}

	//Exclusive_OR_expression:
	//	andexpression+=AND_expression ("^" andexpression+=AND_expression)*;
	public Exclusive_OR_expressionElements getExclusive_OR_expressionAccess() {
		return pExclusive_OR_expression;
	}
	
	public ParserRule getExclusive_OR_expressionRule() {
		return getExclusive_OR_expressionAccess().getRule();
	}

	//AND_expression:
	//	equalityexpression+=Equality_expression ("&" equalityexpression+=Equality_expression)*;
	public AND_expressionElements getAND_expressionAccess() {
		return pAND_expression;
	}
	
	public ParserRule getAND_expressionRule() {
		return getAND_expressionAccess().getRule();
	}

	//Equality_expression:
	//	instanceofexpression+=InstanceOf_expression (("==" | "!=") instanceofexpression+=InstanceOf_expression)*;
	public Equality_expressionElements getEquality_expressionAccess() {
		return pEquality_expression;
	}
	
	public ParserRule getEquality_expressionRule() {
		return getEquality_expressionAccess().getRule();
	}

	//InstanceOf_expression:
	//	Relational_expression ("instanceof" type=Type)?;
	public InstanceOf_expressionElements getInstanceOf_expressionAccess() {
		return pInstanceOf_expression;
	}
	
	public ParserRule getInstanceOf_expressionRule() {
		return getInstanceOf_expressionAccess().getRule();
	}

	//Relational_expression:
	//	shiftexpression+=Shift_expression (relationalop+=Relational_operator shiftexpression+=Shift_expression)*;
	public Relational_expressionElements getRelational_expressionAccess() {
		return pRelational_expression;
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}

	//Shift_expression:
	//	additiveexpression+=Additive_expression (shiftop+=Shift_operator additiveexpression+=Additive_expression)*;
	public Shift_expressionElements getShift_expressionAccess() {
		return pShift_expression;
	}
	
	public ParserRule getShift_expressionRule() {
		return getShift_expressionAccess().getRule();
	}

	//Additive_expression:
	//	multiplicativeexpression+=Multiplicative_expression (("+" | "-")
	//	multiplicativeexpression+=Multiplicative_expression)*;
	public Additive_expressionElements getAdditive_expressionAccess() {
		return pAdditive_expression;
	}
	
	public ParserRule getAdditive_expressionRule() {
		return getAdditive_expressionAccess().getRule();
	}

	//Multiplicative_expression:
	//	unaryexpression+=Unary_expression (("*" | "/" | "%") unaryexpression+=Unary_expression)*;
	public Multiplicative_expressionElements getMultiplicative_expressionAccess() {
		return pMultiplicative_expression;
	}
	
	public ParserRule getMultiplicative_expressionRule() {
		return getMultiplicative_expressionAccess().getRule();
	}

	//Unary_expression:
	//	"+" Unary_expression | "-" Unary_expression | "++" Unary_expression | "--" Unary_expression |
	//	Unary_expression_Not_Plus_Minus;
	public Unary_expressionElements getUnary_expressionAccess() {
		return pUnary_expression;
	}
	
	public ParserRule getUnary_expressionRule() {
		return getUnary_expressionAccess().getRule();
	}

	//Unary_expression_Not_Plus_Minus:
	//	{Unary_expression_Not_Plus_Minus} ("~" unaryexpression=Unary_expression | "!" unaryexpression=Unary_expression |
	//	castexpression=Cast_expression | primary=Primary_expression selector+=Selector* ("++" | "--")?);
	public Unary_expression_Not_Plus_MinusElements getUnary_expression_Not_Plus_MinusAccess() {
		return pUnary_expression_Not_Plus_Minus;
	}
	
	public ParserRule getUnary_expression_Not_Plus_MinusRule() {
		return getUnary_expression_Not_Plus_MinusAccess().getRule();
	}

	//Cast_expression:
	//	{Cast_expression} lparent=LPAREN primitivetype=Primitive_type rparent=RPAREN unaryexpression=Unary_expression |
	//	lparent=LPAREN (type=Type | expression=Expression) rparent=RPAREN
	//	unaryexpressionnotplusminus=Unary_expression_Not_Plus_Minus;
	public Cast_expressionElements getCast_expressionAccess() {
		return pCast_expression;
	}
	
	public ParserRule getCast_expressionRule() {
		return getCast_expressionAccess().getRule();
	}

	//Primary_expression:
	//	{Primary_expression} (parexpression=Parens_expression | "this" ("." identifier+=ID)* =>
	//	identifiersuffix=Identifier_suffix? | "super" supersuffix=Super_suffix | literal=Literal | "new" creator=Creator |
	//	identifier+=ID ("." identifier+=ID)* => identifiersuffix=Identifier_suffix? | primitivetype=Primitive_type ("[" "]")*
	//	"." "class" | "void" "." "class");
	public Primary_expressionElements getPrimary_expressionAccess() {
		return pPrimary_expression;
	}
	
	public ParserRule getPrimary_expressionRule() {
		return getPrimary_expressionAccess().getRule();
	}

	//Identifier_suffix:
	//	{Identifier_suffix} (("[" "]")+ "." "class" //	| ('[' expression += Expression ']')+ // can also be matched by selector, but do here
	//	| arguments=Arguments | "." "class" | "." explicitgenericinvocation=Explicit_generic_invocation | "." "this" | "."
	//	"super" arguments=Arguments | "." "new" innercreator=Inner_creator);
	public Identifier_suffixElements getIdentifier_suffixAccess() {
		return pIdentifier_suffix;
	}
	
	public ParserRule getIdentifier_suffixRule() {
		return getIdentifier_suffixAccess().getRule();
	}

	//Creator:
	//	Non_wildcard_type_arguments createdname=Created_name classcreatorrest=Class_creator_rest | Created_name
	//	(arraycreatorrest=Array_creator_rest | classcreatorrest=Class_creator_rest);
	public CreatorElements getCreatorAccess() {
		return pCreator;
	}
	
	public ParserRule getCreatorRule() {
		return getCreatorAccess().getRule();
	}

	//Created_name:
	//	{Created_name} (classorinterfacetype=Class_declaration | primitivetype=Primitive_type);
	public Created_nameElements getCreated_nameAccess() {
		return pCreated_name;
	}
	
	public ParserRule getCreated_nameRule() {
		return getCreated_nameAccess().getRule();
	}

	//Inner_creator:
	//	nonwildcardtypearguments=Non_wildcard_type_arguments? identifier=ID classcreatorrest=Class_creator_rest;
	public Inner_creatorElements getInner_creatorAccess() {
		return pInner_creator;
	}
	
	public ParserRule getInner_creatorRule() {
		return getInner_creatorAccess().getRule();
	}

	//Array_creator_rest:
	//	"[" ("]" ("[" "]")* Array_initializer | expression+=Expression "]" ("[" expression+=Expression "]")* ("[" "]")*);
	public Array_creator_restElements getArray_creator_restAccess() {
		return pArray_creator_rest;
	}
	
	public ParserRule getArray_creator_restRule() {
		return getArray_creator_restAccess().getRule();
	}

	//Class_creator_rest:
	//	arguments=Arguments classbody=Class_declaration?;
	public Class_creator_restElements getClass_creator_restAccess() {
		return pClass_creator_rest;
	}
	
	public ParserRule getClass_creator_restRule() {
		return getClass_creator_restAccess().getRule();
	}

	//Explicit_generic_invocation:
	//	nonwildcardtypearguments=Non_wildcard_type_arguments identifier=ID arguments=Arguments;
	public Explicit_generic_invocationElements getExplicit_generic_invocationAccess() {
		return pExplicit_generic_invocation;
	}
	
	public ParserRule getExplicit_generic_invocationRule() {
		return getExplicit_generic_invocationAccess().getRule();
	}

	//Non_wildcard_type_arguments:
	//	"<" type=Type ">";
	public Non_wildcard_type_argumentsElements getNon_wildcard_type_argumentsAccess() {
		return pNon_wildcard_type_arguments;
	}
	
	public ParserRule getNon_wildcard_type_argumentsRule() {
		return getNon_wildcard_type_argumentsAccess().getRule();
	}

	//Selector:
	//	{Selector} //	'.' identifier = Identifier arguments = Arguments? | 
	//	//	'.' 'this' | 
	//	("." "super" supersuffix=Super_suffix | "." "new" innercreator=Inner_creator | "[" expression=Expression "]");
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//Super_suffix:
	//	{Super_suffix} (arguments=Arguments | "." identifier=ID arguments=Arguments?);
	public Super_suffixElements getSuper_suffixAccess() {
		return pSuper_suffix;
	}
	
	public ParserRule getSuper_suffixRule() {
		return getSuper_suffixAccess().getRule();
	}

	//Arguments:
	//	{Arguments} lparent=LPAREN expressionlist=Expression_list? rparent=RPAREN;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//Switch_statement:
	//	{Switch_statement} "switch" lParen=LPAREN expression=Expression rparent=RPAREN "{" ("case" expression2+=Expression
	//	":" | "default" ":" | switchStatements+=Statement)* "}";
	public Switch_statementElements getSwitch_statementAccess() {
		return pSwitch_statement;
	}
	
	public ParserRule getSwitch_statementRule() {
		return getSwitch_statementAccess().getRule();
	}

	//While_Statement:
	//	"while(" expression=Expression rparent=RPAREN whileStatement=Statement;
	public While_StatementElements getWhile_StatementAccess() {
		return pWhile_Statement;
	}
	
	public ParserRule getWhile_StatementRule() {
		return getWhile_StatementAccess().getRule();
	}

	//Do_Statement:
	//	"do" doStatement=Statement "while" lparent=LPAREN / *doWhileExpression = Expression* / rparent=RPAREN ";";
	public Do_StatementElements getDo_StatementAccess() {
		return pDo_Statement;
	}
	
	public ParserRule getDo_StatementRule() {
		return getDo_StatementAccess().getRule();
	}

	//If_statement:
	//	"if" lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement ("else" elseStatement=Statement)?;
	public If_statementElements getIf_statementAccess() {
		return pIf_statement;
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//Try_statement:
	//	"try" tryStatement=Statement ("catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN
	//	catchStatement+=Statement)* ("finally" finallyStatement=Statement)?;
	public Try_statementElements getTry_statementAccess() {
		return pTry_statement;
	}
	
	public ParserRule getTry_statementRule() {
		return getTry_statementAccess().getRule();
	}

	////FIXME:força a descer por className --  | interfaceName = Interface_name";"
	//Import_statement:
	//	"import" (className=Class_name ";" | pacName=Package_name ".*;");
	public Import_statementElements getImport_statementAccess() {
		return pImport_statement;
	}
	
	public ParserRule getImport_statementRule() {
		return getImport_statementAccess().getRule();
	}

	//Class_name:
	//	Package_name;
	public Class_nameElements getClass_nameAccess() {
		return pClass_name;
	}
	
	public ParserRule getClass_nameRule() {
		return getClass_nameAccess().getRule();
	}

	//Interface_name:
	//	Package_name;
	public Interface_nameElements getInterface_nameAccess() {
		return pInterface_name;
	}
	
	public ParserRule getInterface_nameRule() {
		return getInterface_nameAccess().getRule();
	}

	//Package_statement:
	//	"package" pacName=Package_name ";";
	public Package_statementElements getPackage_statementAccess() {
		return pPackage_statement;
	}
	
	public ParserRule getPackage_statementRule() {
		return getPackage_statementAccess().getRule();
	}

	//Package_name:
	//	ID Package_name_line;
	public Package_nameElements getPackage_nameAccess() {
		return pPackage_name;
	}
	
	public ParserRule getPackage_nameRule() {
		return getPackage_nameAccess().getRule();
	}

	//Package_name_line:
	//	("." ID)*;
	public Package_name_lineElements getPackage_name_lineAccess() {
		return pPackage_name_line;
	}
	
	public ParserRule getPackage_name_lineRule() {
		return getPackage_name_lineAccess().getRule();
	}

	////################TERMINAIS
	//Literal:
	//	Integer_literal | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | Boolean_literal | "null";
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Integer_literal:
	//	HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL;
	public Integer_literalElements getInteger_literalAccess() {
		return pInteger_literal;
	}
	
	public ParserRule getInteger_literalRule() {
		return getInteger_literalAccess().getRule();
	}

	//Boolean_literal:
	//	"true" | "false";
	public Boolean_literalElements getBoolean_literalAccess() {
		return pBoolean_literal;
	}
	
	public ParserRule getBoolean_literalRule() {
		return getBoolean_literalAccess().getRule();
	}

	//Relational_operator:
	//	"<" | ">" | ">" "=" | "<" "=";
	public Relational_operatorElements getRelational_operatorAccess() {
		return pRelational_operator;
	}
	
	public ParserRule getRelational_operatorRule() {
		return getRelational_operatorAccess().getRule();
	}

	//Assignment_operator:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=";
	public Assignment_operatorElements getAssignment_operatorAccess() {
		return pAssignment_operator;
	}
	
	public ParserRule getAssignment_operatorRule() {
		return getAssignment_operatorAccess().getRule();
	}

	//Shift_operator:
	//	"<" "<" | ">" ">" ">" | ">" ">";
	public Shift_operatorElements getShift_operatorAccess() {
		return pShift_operator;
	}
	
	public ParserRule getShift_operatorRule() {
		return getShift_operatorAccess().getRule();
	}

	//terminal HEX_LITERAL:
	//	"0" ("x" | "X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return tHEX_LITERAL;
	} 

	//terminal DECIMAL_LITERAL:
	//	("0" | "1".."9" "0".."9"*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return tDECIMAL_LITERAL;
	} 

	//terminal OCTAL_LITERAL:
	//	"0" "0".."7"+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return tOCTAL_LITERAL;
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	} 

	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	"l" | "L";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return tINTEGER_TYPE_SUFFIX;
	} 

	//terminal FLOATING_POINT_LITERAL:
	//	"0".."9"+ "." "0".."9"* EXPONENT? FLOAT_TYPE_SUFFIX? | "." "0".."9"+ EXPONENT? FLOAT_TYPE_SUFFIX? | "0".."9"+
	//	EXPONENT FLOAT_TYPE_SUFFIX? | "0".."9"+ FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOATING_POINT_LITERALRule() {
		return tFLOATING_POINT_LITERAL;
	} 

	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	} 

	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	"f" | "F" | "d" | "D";
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	} 

	//terminal CHARACTER_LITERAL:
	//	"\'" (ESCAPE_SEQUENCE | !("\'" | "\\")) "\'";
	public TerminalRule getCHARACTER_LITERALRule() {
		return tCHARACTER_LITERAL;
	} 

	//terminal STRING_LITERAL:
	//	"\"" (ESCAPE_SEQUENCE | !("\\" | "\""))* "\"";
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return tESCAPE_SEQUENCE;
	} 

	//terminal fragment OCTAL_ESCAPE:
	//	"\\" "0".."3" "0".."7" "0".."7" | "\\" "0".."7" "0".."7" | "\\" "0".."7";
	public TerminalRule getOCTAL_ESCAPERule() {
		return tOCTAL_ESCAPE;
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUNICODE_ESCAPERule() {
		return tUNICODE_ESCAPE;
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	} 

	//terminal MOD:
	//	"public" | "private" | "protected" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" | "transient";
	public TerminalRule getMODRule() {
		return tMOD;
	} 

	////override eclipse xtext terminals
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "0".."9" | "$" | "À".."￿")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	" " | "\t" | "\r" | "\n";
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal DOC_COMMENT:
	//	"/ **";
	public TerminalRule getDOC_COMMENTRule() {
		return tDOC_COMMENT;
	} 
}
