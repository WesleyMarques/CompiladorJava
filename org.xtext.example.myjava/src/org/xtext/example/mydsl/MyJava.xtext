grammar org.xtext.compilador.java.MyDsl hidden(WS, ML_COMMENT, SL_COMMENT)
/*
 * {} 0 ou + -> ()*
 * [] 0 ou 1 - > ()?
 *           ->  ()+   
 */
generate myDsl "http://www.xtext.org/compilador/java/MyDsl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
  greetings+=Compilation_unit;
  
Compilation_unit: name = (Package_statement)? imports += (Import_statement)* typeDeclarations += (Type_declaration)*;

Type_declaration:
	comment = DOC_COMMENT?(classDec = Class_declaration | interfaceDec = Interface_declaration)";"
;

Interface_declaration:
	modifiers += Modifier* "interface" interfaceName = ID ("extends" interfaceHerdada = Interface_name ("," interfacesHerdadas += (Interface_name))*)? "{" /*(fieldDeclaration = Field_declaration)* */ "}"
;

Class_declaration:
	modifiers += Modifier* "class" className = ID ("extends" classHerdada = Class_name)? ("implements" interfaceImplementada = Interface_name ("," interfacesImplementadas += (Interface_name))*)? "{" (fieldsDeclaration += (Field_declaration)*) "}"
;

Field_declaration:
	(comment = DOC_COMMENT? ( variableDeclaration = Variable_declaration | contructorName = Constructor_declaration | methodName = Method_declaration )) | staticinitializer = Static_initializer | {Field_declaration}";"
;

Method_declaration:
	(modifiersMethod += Modifier*) typeMethod = Type nameMethod = ID 
	"(" parameterListMethod = Parameter_list? ")" ("[]")* (statementMethod = Statement_block | ";")
;

Constructor_declaration:
	(modifiersConstructor += Modifier*) nameConstructor = ID 
	"(" (parameterListConstructor = Parameter_list)? ")"(statementConstructor = Statement_block)
;

Parameter_list:
	parameter = Parameter ("," parameters += Parameter)*
;

Parameter:
	type = Type parameterName = ID ("[]")*
;

Variable_declaration:
	(modifiersVariable += Modifier*) type = Type nameVariable = Variable_declarator ("," names += Variable_declarator)* ";"
;

Variable_declarator:
	nameVariable = ID ("[]")* //( "=" Variable_initialize)?
;

//Variable_initialize:
//	
//;

Type:
	typeSpecifier = Type_specifier ("[]")*
;

Type_specifier:
	"boolean" 
      | "byte" 
      | "char" 
      | "short" 
      | "int" 
      | "float" 
      | "long" 
      | "double" 
      | Class_name
;

Modifier:
	(MOD | STATIC)
;

Static_initializer:
	static = STATIC name = Statement_block
;

terminal STATIC: 
	"static"	
;


Statement_block:
	{Statement} "{" statments += Statement* "}"
;
//FIXME: resolver o resto das operações 
Statement:
	Variable_declaration | "break" (name = ID)? ";" | "continue" (name = ID)? ";" | (";")
;

//FIXME:força a descer por className --  | interfaceName = Interface_name";"
Import_statement: 
	"import" (((className = Class_name";" | pacName = Package_name".*;")))
;

Class_name:
	Package_name	
;

Interface_name:
	Package_name	
;

Package_statement:
	"package" pacName=Package_name ";"
;

Package_name: 
	ID Package_name_line
;
Package_name_line: 
	("."ID)*
;

terminal MOD:
	"public" 
      | "private" 
      | "protected" 
      | "final" 
      | "native" 
      | "synchronized" 
      | "abstract" 
      | "threadsafe" 
      | "transient"
;

//override eclipse xtext terminals
terminal ID:
	('a'..'z'|'A'..'Z'|'_' | '$')('a'..'z'|'A'..'Z'|'_'|'0'..'9' | '$' | '\u00C0' .. '\uFFFF')*	
;

terminal ML_COMMENT:
	"/*" -> "*/"
;

terminal SL_COMMENT:
	"//" !("\n" | "\r")* ("\r"? "\n")?
;

terminal WS:
	(" " | "\t" | "\r" | "\n")
;

terminal DOC_COMMENT :
	"/**"
;

