/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myJava.Arglist;
import org.xtext.example.mydsl.myJava.Class_declaration;
import org.xtext.example.mydsl.myJava.Compilation_unit;
import org.xtext.example.mydsl.myJava.Constructor_declaration;
import org.xtext.example.mydsl.myJava.Do_Statement;
import org.xtext.example.mydsl.myJava.Expression;
import org.xtext.example.mydsl.myJava.Expression_line;
import org.xtext.example.mydsl.myJava.Field_declaration;
import org.xtext.example.mydsl.myJava.For_Statement;
import org.xtext.example.mydsl.myJava.If_statement;
import org.xtext.example.mydsl.myJava.Import_statement;
import org.xtext.example.mydsl.myJava.Interface_declaration;
import org.xtext.example.mydsl.myJava.Method_declaration;
import org.xtext.example.mydsl.myJava.Model;
import org.xtext.example.mydsl.myJava.MyJavaPackage;
import org.xtext.example.mydsl.myJava.Numeric_Expression;
import org.xtext.example.mydsl.myJava.Numeric_Expression_line;
import org.xtext.example.mydsl.myJava.Package_statement;
import org.xtext.example.mydsl.myJava.Parameter;
import org.xtext.example.mydsl.myJava.Parameter_list;
import org.xtext.example.mydsl.myJava.Statement;
import org.xtext.example.mydsl.myJava.Statement_block;
import org.xtext.example.mydsl.myJava.Static_initializer;
import org.xtext.example.mydsl.myJava.Switch_statement;
import org.xtext.example.mydsl.myJava.Try_statement;
import org.xtext.example.mydsl.myJava.Type;
import org.xtext.example.mydsl.myJava.Type_declaration;
import org.xtext.example.mydsl.myJava.Variable_declaration;
import org.xtext.example.mydsl.myJava.Variable_declarator;
import org.xtext.example.mydsl.myJava.While_Statement;
import org.xtext.example.mydsl.services.MyJavaGrammarAccess;

@SuppressWarnings("all")
public class MyJavaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyJavaGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyJavaPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyJavaPackage.ARGLIST:
				sequence_Arglist(context, (Arglist) semanticObject); 
				return; 
			case MyJavaPackage.CLASS_DECLARATION:
				sequence_Class_declaration(context, (Class_declaration) semanticObject); 
				return; 
			case MyJavaPackage.COMPILATION_UNIT:
				sequence_Compilation_unit(context, (Compilation_unit) semanticObject); 
				return; 
			case MyJavaPackage.CONSTRUCTOR_DECLARATION:
				sequence_Constructor_declaration(context, (Constructor_declaration) semanticObject); 
				return; 
			case MyJavaPackage.DO_STATEMENT:
				sequence_Do_Statement(context, (Do_Statement) semanticObject); 
				return; 
			case MyJavaPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case MyJavaPackage.EXPRESSION_LINE:
				sequence_Expression_line_Numeric_Expression_line(context, (Expression_line) semanticObject); 
				return; 
			case MyJavaPackage.FIELD_DECLARATION:
				sequence_Field_declaration(context, (Field_declaration) semanticObject); 
				return; 
			case MyJavaPackage.FOR_STATEMENT:
				sequence_For_Statement(context, (For_Statement) semanticObject); 
				return; 
			case MyJavaPackage.IF_STATEMENT:
				sequence_If_statement(context, (If_statement) semanticObject); 
				return; 
			case MyJavaPackage.IMPORT_STATEMENT:
				sequence_Import_statement(context, (Import_statement) semanticObject); 
				return; 
			case MyJavaPackage.INTERFACE_DECLARATION:
				sequence_Interface_declaration(context, (Interface_declaration) semanticObject); 
				return; 
			case MyJavaPackage.METHOD_DECLARATION:
				sequence_Method_declaration(context, (Method_declaration) semanticObject); 
				return; 
			case MyJavaPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyJavaPackage.NUMERIC_EXPRESSION:
				sequence_Numeric_Expression(context, (Numeric_Expression) semanticObject); 
				return; 
			case MyJavaPackage.NUMERIC_EXPRESSION_LINE:
				sequence_Numeric_Expression_line(context, (Numeric_Expression_line) semanticObject); 
				return; 
			case MyJavaPackage.PACKAGE_STATEMENT:
				sequence_Package_statement(context, (Package_statement) semanticObject); 
				return; 
			case MyJavaPackage.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case MyJavaPackage.PARAMETER_LIST:
				sequence_Parameter_list(context, (Parameter_list) semanticObject); 
				return; 
			case MyJavaPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case MyJavaPackage.STATEMENT_BLOCK:
				sequence_Statement_block(context, (Statement_block) semanticObject); 
				return; 
			case MyJavaPackage.STATIC_INITIALIZER:
				sequence_Static_initializer(context, (Static_initializer) semanticObject); 
				return; 
			case MyJavaPackage.SWITCH_STATEMENT:
				sequence_Switch_statement(context, (Switch_statement) semanticObject); 
				return; 
			case MyJavaPackage.TRY_STATEMENT:
				sequence_Try_statement(context, (Try_statement) semanticObject); 
				return; 
			case MyJavaPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case MyJavaPackage.TYPE_DECLARATION:
				sequence_Type_declaration(context, (Type_declaration) semanticObject); 
				return; 
			case MyJavaPackage.VARIABLE_DECLARATION:
				sequence_Variable_declaration(context, (Variable_declaration) semanticObject); 
				return; 
			case MyJavaPackage.VARIABLE_DECLARATOR:
				sequence_Variable_declarator(context, (Variable_declarator) semanticObject); 
				return; 
			case MyJavaPackage.WHILE_STATEMENT:
				sequence_While_Statement(context, (While_Statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (expression=Expression expressions+=Expression*)
	 */
	protected void sequence_Arglist(EObject context, Arglist semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiers+=Modifier* 
	 *         className=ID 
	 *         classHerdada=Class_name? 
	 *         (interfaceImplementada=Interface_name interfacesImplementadas+=Interface_name*)? 
	 *         fieldsDeclaration+=Field_declaration*
	 *     )
	 */
	protected void sequence_Class_declaration(EObject context, Class_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*)
	 */
	protected void sequence_Compilation_unit(EObject context, Compilation_unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiersConstructor+=Modifier* 
	 *         nameConstructor=ID 
	 *         lParen=LPAREN 
	 *         parameterListConstructor=Parameter_list? 
	 *         rparent=RPAREN 
	 *         statementConstructor=Statement_block
	 *     )
	 */
	protected void sequence_Constructor_declaration(EObject context, Constructor_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (doStatement=Statement rparent=RPAREN)
	 */
	protected void sequence_Do_Statement(EObject context, Do_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.DO_STATEMENT__DO_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.DO_STATEMENT__DO_STATEMENT));
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.DO_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.DO_STATEMENT__RPARENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDo_StatementAccess().getDoStatementStatementParserRuleCall_1_0(), semanticObject.getDoStatement());
		feeder.accept(grammarAccess.getDo_StatementAccess().getRparentRPARENTerminalRuleCall_3_0(), semanticObject.getRparent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         expression=Numeric_Expression | 
	 *         (lParen=LPAREN expression=Expression rparent=RPAREN expressionLine=Expression_line) | 
	 *         (expression=Expression expressionLine=Expression_line) | 
	 *         (expression=Expression expressionLine=Expression_line) | 
	 *         (expression=Expression expressionLine=Expression_line) | 
	 *         (name=ID expression=Expression_line) | 
	 *         expression=Expression_line | 
	 *         expression=Expression_line | 
	 *         expression=Expression_line
	 *     )
	 */
	protected void sequence_Expression(EObject context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Expression_line}
	 */
	protected void sequence_Expression_line_Numeric_Expression_line(EObject context, Expression_line semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration | methodName=Method_declaration)) | 
	 *         staticinitializer=Static_initializer
	 *     )?
	 */
	protected void sequence_Field_declaration(EObject context, Field_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (variable=Variable_declaration? rParent=RPAREN forStatement=Statement)
	 */
	protected void sequence_For_Statement(EObject context, For_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (rparent=RPAREN idStatement=Statement elseStatement=Statement?)
	 */
	protected void sequence_If_statement(EObject context, If_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (className=Class_name | pacName=Package_name)
	 */
	protected void sequence_Import_statement(EObject context, Import_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modifiers+=Modifier* interfaceName=ID (interfaceHerdada=Interface_name interfacesHerdadas+=Interface_name*)?)
	 */
	protected void sequence_Interface_declaration(EObject context, Interface_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiersMethod+=Modifier* 
	 *         typeMethod=Type 
	 *         nameMethod=ID 
	 *         lParen=LPAREN 
	 *         parameterListMethod=Parameter_list? 
	 *         rparent=RPAREN 
	 *         (statementMethod=Statement_block | debug=';')
	 *     )
	 */
	protected void sequence_Method_declaration(EObject context, Method_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     greetings+=Compilation_unit
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (unaryOp=UNARYOP expression=Expression numericExpressionLine=Numeric_Expression_line)
	 */
	protected void sequence_Numeric_Expression(EObject context, Numeric_Expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.NUMERIC_EXPRESSION__UNARY_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.NUMERIC_EXPRESSION__UNARY_OP));
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.NUMERIC_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.NUMERIC_EXPRESSION__EXPRESSION));
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.NUMERIC_EXPRESSION__NUMERIC_EXPRESSION_LINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.NUMERIC_EXPRESSION__NUMERIC_EXPRESSION_LINE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNumeric_ExpressionAccess().getUnaryOpUNARYOPParserRuleCall_0_0(), semanticObject.getUnaryOp());
		feeder.accept(grammarAccess.getNumeric_ExpressionAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getNumeric_ExpressionAccess().getNumericExpressionLineNumeric_Expression_lineParserRuleCall_2_0(), semanticObject.getNumericExpressionLine());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((increment=INCREMENT expressionLine=Expression_line) | (op=OP expression=Expression expressionLine=Expression_line))
	 */
	protected void sequence_Numeric_Expression_line(EObject context, Numeric_Expression_line semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     pacName=Package_name
	 */
	protected void sequence_Package_statement(EObject context, Package_statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.PACKAGE_STATEMENT__PAC_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.PACKAGE_STATEMENT__PAC_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPackage_statementAccess().getPacNamePackage_nameParserRuleCall_1_0(), semanticObject.getPacName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=Type parameterName=ID)
	 */
	protected void sequence_Parameter(EObject context, Parameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.PARAMETER__TYPE));
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.PARAMETER__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.PARAMETER__PARAMETER_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getParameterAccess().getParameterNameIDTerminalRuleCall_1_0(), semanticObject.getParameterName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (parameter=Parameter parameters+=Parameter*)
	 */
	protected void sequence_Parameter_list(EObject context, Parameter_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((name=ID?) | (name=ID?))
	 */
	protected void sequence_Statement(EObject context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (statments+=Statement*)
	 */
	protected void sequence_Statement_block(EObject context, Statement_block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (static=STATIC name=Statement_block)
	 */
	protected void sequence_Static_initializer(EObject context, Static_initializer semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.STATIC_INITIALIZER__STATIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.STATIC_INITIALIZER__STATIC));
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.STATIC_INITIALIZER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.STATIC_INITIALIZER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0(), semanticObject.getStatic());
		feeder.accept(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (lParen=LPAREN rparent=RPAREN switchStatements+=Statement*)
	 */
	protected void sequence_Switch_statement(EObject context, Switch_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (tryStatement=Statement (lParen=LPAREN parameters+=Parameter rparent=RPAREN catchStatement+=Statement)* finallyStatement=Statement?)
	 */
	protected void sequence_Try_statement(EObject context, Try_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     typeSpecifier=Type_specifier
	 */
	protected void sequence_Type(EObject context, Type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.TYPE__TYPE_SPECIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.TYPE__TYPE_SPECIFIER));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTypeAccess().getTypeSpecifierType_specifierParserRuleCall_0_0(), semanticObject.getTypeSpecifier());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration))
	 */
	protected void sequence_Type_declaration(EObject context, Type_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator names+=Variable_declarator*)
	 */
	protected void sequence_Variable_declaration(EObject context, Variable_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     nameVariable=ID
	 */
	protected void sequence_Variable_declarator(EObject context, Variable_declarator semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.VARIABLE_DECLARATOR__NAME_VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.VARIABLE_DECLARATOR__NAME_VARIABLE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getVariable_declaratorAccess().getNameVariableIDTerminalRuleCall_0_0(), semanticObject.getNameVariable());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (rparent=RPAREN whileStatement=Statement)
	 */
	protected void sequence_While_Statement(EObject context, While_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.WHILE_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.WHILE_STATEMENT__RPARENT));
			if(transientValues.isValueTransient(semanticObject, MyJavaPackage.Literals.WHILE_STATEMENT__WHILE_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyJavaPackage.Literals.WHILE_STATEMENT__WHILE_STATEMENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWhile_StatementAccess().getRparentRPARENTerminalRuleCall_1_0(), semanticObject.getRparent());
		feeder.accept(grammarAccess.getWhile_StatementAccess().getWhileStatementStatementParserRuleCall_2_0(), semanticObject.getWhileStatement());
		feeder.finish();
	}
}
