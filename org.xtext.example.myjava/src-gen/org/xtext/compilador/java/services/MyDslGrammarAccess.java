/*
 * generated by Xtext
 */
package org.xtext.compilador.java.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsCompilation_unitParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Compilation_unit;
		@Override public ParserRule getRule() { return rule; }

		//greetings+=Compilation_unit
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Compilation_unit
		public RuleCall getGreetingsCompilation_unitParserRuleCall_0() { return cGreetingsCompilation_unitParserRuleCall_0; }
	}

	public class Compilation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compilation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePackage_statementParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImport_statementParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cTypeDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDeclarationsType_declarationParserRuleCall_2_0 = (RuleCall)cTypeDeclarationsAssignment_2.eContents().get(0);
		
		//Compilation_unit:
		//	name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*;
		@Override public ParserRule getRule() { return rule; }

		//name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*
		public Group getGroup() { return cGroup; }

		//name=Package_statement?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Package_statement
		public RuleCall getNamePackage_statementParserRuleCall_0_0() { return cNamePackage_statementParserRuleCall_0_0; }

		//imports+=Import_statement*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import_statement
		public RuleCall getImportsImport_statementParserRuleCall_1_0() { return cImportsImport_statementParserRuleCall_1_0; }

		//typeDeclarations+=Type_declaration*
		public Assignment getTypeDeclarationsAssignment_2() { return cTypeDeclarationsAssignment_2; }

		//Type_declaration
		public RuleCall getTypeDeclarationsType_declarationParserRuleCall_2_0() { return cTypeDeclarationsType_declarationParserRuleCall_2_0; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassDecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassDecClass_declarationParserRuleCall_1_0_0 = (RuleCall)cClassDecAssignment_1_0.eContents().get(0);
		private final Assignment cInterfaceDecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInterfaceDecInterface_declarationParserRuleCall_1_1_0 = (RuleCall)cInterfaceDecAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Type_declaration:
		//	comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";";
		@Override public ParserRule getRule() { return rule; }

		//comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";"
		public Group getGroup() { return cGroup; }

		//comment=DOC_COMMENT?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//DOC_COMMENT
		public RuleCall getCommentDOC_COMMENTTerminalRuleCall_0_0() { return cCommentDOC_COMMENTTerminalRuleCall_0_0; }

		//classDec=Class_declaration | interfaceDec=Interface_declaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//classDec=Class_declaration
		public Assignment getClassDecAssignment_1_0() { return cClassDecAssignment_1_0; }

		//Class_declaration
		public RuleCall getClassDecClass_declarationParserRuleCall_1_0_0() { return cClassDecClass_declarationParserRuleCall_1_0_0; }

		//interfaceDec=Interface_declaration
		public Assignment getInterfaceDecAssignment_1_1() { return cInterfaceDecAssignment_1_1; }

		//Interface_declaration
		public RuleCall getInterfaceDecInterface_declarationParserRuleCall_1_1_0() { return cInterfaceDecInterface_declarationParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceNameIDTerminalRuleCall_2_0 = (RuleCall)cInterfaceNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceHerdadaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceHerdadaInterface_nameParserRuleCall_3_1_0 = (RuleCall)cInterfaceHerdadaAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInterfacesHerdadasAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0 = (RuleCall)cInterfacesHerdadasAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Interface_declaration:
		//	modifiers+=Modifier* "interface" interfaceName=ID ("extends" interfaceHerdada=Interface_name (","
		//	interfacesHerdadas+=Interface_name)*)? "{" / *(fieldDeclaration = Field_declaration)* * / "}";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "interface" interfaceName=ID ("extends" interfaceHerdada=Interface_name (","
		//interfacesHerdadas+=Interface_name)*)? "{" / *(fieldDeclaration = Field_declaration)* * / "}"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//interfaceName=ID
		public Assignment getInterfaceNameAssignment_2() { return cInterfaceNameAssignment_2; }

		//ID
		public RuleCall getInterfaceNameIDTerminalRuleCall_2_0() { return cInterfaceNameIDTerminalRuleCall_2_0; }

		//("extends" interfaceHerdada=Interface_name ("," interfacesHerdadas+=Interface_name)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//interfaceHerdada=Interface_name
		public Assignment getInterfaceHerdadaAssignment_3_1() { return cInterfaceHerdadaAssignment_3_1; }

		//Interface_name
		public RuleCall getInterfaceHerdadaInterface_nameParserRuleCall_3_1_0() { return cInterfaceHerdadaInterface_nameParserRuleCall_3_1_0; }

		//("," interfacesHerdadas+=Interface_name)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//interfacesHerdadas+=Interface_name
		public Assignment getInterfacesHerdadasAssignment_3_2_1() { return cInterfacesHerdadasAssignment_3_2_1; }

		//Interface_name
		public RuleCall getInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0() { return cInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		/// *(fieldDeclaration = Field_declaration)* * / "}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Class_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassHerdadaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassHerdadaClass_nameParserRuleCall_3_1_0 = (RuleCall)cClassHerdadaAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceImplementadaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInterfaceImplementadaInterface_nameParserRuleCall_4_1_0 = (RuleCall)cInterfaceImplementadaAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInterfacesImplementadasAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0 = (RuleCall)cInterfacesImplementadasAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFieldsDeclarationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsDeclarationField_declarationParserRuleCall_6_0 = (RuleCall)cFieldsDeclarationAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class_declaration:
		//	modifiers+=Modifier* "class" className=ID ("extends" classHerdada=Class_name)? ("implements"
		//	interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? "{"
		//	fieldsDeclaration+=Field_declaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "class" className=ID ("extends" classHerdada=Class_name)? ("implements"
		//interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? "{"
		//fieldsDeclaration+=Field_declaration* "}"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//("extends" classHerdada=Class_name)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//classHerdada=Class_name
		public Assignment getClassHerdadaAssignment_3_1() { return cClassHerdadaAssignment_3_1; }

		//Class_name
		public RuleCall getClassHerdadaClass_nameParserRuleCall_3_1_0() { return cClassHerdadaClass_nameParserRuleCall_3_1_0; }

		//("implements" interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//interfaceImplementada=Interface_name
		public Assignment getInterfaceImplementadaAssignment_4_1() { return cInterfaceImplementadaAssignment_4_1; }

		//Interface_name
		public RuleCall getInterfaceImplementadaInterface_nameParserRuleCall_4_1_0() { return cInterfaceImplementadaInterface_nameParserRuleCall_4_1_0; }

		//("," interfacesImplementadas+=Interface_name)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//interfacesImplementadas+=Interface_name
		public Assignment getInterfacesImplementadasAssignment_4_2_1() { return cInterfacesImplementadasAssignment_4_2_1; }

		//Interface_name
		public RuleCall getInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0() { return cInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//fieldsDeclaration+=Field_declaration*
		public Assignment getFieldsDeclarationAssignment_6() { return cFieldsDeclarationAssignment_6; }

		//Field_declaration
		public RuleCall getFieldsDeclarationField_declarationParserRuleCall_6_0() { return cFieldsDeclarationField_declarationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Field_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCommentAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCommentDOC_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0 = (RuleCall)cVariableDeclarationAssignment_0_1_0.eContents().get(0);
		private final Assignment cContructorNameAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cContructorNameConstructor_declarationParserRuleCall_0_1_1_0 = (RuleCall)cContructorNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cMethodNameMethod_declarationParserRuleCall_0_1_2_0 = (RuleCall)cMethodNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cStaticinitializerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStaticinitializerStatic_initializerParserRuleCall_1_0 = (RuleCall)cStaticinitializerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cField_declarationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Field_declaration:
		//	comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//	methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";";
		@Override public ParserRule getRule() { return rule; }

		//comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//methodName=Method_declaration)
		public Group getGroup_0() { return cGroup_0; }

		//comment=DOC_COMMENT?
		public Assignment getCommentAssignment_0_0() { return cCommentAssignment_0_0; }

		//DOC_COMMENT
		public RuleCall getCommentDOC_COMMENTTerminalRuleCall_0_0_0() { return cCommentDOC_COMMENTTerminalRuleCall_0_0_0; }

		//variableDeclaration=Variable_declaration | contructorName=Constructor_declaration | methodName=Method_declaration
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//variableDeclaration=Variable_declaration
		public Assignment getVariableDeclarationAssignment_0_1_0() { return cVariableDeclarationAssignment_0_1_0; }

		//Variable_declaration
		public RuleCall getVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0() { return cVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0; }

		//contructorName=Constructor_declaration
		public Assignment getContructorNameAssignment_0_1_1() { return cContructorNameAssignment_0_1_1; }

		//Constructor_declaration
		public RuleCall getContructorNameConstructor_declarationParserRuleCall_0_1_1_0() { return cContructorNameConstructor_declarationParserRuleCall_0_1_1_0; }

		//methodName=Method_declaration
		public Assignment getMethodNameAssignment_0_1_2() { return cMethodNameAssignment_0_1_2; }

		//Method_declaration
		public RuleCall getMethodNameMethod_declarationParserRuleCall_0_1_2_0() { return cMethodNameMethod_declarationParserRuleCall_0_1_2_0; }

		//staticinitializer=Static_initializer
		public Assignment getStaticinitializerAssignment_1() { return cStaticinitializerAssignment_1; }

		//Static_initializer
		public RuleCall getStaticinitializerStatic_initializerParserRuleCall_1_0() { return cStaticinitializerStatic_initializerParserRuleCall_1_0; }

		//{Field_declaration} ";"
		public Group getGroup_2() { return cGroup_2; }

		//{Field_declaration}
		public Action getField_declarationAction_2_0() { return cField_declarationAction_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class Method_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersMethodModifierParserRuleCall_0_0 = (RuleCall)cModifiersMethodAssignment_0.eContents().get(0);
		private final Assignment cTypeMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMethodTypeParserRuleCall_1_0 = (RuleCall)cTypeMethodAssignment_1.eContents().get(0);
		private final Assignment cNameMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameMethodIDTerminalRuleCall_2_0 = (RuleCall)cNameMethodAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterListMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterListMethodParameter_listParserRuleCall_4_0 = (RuleCall)cParameterListMethodAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cStatementMethodAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cStatementMethodStatement_blockParserRuleCall_7_0_0 = (RuleCall)cStatementMethodAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//Method_declaration:
		//	modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID "(" parameterListMethod=Parameter_list? ")" "[]"*
		//	(statementMethod=Statement_block | ";");
		@Override public ParserRule getRule() { return rule; }

		//modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID "(" parameterListMethod=Parameter_list? ")" "[]"*
		//(statementMethod=Statement_block | ";")
		public Group getGroup() { return cGroup; }

		//modifiersMethod+=Modifier*
		public Assignment getModifiersMethodAssignment_0() { return cModifiersMethodAssignment_0; }

		//Modifier
		public RuleCall getModifiersMethodModifierParserRuleCall_0_0() { return cModifiersMethodModifierParserRuleCall_0_0; }

		//typeMethod=Type
		public Assignment getTypeMethodAssignment_1() { return cTypeMethodAssignment_1; }

		//Type
		public RuleCall getTypeMethodTypeParserRuleCall_1_0() { return cTypeMethodTypeParserRuleCall_1_0; }

		//nameMethod=ID
		public Assignment getNameMethodAssignment_2() { return cNameMethodAssignment_2; }

		//ID
		public RuleCall getNameMethodIDTerminalRuleCall_2_0() { return cNameMethodIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameterListMethod=Parameter_list?
		public Assignment getParameterListMethodAssignment_4() { return cParameterListMethodAssignment_4; }

		//Parameter_list
		public RuleCall getParameterListMethodParameter_listParserRuleCall_4_0() { return cParameterListMethodParameter_listParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"[]"*
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_6() { return cLeftSquareBracketRightSquareBracketKeyword_6; }

		//statementMethod=Statement_block | ";"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//statementMethod=Statement_block
		public Assignment getStatementMethodAssignment_7_0() { return cStatementMethodAssignment_7_0; }

		//Statement_block
		public RuleCall getStatementMethodStatement_blockParserRuleCall_7_0_0() { return cStatementMethodStatement_blockParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}

	public class Constructor_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersConstructorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersConstructorModifierParserRuleCall_0_0 = (RuleCall)cModifiersConstructorAssignment_0.eContents().get(0);
		private final Assignment cNameConstructorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameConstructorIDTerminalRuleCall_1_0 = (RuleCall)cNameConstructorAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterListConstructorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListConstructorParameter_listParserRuleCall_3_0 = (RuleCall)cParameterListConstructorAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementConstructorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementConstructorStatement_blockParserRuleCall_5_0 = (RuleCall)cStatementConstructorAssignment_5.eContents().get(0);
		
		//Constructor_declaration:
		//	modifiersConstructor+=Modifier* nameConstructor=ID "(" parameterListConstructor=Parameter_list? ")"
		//	statementConstructor=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//modifiersConstructor+=Modifier* nameConstructor=ID "(" parameterListConstructor=Parameter_list? ")"
		//statementConstructor=Statement_block
		public Group getGroup() { return cGroup; }

		//modifiersConstructor+=Modifier*
		public Assignment getModifiersConstructorAssignment_0() { return cModifiersConstructorAssignment_0; }

		//Modifier
		public RuleCall getModifiersConstructorModifierParserRuleCall_0_0() { return cModifiersConstructorModifierParserRuleCall_0_0; }

		//nameConstructor=ID
		public Assignment getNameConstructorAssignment_1() { return cNameConstructorAssignment_1; }

		//ID
		public RuleCall getNameConstructorIDTerminalRuleCall_1_0() { return cNameConstructorIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameterListConstructor=Parameter_list?
		public Assignment getParameterListConstructorAssignment_3() { return cParameterListConstructorAssignment_3; }

		//Parameter_list
		public RuleCall getParameterListConstructorParameter_listParserRuleCall_3_0() { return cParameterListConstructorParameter_listParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//statementConstructor=Statement_block
		public Assignment getStatementConstructorAssignment_5() { return cStatementConstructorAssignment_5; }

		//Statement_block
		public RuleCall getStatementConstructorStatement_blockParserRuleCall_5_0() { return cStatementConstructorStatement_blockParserRuleCall_5_0; }
	}

	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameter_list:
		//	parameter=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameter=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameter=Parameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0() { return cParameterParameterParserRuleCall_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cParameterNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterNameIDTerminalRuleCall_1_0 = (RuleCall)cParameterNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameter:
		//	type=Type parameterName=ID "[]"*;
		@Override public ParserRule getRule() { return rule; }

		//type=Type parameterName=ID "[]"*
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//parameterName=ID
		public Assignment getParameterNameAssignment_1() { return cParameterNameAssignment_1; }

		//ID
		public RuleCall getParameterNameIDTerminalRuleCall_1_0() { return cParameterNameIDTerminalRuleCall_1_0; }

		//"[]"*
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2() { return cLeftSquareBracketRightSquareBracketKeyword_2; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersVariableModifierParserRuleCall_0_0 = (RuleCall)cModifiersVariableAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableVariable_declaratorParserRuleCall_2_0 = (RuleCall)cNameVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNamesVariable_declaratorParserRuleCall_3_1_0 = (RuleCall)cNamesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable_declaration:
		//	modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";";
		@Override public ParserRule getRule() { return rule; }

		//modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";"
		public Group getGroup() { return cGroup; }

		//modifiersVariable+=Modifier*
		public Assignment getModifiersVariableAssignment_0() { return cModifiersVariableAssignment_0; }

		//Modifier
		public RuleCall getModifiersVariableModifierParserRuleCall_0_0() { return cModifiersVariableModifierParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//nameVariable=Variable_declarator
		public Assignment getNameVariableAssignment_2() { return cNameVariableAssignment_2; }

		//Variable_declarator
		public RuleCall getNameVariableVariable_declaratorParserRuleCall_2_0() { return cNameVariableVariable_declaratorParserRuleCall_2_0; }

		//("," names+=Variable_declarator)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=Variable_declarator
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//Variable_declarator
		public RuleCall getNamesVariable_declaratorParserRuleCall_3_1_0() { return cNamesVariable_declaratorParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Variable_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0 = (RuleCall)cNameVariableAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Variable_declarator:
		//	nameVariable=ID "[]"* //( "=" Variable_initialize)?
		//;
		@Override public ParserRule getRule() { return rule; }

		//nameVariable=ID "[]"* //( "=" Variable_initialize)?
		public Group getGroup() { return cGroup; }

		//nameVariable=ID
		public Assignment getNameVariableAssignment_0() { return cNameVariableAssignment_0; }

		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0() { return cNameVariableIDTerminalRuleCall_0_0; }

		//"[]"*
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_0_0 = (RuleCall)cTypeSpecifierAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////Variable_initialize:
		// //	
		// //;
		//Type:
		//	typeSpecifier=Type_specifier "[]"*;
		@Override public ParserRule getRule() { return rule; }

		//typeSpecifier=Type_specifier "[]"*
		public Group getGroup() { return cGroup; }

		//typeSpecifier=Type_specifier
		public Assignment getTypeSpecifierAssignment_0() { return cTypeSpecifierAssignment_0; }

		//Type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_0_0() { return cTypeSpecifierType_specifierParserRuleCall_0_0; }

		//"[]"*
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
	}

	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCharKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final RuleCall cClass_nameParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Type_specifier:
		//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | Class_name;
		@Override public ParserRule getRule() { return rule; }

		//"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | Class_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"char"
		public Keyword getCharKeyword_2() { return cCharKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"float"
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"double"
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }

		//Class_name
		public RuleCall getClass_nameParserRuleCall_8() { return cClass_nameParserRuleCall_8; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMODTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTATICTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Modifier:
		//	MOD | STATIC;
		@Override public ParserRule getRule() { return rule; }

		//MOD | STATIC
		public Alternatives getAlternatives() { return cAlternatives; }

		//MOD
		public RuleCall getMODTerminalRuleCall_0() { return cMODTerminalRuleCall_0; }

		//STATIC
		public RuleCall getSTATICTerminalRuleCall_1() { return cSTATICTerminalRuleCall_1; }
	}

	public class Static_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Static_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStaticSTATICTerminalRuleCall_0_0 = (RuleCall)cStaticAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStatement_blockParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Static_initializer:
		//	static=STATIC name=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//static=STATIC name=Statement_block
		public Group getGroup() { return cGroup; }

		//static=STATIC
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//STATIC
		public RuleCall getStaticSTATICTerminalRuleCall_0_0() { return cStaticSTATICTerminalRuleCall_0_0; }

		//name=Statement_block
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Statement_block
		public RuleCall getNameStatement_blockParserRuleCall_1_0() { return cNameStatement_blockParserRuleCall_1_0; }
	}

	public class Statement_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatmentsStatementParserRuleCall_1_0 = (RuleCall)cStatmentsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Statement_block:
		//	"{" statments+=Statement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" statments+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statments+=Statement*
		public Assignment getStatmentsAssignment_1() { return cStatmentsAssignment_1; }

		//Statement
		public RuleCall getStatmentsStatementParserRuleCall_1_0() { return cStatmentsStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatement_blockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionStatementExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionStatementAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cVariable_declarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cIfStatementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIfStatementIf_statementParserRuleCall_3_0 = (RuleCall)cIfStatementAssignment_3.eContents().get(0);
		private final Assignment cDoStatementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDoStatementDo_StatementParserRuleCall_4_0 = (RuleCall)cDoStatementAssignment_4.eContents().get(0);
		private final Assignment cWhileStatementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cWhileStatementWhile_StatementParserRuleCall_5_0 = (RuleCall)cWhileStatementAssignment_5.eContents().get(0);
		private final Assignment cForStatementAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cForStatementFor_StatementParserRuleCall_6_0 = (RuleCall)cForStatementAssignment_6.eContents().get(0);
		private final Assignment cTryStatementAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cTryStatementTry_statementParserRuleCall_7_0 = (RuleCall)cTryStatementAssignment_7.eContents().get(0);
		private final Assignment cSwitchStatementAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cSwitchStatementSwitch_statementParserRuleCall_8_0 = (RuleCall)cSwitchStatementAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cStatementAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cSynchronizedKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cSyncStatementAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cSyncStatementStatementParserRuleCall_9_3_0 = (RuleCall)cSyncStatementAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cStatementAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cReturnKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cStatementAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cThrowKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cSemicolonKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cNameStatementAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final RuleCall cNameStatementIDTerminalRuleCall_12_0_0 = (RuleCall)cNameStatementAssignment_12_0.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cStatementAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_12_2_0 = (RuleCall)cStatementAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cStatementAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cBreakKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cNameAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_13_2_0 = (RuleCall)cNameAssignment_13_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cStatementAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cContinueKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cNameAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_14_2_0 = (RuleCall)cNameAssignment_14_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cStatementAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		
		////FIXME: resolver Expression em todas operações 
		//Statement:
		//	Statement_block | expressionStatement=Expression ";" | Variable_declaration | ifStatement=If_statement |
		//	doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement | tryStatement=Try_statement |
		//	switchStatement=Switch_statement | {Statement} "synchronized(" / *Expression * / ")" syncStatement=Statement |
		//	{Statement} "return" / *(Expression)? * / ";" | {Statement} "throw" / *(Expression)? * / ";" | nameStatement=ID ":"
		//	statement=Statement | {Statement} "break" name=ID? ";" | {Statement} "continue" name=ID? ";" | {Statement} ";";
		@Override public ParserRule getRule() { return rule; }

		//Statement_block | expressionStatement=Expression ";" | Variable_declaration | ifStatement=If_statement |
		//doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement | tryStatement=Try_statement |
		//switchStatement=Switch_statement | {Statement} "synchronized(" / *Expression * / ")" syncStatement=Statement |
		//{Statement} "return" / *(Expression)? * / ";" | {Statement} "throw" / *(Expression)? * / ";" | nameStatement=ID ":"
		//statement=Statement | {Statement} "break" name=ID? ";" | {Statement} "continue" name=ID? ";" | {Statement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Statement_block
		public RuleCall getStatement_blockParserRuleCall_0() { return cStatement_blockParserRuleCall_0; }

		//expressionStatement=Expression ";"
		public Group getGroup_1() { return cGroup_1; }

		//expressionStatement=Expression
		public Assignment getExpressionStatementAssignment_1_0() { return cExpressionStatementAssignment_1_0; }

		//Expression
		public RuleCall getExpressionStatementExpressionParserRuleCall_1_0_0() { return cExpressionStatementExpressionParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//Variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_2() { return cVariable_declarationParserRuleCall_2; }

		//ifStatement=If_statement
		public Assignment getIfStatementAssignment_3() { return cIfStatementAssignment_3; }

		//If_statement
		public RuleCall getIfStatementIf_statementParserRuleCall_3_0() { return cIfStatementIf_statementParserRuleCall_3_0; }

		//doStatement=Do_Statement
		public Assignment getDoStatementAssignment_4() { return cDoStatementAssignment_4; }

		//Do_Statement
		public RuleCall getDoStatementDo_StatementParserRuleCall_4_0() { return cDoStatementDo_StatementParserRuleCall_4_0; }

		//whileStatement=While_Statement
		public Assignment getWhileStatementAssignment_5() { return cWhileStatementAssignment_5; }

		//While_Statement
		public RuleCall getWhileStatementWhile_StatementParserRuleCall_5_0() { return cWhileStatementWhile_StatementParserRuleCall_5_0; }

		//forStatement=For_Statement
		public Assignment getForStatementAssignment_6() { return cForStatementAssignment_6; }

		//For_Statement
		public RuleCall getForStatementFor_StatementParserRuleCall_6_0() { return cForStatementFor_StatementParserRuleCall_6_0; }

		//tryStatement=Try_statement
		public Assignment getTryStatementAssignment_7() { return cTryStatementAssignment_7; }

		//Try_statement
		public RuleCall getTryStatementTry_statementParserRuleCall_7_0() { return cTryStatementTry_statementParserRuleCall_7_0; }

		//switchStatement=Switch_statement
		public Assignment getSwitchStatementAssignment_8() { return cSwitchStatementAssignment_8; }

		//Switch_statement
		public RuleCall getSwitchStatementSwitch_statementParserRuleCall_8_0() { return cSwitchStatementSwitch_statementParserRuleCall_8_0; }

		//{Statement} "synchronized(" / *Expression * / ")" syncStatement=Statement
		public Group getGroup_9() { return cGroup_9; }

		//{Statement}
		public Action getStatementAction_9_0() { return cStatementAction_9_0; }

		//"synchronized("
		public Keyword getSynchronizedKeyword_9_1() { return cSynchronizedKeyword_9_1; }

		/// *Expression * / ")"
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }

		//syncStatement=Statement
		public Assignment getSyncStatementAssignment_9_3() { return cSyncStatementAssignment_9_3; }

		//Statement
		public RuleCall getSyncStatementStatementParserRuleCall_9_3_0() { return cSyncStatementStatementParserRuleCall_9_3_0; }

		//{Statement} "return" / *(Expression)? * / ";"
		public Group getGroup_10() { return cGroup_10; }

		//{Statement}
		public Action getStatementAction_10_0() { return cStatementAction_10_0; }

		//"return"
		public Keyword getReturnKeyword_10_1() { return cReturnKeyword_10_1; }

		/// *(Expression)? * / ";"
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }

		//{Statement} "throw" / *(Expression)? * / ";"
		public Group getGroup_11() { return cGroup_11; }

		//{Statement}
		public Action getStatementAction_11_0() { return cStatementAction_11_0; }

		//"throw"
		public Keyword getThrowKeyword_11_1() { return cThrowKeyword_11_1; }

		/// *(Expression)? * / ";"
		public Keyword getSemicolonKeyword_11_2() { return cSemicolonKeyword_11_2; }

		//nameStatement=ID ":" statement=Statement
		public Group getGroup_12() { return cGroup_12; }

		//nameStatement=ID
		public Assignment getNameStatementAssignment_12_0() { return cNameStatementAssignment_12_0; }

		//ID
		public RuleCall getNameStatementIDTerminalRuleCall_12_0_0() { return cNameStatementIDTerminalRuleCall_12_0_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//statement=Statement
		public Assignment getStatementAssignment_12_2() { return cStatementAssignment_12_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_12_2_0() { return cStatementStatementParserRuleCall_12_2_0; }

		//{Statement} "break" name=ID? ";"
		public Group getGroup_13() { return cGroup_13; }

		//{Statement}
		public Action getStatementAction_13_0() { return cStatementAction_13_0; }

		//"break"
		public Keyword getBreakKeyword_13_1() { return cBreakKeyword_13_1; }

		//name=ID?
		public Assignment getNameAssignment_13_2() { return cNameAssignment_13_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_13_2_0() { return cNameIDTerminalRuleCall_13_2_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3() { return cSemicolonKeyword_13_3; }

		//{Statement} "continue" name=ID? ";"
		public Group getGroup_14() { return cGroup_14; }

		//{Statement}
		public Action getStatementAction_14_0() { return cStatementAction_14_0; }

		//"continue"
		public Keyword getContinueKeyword_14_1() { return cContinueKeyword_14_1; }

		//name=ID?
		public Assignment getNameAssignment_14_2() { return cNameAssignment_14_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_14_2_0() { return cNameIDTerminalRuleCall_14_2_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3() { return cSemicolonKeyword_14_3; }

		//{Statement} ";"
		public Group getGroup_15() { return cGroup_15; }

		//{Statement}
		public Action getStatementAction_15_0() { return cStatementAction_15_0; }

		//";"
		public Keyword getSemicolonKeyword_15_1() { return cSemicolonKeyword_15_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpressionLineAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionLineExpression_lineParserRuleCall_0_3_0 = (RuleCall)cExpressionLineAssignment_0_3.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNullKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpression_lineParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cSuperKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cThisKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cInstanceofKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cClassNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cClassNameClass_nameParserRuleCall_5_1_0 = (RuleCall)cClassNameAssignment_5_1.eContents().get(0);
		
		//Expression:
		//	"(" expression=Expression ")" expressionLine=Expression_line | name=ID | "null" expression=Expression_line | "super"
		//	| "this" | "instanceof" className=Class_name;
		@Override public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")" expressionLine=Expression_line | name=ID | "null" expression=Expression_line | "super" |
		//"this" | "instanceof" className=Class_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expression=Expression ")" expressionLine=Expression_line
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//expressionLine=Expression_line
		public Assignment getExpressionLineAssignment_0_3() { return cExpressionLineAssignment_0_3; }

		//Expression_line
		public RuleCall getExpressionLineExpression_lineParserRuleCall_0_3_0() { return cExpressionLineExpression_lineParserRuleCall_0_3_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"null" expression=Expression_line
		public Group getGroup_2() { return cGroup_2; }

		//"null"
		public Keyword getNullKeyword_2_0() { return cNullKeyword_2_0; }

		//expression=Expression_line
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression_line
		public RuleCall getExpressionExpression_lineParserRuleCall_2_1_0() { return cExpressionExpression_lineParserRuleCall_2_1_0; }

		//"super"
		public Keyword getSuperKeyword_3() { return cSuperKeyword_3; }

		//"this"
		public Keyword getThisKeyword_4() { return cThisKeyword_4; }

		//"instanceof" className=Class_name
		public Group getGroup_5() { return cGroup_5; }

		//"instanceof"
		public Keyword getInstanceofKeyword_5_0() { return cInstanceofKeyword_5_0; }

		//className=Class_name
		public Assignment getClassNameAssignment_5_1() { return cClassNameAssignment_5_1; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_5_1_0() { return cClassNameClass_nameParserRuleCall_5_1_0; }
	}

	public class Expression_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsArglistParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Expression_line:
		//	"(" args=Arglist? ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" args=Arglist? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//args=Arglist?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }

		//Arglist
		public RuleCall getArgsArglistParserRuleCall_1_0() { return cArgsArglistParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ArglistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arglist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//Arglist:
		//	expression=Expression ("," expressions+=Expression)*;
		@Override public ParserRule getRule() { return rule; }

		//expression=Expression ("," expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class For_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVariable_declarationParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementInForAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementInForStatementParserRuleCall_4_0 = (RuleCall)cStatementInForAssignment_4.eContents().get(0);
		
		//For_Statement:
		//	"for(" (Variable_declaration | / *(Expression  ";") |* / ";") / *(Expression)?* / ";" / *(Expression)?* / ";)"
		//	statementInFor=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"for(" (Variable_declaration | / *(Expression  ";") |* / ";") / *(Expression)?* / ";" / *(Expression)?* / ";)"
		//statementInFor=Statement
		public Group getGroup() { return cGroup; }

		//"for("
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//Variable_declaration | / *(Expression  ";") |* / ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_1_0() { return cVariable_declarationParserRuleCall_1_0; }

		/// *(Expression  ";") |* / ";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		/// *(Expression)?* / ";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		/// *(Expression)?* / ";)"
		public Keyword getSemicolonRightParenthesisKeyword_3() { return cSemicolonRightParenthesisKeyword_3; }

		//statementInFor=Statement
		public Assignment getStatementInForAssignment_4() { return cStatementInForAssignment_4; }

		//Statement
		public RuleCall getStatementInForStatementParserRuleCall_4_0() { return cStatementInForStatementParserRuleCall_4_0; }
	}

	public class Switch_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCaseKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cDefaultKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cStatementAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_2_0 = (RuleCall)cStatementAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Switch_statement:
		//	"switch(" / *Expression * / "){" ("case" / *Expression * / ":" | "default:" | statement+=Statement)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"switch(" / *Expression * / "){" ("case" / *Expression * / ":" | "default:" | statement+=Statement)* "}"
		public Group getGroup() { return cGroup; }

		//"switch("
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		/// *Expression * / "){"
		public Keyword getRightParenthesisLeftCurlyBracketKeyword_1() { return cRightParenthesisLeftCurlyBracketKeyword_1; }

		//("case" / *Expression * / ":" | "default:" | statement+=Statement)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"case" / *Expression * / ":"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"case"
		public Keyword getCaseKeyword_2_0_0() { return cCaseKeyword_2_0_0; }

		/// *Expression * / ":"
		public Keyword getColonKeyword_2_0_1() { return cColonKeyword_2_0_1; }

		//"default:"
		public Keyword getDefaultKeyword_2_1() { return cDefaultKeyword_2_1; }

		//statement+=Statement
		public Assignment getStatementAssignment_2_2() { return cStatementAssignment_2_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_2_0() { return cStatementStatementParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class While_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//While_Statement:
		//	"while(" / *Epression * / ")" statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"while(" / *Epression * / ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while("
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		/// *Epression * / ")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }

		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}

	public class Do_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Do_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Do_Statement:
		//	"do" statement=Statement "while(" / *doWhileExpression = Expression* / ");";
		@Override public ParserRule getRule() { return rule; }

		//"do" statement=Statement "while(" / *doWhileExpression = Expression* / ");"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"while("
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		/// *doWhileExpression = Expression* / ");"
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseStatementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_3_1_0 = (RuleCall)cElseStatementAssignment_3_1.eContents().get(0);
		
		//If_statement:
		//	"if(" / *expression* / ")" Statement ("else" elseStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if(" / *expression* / ")" Statement ("else" elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if("
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		/// *expression* / ")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }

		//Statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }

		//(=> "else" elseStatement=Statement)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_3_1() { return cElseStatementAssignment_3_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_3_1_0() { return cElseStatementStatementParserRuleCall_3_1_0; }
	}

	public class Try_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Try_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTryStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryStatementStatementParserRuleCall_1_0 = (RuleCall)cTryStatementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_2_0 = (RuleCall)cParametersAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_2_4_0 = (RuleCall)cStatementAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFinallyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatementFinallyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementFinallyStatementParserRuleCall_3_1_0 = (RuleCall)cStatementFinallyAssignment_3_1.eContents().get(0);
		
		//Try_statement:
		//	"try" tryStatement=Statement ("catch" "(" parameters+=Parameter ")" statement+=Statement)* ("finally"
		//	statementFinally=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"try" tryStatement=Statement ("catch" "(" parameters+=Parameter ")" statement+=Statement)* ("finally"
		//statementFinally=Statement)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//tryStatement=Statement
		public Assignment getTryStatementAssignment_1() { return cTryStatementAssignment_1; }

		//Statement
		public RuleCall getTryStatementStatementParserRuleCall_1_0() { return cTryStatementStatementParserRuleCall_1_0; }

		//(=> "catch" "(" parameters+=Parameter ")" statement+=Statement)*
		public Group getGroup_2() { return cGroup_2; }

		//=> "catch"
		public Keyword getCatchKeyword_2_0() { return cCatchKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2() { return cParametersAssignment_2_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_0() { return cParametersParameterParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//statement+=Statement
		public Assignment getStatementAssignment_2_4() { return cStatementAssignment_2_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_4_0() { return cStatementStatementParserRuleCall_2_4_0; }

		//(=> "finally" statementFinally=Statement)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0() { return cFinallyKeyword_3_0; }

		//statementFinally=Statement
		public Assignment getStatementFinallyAssignment_3_1() { return cStatementFinallyAssignment_3_1; }

		//Statement
		public RuleCall getStatementFinallyStatementParserRuleCall_3_1_0() { return cStatementFinallyStatementParserRuleCall_3_1_0; }
	}

	public class Import_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClassNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cClassNameClass_nameParserRuleCall_1_0_0_0 = (RuleCall)cClassNameAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPacNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPacNamePackage_nameParserRuleCall_1_1_0_0 = (RuleCall)cPacNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopAsteriskSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		////FIXME:força a descer por className --  | interfaceName = Interface_name";"
		//Import_statement:
		//	"import" (className=Class_name ";" | pacName=Package_name ".*;");
		@Override public ParserRule getRule() { return rule; }

		//"import" (className=Class_name ";" | pacName=Package_name ".*;")
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//className=Class_name ";" | pacName=Package_name ".*;"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//className=Class_name ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//className=Class_name
		public Assignment getClassNameAssignment_1_0_0() { return cClassNameAssignment_1_0_0; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_1_0_0_0() { return cClassNameClass_nameParserRuleCall_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//pacName=Package_name ".*;"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//pacName=Package_name
		public Assignment getPacNameAssignment_1_1_0() { return cPacNameAssignment_1_1_0; }

		//Package_name
		public RuleCall getPacNamePackage_nameParserRuleCall_1_1_0_0() { return cPacNamePackage_nameParserRuleCall_1_1_0_0; }

		//".*;"
		public Keyword getFullStopAsteriskSemicolonKeyword_1_1_1() { return cFullStopAsteriskSemicolonKeyword_1_1_1; }
	}

	public class Class_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Class_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Interface_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Interface_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Package_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPacNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPacNamePackage_nameParserRuleCall_1_0 = (RuleCall)cPacNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package_statement:
		//	"package" pacName=Package_name ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" pacName=Package_name ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//pacName=Package_name
		public Assignment getPacNameAssignment_1() { return cPacNameAssignment_1; }

		//Package_name
		public RuleCall getPacNamePackage_nameParserRuleCall_1_0() { return cPacNamePackage_nameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Package_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackage_name_lineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name:
		//	ID Package_name_line;
		@Override public ParserRule getRule() { return rule; }

		//ID Package_name_line
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Package_name_line
		public RuleCall getPackage_name_lineParserRuleCall_1() { return cPackage_name_lineParserRuleCall_1; }
	}

	public class Package_name_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_name_line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name_line:
		//	("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//("." ID)*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final Compilation_unitElements pCompilation_unit;
	private final Type_declarationElements pType_declaration;
	private final Interface_declarationElements pInterface_declaration;
	private final Class_declarationElements pClass_declaration;
	private final Field_declarationElements pField_declaration;
	private final Method_declarationElements pMethod_declaration;
	private final Constructor_declarationElements pConstructor_declaration;
	private final Parameter_listElements pParameter_list;
	private final ParameterElements pParameter;
	private final Variable_declarationElements pVariable_declaration;
	private final Variable_declaratorElements pVariable_declarator;
	private final TypeElements pType;
	private final Type_specifierElements pType_specifier;
	private final ModifierElements pModifier;
	private final Static_initializerElements pStatic_initializer;
	private final TerminalRule tSTATIC;
	private final Statement_blockElements pStatement_block;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final Expression_lineElements pExpression_line;
	private final ArglistElements pArglist;
	private final For_StatementElements pFor_Statement;
	private final Switch_statementElements pSwitch_statement;
	private final While_StatementElements pWhile_Statement;
	private final Do_StatementElements pDo_Statement;
	private final If_statementElements pIf_statement;
	private final Try_statementElements pTry_statement;
	private final Import_statementElements pImport_statement;
	private final Class_nameElements pClass_name;
	private final Interface_nameElements pInterface_name;
	private final Package_statementElements pPackage_statement;
	private final Package_nameElements pPackage_name;
	private final Package_name_lineElements pPackage_name_line;
	private final TerminalRule tMOD;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tDOC_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCompilation_unit = new Compilation_unitElements();
		this.pType_declaration = new Type_declarationElements();
		this.pInterface_declaration = new Interface_declarationElements();
		this.pClass_declaration = new Class_declarationElements();
		this.pField_declaration = new Field_declarationElements();
		this.pMethod_declaration = new Method_declarationElements();
		this.pConstructor_declaration = new Constructor_declarationElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter = new ParameterElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pVariable_declarator = new Variable_declaratorElements();
		this.pType = new TypeElements();
		this.pType_specifier = new Type_specifierElements();
		this.pModifier = new ModifierElements();
		this.pStatic_initializer = new Static_initializerElements();
		this.tSTATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STATIC");
		this.pStatement_block = new Statement_blockElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_line = new Expression_lineElements();
		this.pArglist = new ArglistElements();
		this.pFor_Statement = new For_StatementElements();
		this.pSwitch_statement = new Switch_statementElements();
		this.pWhile_Statement = new While_StatementElements();
		this.pDo_Statement = new Do_StatementElements();
		this.pIf_statement = new If_statementElements();
		this.pTry_statement = new Try_statementElements();
		this.pImport_statement = new Import_statementElements();
		this.pClass_name = new Class_nameElements();
		this.pInterface_name = new Interface_nameElements();
		this.pPackage_statement = new Package_statementElements();
		this.pPackage_name = new Package_nameElements();
		this.pPackage_name_line = new Package_name_lineElements();
		this.tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MOD");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tDOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOC_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.compilador.java.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	greetings+=Compilation_unit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Compilation_unit:
	//	name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*;
	public Compilation_unitElements getCompilation_unitAccess() {
		return pCompilation_unit;
	}
	
	public ParserRule getCompilation_unitRule() {
		return getCompilation_unitAccess().getRule();
	}

	//Type_declaration:
	//	comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//Interface_declaration:
	//	modifiers+=Modifier* "interface" interfaceName=ID ("extends" interfaceHerdada=Interface_name (","
	//	interfacesHerdadas+=Interface_name)*)? "{" / *(fieldDeclaration = Field_declaration)* * / "}";
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//Class_declaration:
	//	modifiers+=Modifier* "class" className=ID ("extends" classHerdada=Class_name)? ("implements"
	//	interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? "{"
	//	fieldsDeclaration+=Field_declaration* "}";
	public Class_declarationElements getClass_declarationAccess() {
		return pClass_declaration;
	}
	
	public ParserRule getClass_declarationRule() {
		return getClass_declarationAccess().getRule();
	}

	//Field_declaration:
	//	comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
	//	methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";";
	public Field_declarationElements getField_declarationAccess() {
		return pField_declaration;
	}
	
	public ParserRule getField_declarationRule() {
		return getField_declarationAccess().getRule();
	}

	//Method_declaration:
	//	modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID "(" parameterListMethod=Parameter_list? ")" "[]"*
	//	(statementMethod=Statement_block | ";");
	public Method_declarationElements getMethod_declarationAccess() {
		return pMethod_declaration;
	}
	
	public ParserRule getMethod_declarationRule() {
		return getMethod_declarationAccess().getRule();
	}

	//Constructor_declaration:
	//	modifiersConstructor+=Modifier* nameConstructor=ID "(" parameterListConstructor=Parameter_list? ")"
	//	statementConstructor=Statement_block;
	public Constructor_declarationElements getConstructor_declarationAccess() {
		return pConstructor_declaration;
	}
	
	public ParserRule getConstructor_declarationRule() {
		return getConstructor_declarationAccess().getRule();
	}

	//Parameter_list:
	//	parameter=Parameter ("," parameters+=Parameter)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}

	//Parameter:
	//	type=Type parameterName=ID "[]"*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Variable_declaration:
	//	modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";";
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//Variable_declarator:
	//	nameVariable=ID "[]"* //( "=" Variable_initialize)?
	//;
	public Variable_declaratorElements getVariable_declaratorAccess() {
		return pVariable_declarator;
	}
	
	public ParserRule getVariable_declaratorRule() {
		return getVariable_declaratorAccess().getRule();
	}

	////Variable_initialize:
	// //	
	// //;
	//Type:
	//	typeSpecifier=Type_specifier "[]"*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Type_specifier:
	//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | Class_name;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//Modifier:
	//	MOD | STATIC;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//Static_initializer:
	//	static=STATIC name=Statement_block;
	public Static_initializerElements getStatic_initializerAccess() {
		return pStatic_initializer;
	}
	
	public ParserRule getStatic_initializerRule() {
		return getStatic_initializerAccess().getRule();
	}

	//terminal STATIC:
	//	"static";
	public TerminalRule getSTATICRule() {
		return tSTATIC;
	} 

	//Statement_block:
	//	"{" statments+=Statement* "}";
	public Statement_blockElements getStatement_blockAccess() {
		return pStatement_block;
	}
	
	public ParserRule getStatement_blockRule() {
		return getStatement_blockAccess().getRule();
	}

	////FIXME: resolver Expression em todas operações 
	//Statement:
	//	Statement_block | expressionStatement=Expression ";" | Variable_declaration | ifStatement=If_statement |
	//	doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement | tryStatement=Try_statement |
	//	switchStatement=Switch_statement | {Statement} "synchronized(" / *Expression * / ")" syncStatement=Statement |
	//	{Statement} "return" / *(Expression)? * / ";" | {Statement} "throw" / *(Expression)? * / ";" | nameStatement=ID ":"
	//	statement=Statement | {Statement} "break" name=ID? ";" | {Statement} "continue" name=ID? ";" | {Statement} ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Expression:
	//	"(" expression=Expression ")" expressionLine=Expression_line | name=ID | "null" expression=Expression_line | "super"
	//	| "this" | "instanceof" className=Class_name;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Expression_line:
	//	"(" args=Arglist? ")";
	public Expression_lineElements getExpression_lineAccess() {
		return pExpression_line;
	}
	
	public ParserRule getExpression_lineRule() {
		return getExpression_lineAccess().getRule();
	}

	//Arglist:
	//	expression=Expression ("," expressions+=Expression)*;
	public ArglistElements getArglistAccess() {
		return pArglist;
	}
	
	public ParserRule getArglistRule() {
		return getArglistAccess().getRule();
	}

	//For_Statement:
	//	"for(" (Variable_declaration | / *(Expression  ";") |* / ";") / *(Expression)?* / ";" / *(Expression)?* / ";)"
	//	statementInFor=Statement;
	public For_StatementElements getFor_StatementAccess() {
		return pFor_Statement;
	}
	
	public ParserRule getFor_StatementRule() {
		return getFor_StatementAccess().getRule();
	}

	//Switch_statement:
	//	"switch(" / *Expression * / "){" ("case" / *Expression * / ":" | "default:" | statement+=Statement)* "}";
	public Switch_statementElements getSwitch_statementAccess() {
		return pSwitch_statement;
	}
	
	public ParserRule getSwitch_statementRule() {
		return getSwitch_statementAccess().getRule();
	}

	//While_Statement:
	//	"while(" / *Epression * / ")" statement=Statement;
	public While_StatementElements getWhile_StatementAccess() {
		return pWhile_Statement;
	}
	
	public ParserRule getWhile_StatementRule() {
		return getWhile_StatementAccess().getRule();
	}

	//Do_Statement:
	//	"do" statement=Statement "while(" / *doWhileExpression = Expression* / ");";
	public Do_StatementElements getDo_StatementAccess() {
		return pDo_Statement;
	}
	
	public ParserRule getDo_StatementRule() {
		return getDo_StatementAccess().getRule();
	}

	//If_statement:
	//	"if(" / *expression* / ")" Statement ("else" elseStatement=Statement)?;
	public If_statementElements getIf_statementAccess() {
		return pIf_statement;
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//Try_statement:
	//	"try" tryStatement=Statement ("catch" "(" parameters+=Parameter ")" statement+=Statement)* ("finally"
	//	statementFinally=Statement)?;
	public Try_statementElements getTry_statementAccess() {
		return pTry_statement;
	}
	
	public ParserRule getTry_statementRule() {
		return getTry_statementAccess().getRule();
	}

	////FIXME:força a descer por className --  | interfaceName = Interface_name";"
	//Import_statement:
	//	"import" (className=Class_name ";" | pacName=Package_name ".*;");
	public Import_statementElements getImport_statementAccess() {
		return pImport_statement;
	}
	
	public ParserRule getImport_statementRule() {
		return getImport_statementAccess().getRule();
	}

	//Class_name:
	//	Package_name;
	public Class_nameElements getClass_nameAccess() {
		return pClass_name;
	}
	
	public ParserRule getClass_nameRule() {
		return getClass_nameAccess().getRule();
	}

	//Interface_name:
	//	Package_name;
	public Interface_nameElements getInterface_nameAccess() {
		return pInterface_name;
	}
	
	public ParserRule getInterface_nameRule() {
		return getInterface_nameAccess().getRule();
	}

	//Package_statement:
	//	"package" pacName=Package_name ";";
	public Package_statementElements getPackage_statementAccess() {
		return pPackage_statement;
	}
	
	public ParserRule getPackage_statementRule() {
		return getPackage_statementAccess().getRule();
	}

	//Package_name:
	//	ID Package_name_line;
	public Package_nameElements getPackage_nameAccess() {
		return pPackage_name;
	}
	
	public ParserRule getPackage_nameRule() {
		return getPackage_nameAccess().getRule();
	}

	//Package_name_line:
	//	("." ID)*;
	public Package_name_lineElements getPackage_name_lineAccess() {
		return pPackage_name_line;
	}
	
	public ParserRule getPackage_name_lineRule() {
		return getPackage_name_lineAccess().getRule();
	}

	//terminal MOD:
	//	"public" | "private" | "protected" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" | "transient";
	public TerminalRule getMODRule() {
		return tMOD;
	} 

	////override eclipse xtext terminals
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "0".."9" | "$" | "À".."￿")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	" " | "\t" | "\r" | "\n";
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal DOC_COMMENT:
	//	"/ **";
	public TerminalRule getDOC_COMMENTRule() {
		return tDOC_COMMENT;
	} 
}
