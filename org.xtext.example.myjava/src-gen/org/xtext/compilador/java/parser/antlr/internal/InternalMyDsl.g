/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.compilador.java.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.compilador.java.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.compilador.java.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsCompilation_unitParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleCompilation_unit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Compilation_unit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCompilation_unit
entryRuleCompilation_unit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilation_unitRule()); }
	 iv_ruleCompilation_unit=ruleCompilation_unit 
	 { $current=$iv_ruleCompilation_unit.current; } 
	 EOF 
;

// Rule Compilation_unit
ruleCompilation_unit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getNamePackage_statementParserRuleCall_0_0()); 
	    }
		lv_name_0_0=rulePackage_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Package_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getImportsImport_statementParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"Import_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getTypeDeclarationsType_declarationParserRuleCall_2_0()); 
	    }
		lv_typeDeclarations_2_0=ruleType_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		add(
       			$current, 
       			"typeDeclarations",
        		lv_typeDeclarations_2_0, 
        		"Type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleType_declaration
entryRuleType_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_declarationRule()); }
	 iv_ruleType_declaration=ruleType_declaration 
	 { $current=$iv_ruleType_declaration.current; } 
	 EOF 
;

// Rule Type_declaration
ruleType_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_comment_0_0=RULE_DOC_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getType_declarationAccess().getCommentDOC_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"DOC_COMMENT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getClassDecClass_declarationParserRuleCall_1_0_0()); 
	    }
		lv_classDec_1_0=ruleClass_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"classDec",
        		lv_classDec_1_0, 
        		"Class_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getInterfaceDecInterface_declarationParserRuleCall_1_1_0()); 
	    }
		lv_interfaceDec_2_0=ruleInterface_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"interfaceDec",
        		lv_interfaceDec_2_0, 
        		"Interface_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getType_declarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInterface_declaration
entryRuleInterface_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_declarationRule()); }
	 iv_ruleInterface_declaration=ruleInterface_declaration 
	 { $current=$iv_ruleInterface_declaration.current; } 
	 EOF 
;

// Rule Interface_declaration
ruleInterface_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterface_declarationAccess().getInterfaceKeyword_1());
    }
(
(
		lv_interfaceName_2_0=RULE_ID
		{
			newLeafNode(lv_interfaceName_2_0, grammarAccess.getInterface_declarationAccess().getInterfaceNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"interfaceName",
        		lv_interfaceName_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterface_declarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getInterfaceHerdadaInterface_nameParserRuleCall_3_1_0()); 
	    }
		lv_interfaceHerdada_4_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		set(
       			$current, 
       			"interfaceHerdada",
        		lv_interfaceHerdada_4_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterface_declarationAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0()); 
	    }
		lv_interfacesHerdadas_6_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"interfacesHerdadas",
        		lv_interfacesHerdadas_6_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterface_declarationAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInterface_declarationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleClass_declaration
entryRuleClass_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_declarationRule()); }
	 iv_ruleClass_declaration=ruleClass_declaration 
	 { $current=$iv_ruleClass_declaration.current; } 
	 EOF 
;

// Rule Class_declaration
ruleClass_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClass_declarationAccess().getClassKeyword_1());
    }
(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getClass_declarationAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClass_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClass_declarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getClassHerdadaClass_nameParserRuleCall_3_1_0()); 
	    }
		lv_classHerdada_4_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		set(
       			$current, 
       			"classHerdada",
        		lv_classHerdada_4_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='implements' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClass_declarationAccess().getImplementsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getInterfaceImplementadaInterface_nameParserRuleCall_4_1_0()); 
	    }
		lv_interfaceImplementada_6_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		set(
       			$current, 
       			"interfaceImplementada",
        		lv_interfaceImplementada_6_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClass_declarationAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0()); 
	    }
		lv_interfacesImplementadas_8_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"interfacesImplementadas",
        		lv_interfacesImplementadas_8_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getClass_declarationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getFieldsDeclarationField_declarationParserRuleCall_6_0()); 
	    }
		lv_fieldsDeclaration_10_0=ruleField_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"fieldsDeclaration",
        		lv_fieldsDeclaration_10_0, 
        		"Field_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getClass_declarationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleField_declaration
entryRuleField_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_declarationRule()); }
	 iv_ruleField_declaration=ruleField_declaration 
	 { $current=$iv_ruleField_declaration.current; } 
	 EOF 
;

// Rule Field_declaration
ruleField_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_comment_0_0=RULE_DOC_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getField_declarationAccess().getCommentDOC_COMMENTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"DOC_COMMENT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0()); 
	    }
		lv_variableDeclaration_1_0=ruleVariable_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"variableDeclaration",
        		lv_variableDeclaration_1_0, 
        		"Variable_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getContructorNameConstructor_declarationParserRuleCall_0_1_1_0()); 
	    }
		lv_contructorName_2_0=ruleConstructor_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"contructorName",
        		lv_contructorName_2_0, 
        		"Constructor_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getMethodNameMethod_declarationParserRuleCall_0_1_2_0()); 
	    }
		lv_methodName_3_0=ruleMethod_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_3_0, 
        		"Method_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getStaticinitializerStatic_initializerParserRuleCall_1_0()); 
	    }
		lv_staticinitializer_4_0=ruleStatic_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"staticinitializer",
        		lv_staticinitializer_4_0, 
        		"Static_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getField_declarationAccess().getField_declarationAction_2_0(),
            $current);
    }
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getField_declarationAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleMethod_declaration
entryRuleMethod_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethod_declarationRule()); }
	 iv_ruleMethod_declaration=ruleMethod_declaration 
	 { $current=$iv_ruleMethod_declaration.current; } 
	 EOF 
;

// Rule Method_declaration
ruleMethod_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getModifiersMethodModifierParserRuleCall_0_0()); 
	    }
		lv_modifiersMethod_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiersMethod",
        		lv_modifiersMethod_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getTypeMethodTypeParserRuleCall_1_0()); 
	    }
		lv_typeMethod_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"typeMethod",
        		lv_typeMethod_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_nameMethod_2_0=RULE_ID
		{
			newLeafNode(lv_nameMethod_2_0, grammarAccess.getMethod_declarationAccess().getNameMethodIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameMethod",
        		lv_nameMethod_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethod_declarationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getParameterListMethodParameter_listParserRuleCall_4_0()); 
	    }
		lv_parameterListMethod_4_0=ruleParameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"parameterListMethod",
        		lv_parameterListMethod_4_0, 
        		"Parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethod_declarationAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_6='[]' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethod_declarationAccess().getLeftSquareBracketRightSquareBracketKeyword_6());
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getStatementMethodStatement_blockParserRuleCall_7_0_0()); 
	    }
		lv_statementMethod_7_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"statementMethod",
        		lv_statementMethod_7_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethod_declarationAccess().getSemicolonKeyword_7_1());
    }
))
;





// Entry rule entryRuleConstructor_declaration
entryRuleConstructor_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructor_declarationRule()); }
	 iv_ruleConstructor_declaration=ruleConstructor_declaration 
	 { $current=$iv_ruleConstructor_declaration.current; } 
	 EOF 
;

// Rule Constructor_declaration
ruleConstructor_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getModifiersConstructorModifierParserRuleCall_0_0()); 
	    }
		lv_modifiersConstructor_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiersConstructor",
        		lv_modifiersConstructor_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_nameConstructor_1_0=RULE_ID
		{
			newLeafNode(lv_nameConstructor_1_0, grammarAccess.getConstructor_declarationAccess().getNameConstructorIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructor_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameConstructor",
        		lv_nameConstructor_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstructor_declarationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getParameterListConstructorParameter_listParserRuleCall_3_0()); 
	    }
		lv_parameterListConstructor_3_0=ruleParameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		set(
       			$current, 
       			"parameterListConstructor",
        		lv_parameterListConstructor_3_0, 
        		"Parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructor_declarationAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getStatementConstructorStatement_blockParserRuleCall_5_0()); 
	    }
		lv_statementConstructor_5_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		set(
       			$current, 
       			"statementConstructor",
        		lv_statementConstructor_5_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter_list
entryRuleParameter_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	 iv_ruleParameter_list=ruleParameter_list 
	 { $current=$iv_ruleParameter_list.current; } 
	 EOF 
;

// Rule Parameter_list
ruleParameter_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParameterParameterParserRuleCall_0_0()); 
	    }
		lv_parameter_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParametersParameterParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_parameterName_1_0=RULE_ID
		{
			newLeafNode(lv_parameterName_1_0, grammarAccess.getParameterAccess().getParameterNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parameterName",
        		lv_parameterName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='[]' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getLeftSquareBracketRightSquareBracketKeyword_2());
    }
)*)
;





// Entry rule entryRuleVariable_declaration
entryRuleVariable_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); }
	 iv_ruleVariable_declaration=ruleVariable_declaration 
	 { $current=$iv_ruleVariable_declaration.current; } 
	 EOF 
;

// Rule Variable_declaration
ruleVariable_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getModifiersVariableModifierParserRuleCall_0_0()); 
	    }
		lv_modifiersVariable_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiersVariable",
        		lv_modifiersVariable_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getNameVariableVariable_declaratorParserRuleCall_2_0()); 
	    }
		lv_nameVariable_2_0=ruleVariable_declarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		set(
       			$current, 
       			"nameVariable",
        		lv_nameVariable_2_0, 
        		"Variable_declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariable_declarationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getNamesVariable_declaratorParserRuleCall_3_1_0()); 
	    }
		lv_names_4_0=ruleVariable_declarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		add(
       			$current, 
       			"names",
        		lv_names_4_0, 
        		"Variable_declarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariable_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariable_declarator
entryRuleVariable_declarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declaratorRule()); }
	 iv_ruleVariable_declarator=ruleVariable_declarator 
	 { $current=$iv_ruleVariable_declarator.current; } 
	 EOF 
;

// Rule Variable_declarator
ruleVariable_declarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nameVariable_0_0=RULE_ID
		{
			newLeafNode(lv_nameVariable_0_0, grammarAccess.getVariable_declaratorAccess().getNameVariableIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariable_declaratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameVariable",
        		lv_nameVariable_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='[]' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariable_declaratorAccess().getLeftSquareBracketRightSquareBracketKeyword_1());
    }
)*)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeSpecifierType_specifierParserRuleCall_0_0()); 
	    }
		lv_typeSpecifier_0_0=ruleType_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_0_0, 
        		"Type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[]' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getLeftSquareBracketRightSquareBracketKeyword_1());
    }
)*)
;





// Entry rule entryRuleType_specifier
entryRuleType_specifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_specifierRule()); } 
	 iv_ruleType_specifier=ruleType_specifier 
	 { $current=$iv_ruleType_specifier.current.getText(); }  
	 EOF 
;

// Rule Type_specifier
ruleType_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getBooleanKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getByteKeyword_1()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getCharKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getShortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getIntKeyword_4()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getFloatKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getLongKeyword_6()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getDoubleKeyword_7()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getType_specifierAccess().getClass_nameParserRuleCall_8()); 
    }
    this_Class_name_8=ruleClass_name    {
		$current.merge(this_Class_name_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_MOD_0=RULE_MOD    {
		$current.merge(this_MOD_0);
    }

    { 
    newLeafNode(this_MOD_0, grammarAccess.getModifierAccess().getMODTerminalRuleCall_0()); 
    }

    |    this_STATIC_1=RULE_STATIC    {
		$current.merge(this_STATIC_1);
    }

    { 
    newLeafNode(this_STATIC_1, grammarAccess.getModifierAccess().getSTATICTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleStatic_initializer
entryRuleStatic_initializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatic_initializerRule()); }
	 iv_ruleStatic_initializer=ruleStatic_initializer 
	 { $current=$iv_ruleStatic_initializer.current; } 
	 EOF 
;

// Rule Static_initializer
ruleStatic_initializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=RULE_STATIC
		{
			newLeafNode(lv_static_0_0, grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatic_initializerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"static",
        		lv_static_0_0, 
        		"STATIC");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatic_initializerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement_block
entryRuleStatement_block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_blockRule()); }
	 iv_ruleStatement_block=ruleStatement_block 
	 { $current=$iv_ruleStatement_block.current; } 
	 EOF 
;

// Rule Statement_block
ruleStatement_block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_blockAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_blockAccess().getStatmentsStatementParserRuleCall_1_0()); 
	    }
		lv_statments_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_blockRule());
	        }
       		add(
       			$current, 
       			"statments",
        		lv_statments_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_blockAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_blockParserRuleCall_0()); 
    }
    this_Statement_block_0=ruleStatement_block
    { 
        $current = $this_Statement_block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
		lv_nameStatement_1_0=RULE_ID
		{
			newLeafNode(lv_nameStatement_1_0, grammarAccess.getStatementAccess().getNameStatementIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameStatement",
        		lv_nameStatement_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatementStatementParserRuleCall_1_2_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariable_declarationParserRuleCall_2()); 
    }
    this_Variable_declaration_4=ruleVariable_declaration
    { 
        $current = $this_Variable_declaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getTryStatementTry_statementParserRuleCall_3_0()); 
	    }
		lv_tryStatement_5_0=ruleTry_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"tryStatement",
        		lv_tryStatement_5_0, 
        		"Try_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_4_0(),
            $current);
    }
)	otherlv_7='break' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getBreakKeyword_4_1());
    }
(
(
		lv_name_8_0=RULE_ID
		{
			newLeafNode(lv_name_8_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_4_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_8_0, 
        		"ID");
	    }

)
)?	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStatementAccess().getSemicolonKeyword_4_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_5_0(),
            $current);
    }
)	otherlv_11='continue' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getContinueKeyword_5_1());
    }
(
(
		lv_name_12_0=RULE_ID
		{
			newLeafNode(lv_name_12_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_12_0, 
        		"ID");
	    }

)
)?	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStatementAccess().getSemicolonKeyword_5_3());
    }
)
    |	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleTry_statement
entryRuleTry_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTry_statementRule()); }
	 iv_ruleTry_statement=ruleTry_statement 
	 { $current=$iv_ruleTry_statement.current; } 
	 EOF 
;

// Rule Try_statement
ruleTry_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTry_statementAccess().getTryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getTryStatementStatementParserRuleCall_1_0()); 
	    }
		lv_tryStatement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		set(
       			$current, 
       			"tryStatement",
        		lv_tryStatement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'catch' 
)=>	otherlv_2='catch' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTry_statementAccess().getCatchKeyword_2_0());
    }
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTry_statementAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getParametersParameterParserRuleCall_2_2_0()); 
	    }
		lv_parameters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTry_statementAccess().getRightParenthesisKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getStatementStatementParserRuleCall_2_4_0()); 
	    }
		lv_statement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((	'finally' 
)=>	otherlv_7='finally' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTry_statementAccess().getFinallyKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getStatementFinallyStatementParserRuleCall_3_1_0()); 
	    }
		lv_statementFinally_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		set(
       			$current, 
       			"statementFinally",
        		lv_statementFinally_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleImport_statement
entryRuleImport_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_statementRule()); }
	 iv_ruleImport_statement=ruleImport_statement 
	 { $current=$iv_ruleImport_statement.current; } 
	 EOF 
;

// Rule Import_statement
ruleImport_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImport_statementAccess().getImportKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_statementAccess().getClassNameClass_nameParserRuleCall_1_0_0_0()); 
	    }
		lv_className_1_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_statementRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_1_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImport_statementAccess().getSemicolonKeyword_1_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_statementAccess().getPacNamePackage_nameParserRuleCall_1_1_0_0()); 
	    }
		lv_pacName_3_0=rulePackage_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_statementRule());
	        }
       		set(
       			$current, 
       			"pacName",
        		lv_pacName_3_0, 
        		"Package_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.*;' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImport_statementAccess().getFullStopAsteriskSemicolonKeyword_1_1_1());
    }
)))
;





// Entry rule entryRuleClass_name
entryRuleClass_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_nameRule()); } 
	 iv_ruleClass_name=ruleClass_name 
	 { $current=$iv_ruleClass_name.current.getText(); }  
	 EOF 
;

// Rule Class_name
ruleClass_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClass_nameAccess().getPackage_nameParserRuleCall()); 
    }
    this_Package_name_0=rulePackage_name    {
		$current.merge(this_Package_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleInterface_name
entryRuleInterface_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_nameRule()); } 
	 iv_ruleInterface_name=ruleInterface_name 
	 { $current=$iv_ruleInterface_name.current.getText(); }  
	 EOF 
;

// Rule Interface_name
ruleInterface_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInterface_nameAccess().getPackage_nameParserRuleCall()); 
    }
    this_Package_name_0=rulePackage_name    {
		$current.merge(this_Package_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulePackage_statement
entryRulePackage_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_statementRule()); }
	 iv_rulePackage_statement=rulePackage_statement 
	 { $current=$iv_rulePackage_statement.current; } 
	 EOF 
;

// Rule Package_statement
rulePackage_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackage_statementAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackage_statementAccess().getPacNamePackage_nameParserRuleCall_1_0()); 
	    }
		lv_pacName_1_0=rulePackage_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackage_statementRule());
	        }
       		set(
       			$current, 
       			"pacName",
        		lv_pacName_1_0, 
        		"Package_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackage_statementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePackage_name
entryRulePackage_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_nameRule()); } 
	 iv_rulePackage_name=rulePackage_name 
	 { $current=$iv_rulePackage_name.current.getText(); }  
	 EOF 
;

// Rule Package_name
rulePackage_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPackage_nameAccess().getIDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackage_nameAccess().getPackage_name_lineParserRuleCall_1()); 
    }
    this_Package_name_line_1=rulePackage_name_line    {
		$current.merge(this_Package_name_line_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePackage_name_line
entryRulePackage_name_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_name_lineRule()); } 
	 iv_rulePackage_name_line=rulePackage_name_line 
	 { $current=$iv_rulePackage_name_line.current.getText(); }  
	 EOF 
;

// Rule Package_name_line
rulePackage_name_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackage_name_lineAccess().getFullStopKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getPackage_name_lineAccess().getIDTerminalRuleCall_1()); 
    }
)*
    ;





RULE_STATIC : 'static';

RULE_MOD : ('public'|'private'|'protected'|'final'|'native'|'synchronized'|'abstract'|'threadsafe'|'transient');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$'|'\u00C0'..'\uFFFF')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n');

RULE_DOC_COMMENT : '/**';


